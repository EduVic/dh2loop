l = [[1, 2], [2, 3], [4, 5]]

out = open('out.csv', 'w')
for row in l:
    for column in row:
        out.write('%d,' % column)
    out.write('\n')
out.close()

-------

out= open('DB_lithology_First1.csv', 'w') 
                for column in row:
                    out.write('%s,' %column)
                out.write('\n')
            out.close()    
                    
----------

if t1 is not None and t2 is not None:
     if(t1>t2):
         print("fine") 
----------------------------------------------
----------------------------------------------
 if(to_depth>from_depth)
                First_Filter_list[]=row;
            else if(from_depth == to_depth)
                to_depth = to_depth+0.01
                row[3] = str(to_depth)
            else if(from_depth >to_depth)     
                row[2]=str(to_depth)        
                row[3]=str(from_depth)
            with open('DB_lithology_First.csv', 'w') as f:
                writer = csv.writer(f)
                writer.writerows(a)
				
				
				
				
				 
            #print(record)
    
    
    #First_Filter_list.append(record)
    

    
#outputquery = 'COPY ({0}) TO STDOUT WITH CSV HEADER'.format(query)
#with open('DB_lithology_First.csv', 'w') as f:
    #cur.copy_expert(outputquery, f)
-------------------
-------------------------------

	
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math 

bestmatch=-1
bestlitho=''
top=()
out= open("DB_lithology_Final.csv", "w")
query = '''SELECT dic_attr_val_lithology_filter.company_id,dic_attr_val_lithology_filter.company_code,replace(dic_attr_val_lithology_filter.comapany_litho, ',' , '_') as comapany_litho  FROM dic_attr_val_lithology_filter'''
conn = psycopg2.connect(host='130.95.198.59', port = 5432, database='gswa_dh', user='postgres', password='loopie123pgpw')
cur = conn.cursor()
cur.execute(query)
a_list = [list(elem) for elem in cur]
for row in a_list:
	for First_filter_ele in First_Filter_list:
		ele_0 = str(First_filter_ele[0]).replace('(','').replace(')','').replace(',','').replace('\'','')
		ele_5 = str(First_filter_ele[5]).replace('(','').replace(')','').replace(',','').replace('\'','')
		company_code = row[1]
		company_litho = row[2]
		if row[0] == First_filter_ele[0] && row[1] == First_filter_ele[5]
			cleaned_text=clean_text(row[2])
	
			 words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
			 words=words.split(" ")
			 last=len(words)-1 #position of last word in phrase
	
	
			for Litho_dico_ele in Litho_dico:
				litho_words=Litho_dico_ele.lower().rstrip('\n\r').split(" ")
				scores=process.extract(cleaned_text, litho, scorer=fuzz.token_set_ratio,limit=1)
				
				
				for sc in scores:                        
					if(sc[1]>bestmatch): #better than previous best match
					bestmatch =  sc[1]             
					bestlitho=litho[0]
					top=sc
					if(sc[0]==words[last]): #bonus for being last word in phrase
						bestmatch=bestmatch*1.01
            
				elif (sc[1]==bestmatch): #equal to previous best match
					if(sc[0]==words[last]): #bonus for being last word in phrase
						bestlitho=litho[0]
						bestmatch=bestmatch*1.01                  
					top=top+sc
		if top[1] >80:
			del First_filter_ele[4]
			del First_filter_ele[5]
			for column in First_filter_ele:
				out.write('%s,' %column)
				out.write('%s,' %row[1])
				out.write('%s,' %row[2])
				out.write('%s,' %top[0])
				out.write('%d,' %top[1])
				out.write('\n')
		else 
			del First_filter_ele[4]
			del First_filter_ele[5]
			for column in First_filter_ele:
				out.write('%s,' %column)
				out.write('%s,' %row[1])
				out.write('%s,' %row[2])
				out.write('%s,' %top[0])
				out.write('%d,' %top[1])
				out.write('\n')
cur.close()
conn.close()
out.close()


def clean_text(text)
	text=text.lower().replace('unnamed','').replace('meta','').replace('meta-','').replace('undifferentiated ','').replace('unclassified ','')
    text=text.replace('differentiated','').replace('undiff','').replace('undiferentiated','').replace('undifferntiates','')
	text=(re.sub('\(.*\)', '', text)) # removes text in parentheses
	text=(re.sub('\[.*\]', '', text)) # removes text in parentheses
	text=text.replace('>','').replace('?','').replace('/',' ') 
	text = text.replace('>') , ' ')
	text = text.replace('<'), ' ')
	text = text.replace('/'), ' ')
	text = text.replace(' \' '), ' ')
	text = text.replace(','), ' ')
	text = text.replace('%'), ' ')
	text = text.replace('-'), ' ')
	text = text.replace('_'), ' ')
	//text = text.replace(''), ' ')
	//text = text.replace('+'), '')
	text = text.replace('\''), ' ') 
    if text.isnumeric():
		text = re.sub('\d', ' ', text) //replace numbers
	text = text.replace('&') , ' ')
	text = text.replace(','), ' ')
	text = text.replace('.'), ' ')
	text = text.replace(':'), ' ')
	text = text.replace(';'), ' ')
	text = text.replace('$'), ' ')
	text = text.replace('@'), ' ')
	
	for cleanup_dic_ele in cleanup_dic_list:
		cleaned_item =str(cleanup_dic_ele).replace('(','').replace(')','').replace(',','').replace('\'','')
		text = text.replace('cleaned_item','')
	return text
	
	-------------------top ---------------------
	
	top_new = [list(elem) for elem in top]
	for ele in top_new:
	
	-----------------------
	---------------------------
	new fuzzy
	============
	def Final_Lithology():
	print("--------start of Final -----------")
	fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode','Company_Lithology','CET_Lithology','Score']
    out= open("DB_lithology_Final.csv", "w",encoding ="utf-8")
	for ele in fieldnames:
		out.write('%s,' %ele)
    out.write('\n')
	for First_filter_ele in First_Filter_list:
		for Attr_val_Dic_ele in Attr_val_Dic_new:
			if int(Attr_val_Dic_ele[0]) == First_filter_ele[0] and  Attr_val_Dic_ele[1] == First_filter_ele[5]:
				out.write('%s,' %First_filter_ele[0])
				out.write('%s,' %First_filter_ele[1])
				out.write('%s,' %First_filter_ele[2])
				out.write('%s,' %First_filter_ele[3])
				out.write('%s,' %Attr_val_Dic_ele[3])
				out.write('%d,' %Attr_val_Dic_ele[4])
	
	
	
		
	
	
	print("--------End of Final -----------")
	
	
	
time
2.26
3.03
----
3.20
3.55
---
4.08
4.50---42 min
----	
5.30
5.31 attr_val_fuzzy--start
5.36 end
5.58     First Filter End ---------------------22 min
	 STart_final
6.07  End final	
	

9 min to query 
	
	
	-------------------
	-----------------
	select
    E.emplayeeID, E.Salary
from
    employees E
    JOIN
    OPENROWSET (
             BULK 'c:\myfile.txt',
             FORMATFILE = 'c:\myfileformat.txt'
    ) B ON E.name  = B.name 
	
	
	
	
	
create temp table Lith_names (lith text);
copy Lith_names from stdin Dic_attr_col.csv; -- pipe your text file here
query = """select t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn, t1.attributevalue 
    from public.dhgeologyattr t1 
    inner join public.dhgeology t2 
    on t1.dhgeologyid = t2.id 
    inner join collar t3 
    on t3.id = t2.collarid 
    inner join clbody t4 
    on t4.companyid = t3.companyid 
    WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN - 30.5 AND - 27.5)
    And
    WHERE t1.attributecolumn in(select * from Dic_attr_col)
    ORDER BY t3.companyid ASC"""




select
    test.id, test.collarid
from
    employees test
    JOIN
    OPENROWSET (
             BULK 'H:\My Documents\jupyter notebook kavitha\Lithology\test_file.csv',
             FORMATFILE = 'H:\My Documents\jupyter notebook kavitha\Lithology\myfileformat.csv'
    ) B ON test.attributecolumn = B.name 

	
	
	
	
	
	
	
	
	
	
	
	----------------------------------
	-------------------------
	------------------------
	Survey
	------------------
	---------------------------------
	-------------------------------------
	
query = '''select t1.collarid,t1.depth,t2.attributecolumn,t2.attributevalue 
		from public.dhsurvey t1
		inner join public.collar 
		on collar.id = t1.collarid
		inner join dhsurveyattr t2
		on t1.id = t2.dhsurveyid
		where((collar.longitude BETWEEN 117 AND 118) AND(collar.latitude BETWEEN - 30.5 AND - 27.5) )
		order by collar.id ASC'''
conn = psycopg2.connect(host='130.95.198.59', port = 5432, database='gswa_dh', user='postgres', password='loopie123pgpw')
cur = conn.cursor()
cur.execute(query)
a_list = [list(elem) for elem in cur]




11


18 min new idea
------
24-01--date
11.51--start
12.15--end----24 min
------------------------------
-------------------
12.43---start
1.09--------------------26 min
------------------------
2.02---start
2.27--------25 min	
------------------------
------------------------
2.40---start------23min
3.03
-----------------
3.11----start
3.35--end----------24min
------------------------------------
hi mark,

final lithology generated at 24 min.

company desription fuzzy wuzzy was taking 42min.Later i colud merge att_column with query which reduced to 24 min.

please have a look into the file.


i tested file ,i think clean up and litho_dic needs updation , i will discuss with ranee.

---------------------
---------------------------

survey--------
---------------------

#print(survey_ele)
            if (isinstance(survey_ele[1], float) or isinstance(survey_ele[1], int)) :   # depth
               if(survey_ele[1] > 0):
                  #if(survey_ele[2] > maxdepth):     # check with maxdepth
                  #else:
                  print("depth fine")
               
            elif(survey_ele[1] < 0):
               survey_ele[1] = abs(survey_ele[1])
            else :
               continue
               
                  
                  
            if (survey_ele[2] == attr_col_ele[0]):  #AZI
               if "AZI" in attr_col_ele[1]:
                  #print("AZI")
                  if float(survey_ele[3])  <= 360:
                     #if( chk negetive
                     print("AZI fine")
                  elif float(survey_ele[3])  > 360 :
                     continue
                     

               elif "DIP" in attr_col_ele[1]:      #DIP
                  #print("DIP")
                  if float(survey_ele[3]) < 0:
                     print("dip fine")
                  elif float(survey_ele[3]) > 0:
                     continue

---------------------------
---------------------
new surveu code

			if survey_ele[2] == attr_col_ele[0]:  #AZI
               if 'AZI' in attr_col_ele[1]:
                  if survey_ele[3].isalpha():
                     continue
                  elif survey_ele[3].isdigit():
                     if float((survey_ele[3]).replace('\'',''))  > 360:  # combine al skip cases
                        continue
                  else:
                     AZI = float((survey_ele[3]).replace('\'',''))

            #if (survey_ele[2] == attr_col_ele[0]):  #DIP
               elif 'DIP' in attr_col_ele[1]:
                  if survey_ele[3].isalpha():
                     continue
                  elif survey_ele[3].isdigit():
                     if float((survey_ele[3]).replace('\'',''))  > 90:  # combine al skip cases
                        continue
                  elif float((survey_ele[3]).replace('\'','')) < 0 or float((survey_ele[3]).replace('\'','')) == 0 :
                     DIP = float((survey_ele[3]).replace('\'',''))


            if float(survey_ele[1]) < 0:  # depth # chk all corrections
               survey_ele[1] = abs(survey_ele[1])      
                   
            else:
               out.write('%d,' %survey_ele[0])
               out.write('%f,' %survey_ele[1])
               out.write('%s,' %AZI)
               out.write('%f' %DIP)
               out.write('\n')
                              
	-----------------------
	----------survey 18.2
	
	import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math 

Attr_col_survey_dic_list=[]

def Survey_Final():
   print("-----start Final---")
   fieldnames=['CollarID','Depth','Azimuth','Dip']
   out= open("DB_Survey_Final.csv", "w",encoding ="utf-8")
   for ele in fieldnames:
        out.write('%s,' %ele)
   out.write('\n')
   query =""" select t1.collarid,t1.depth,t2.attributecolumn,t2.attributevalue 
		from public.dhsurvey t1
		inner join public.collar 
		on collar.id = t1.collarid
		inner join dhsurveyattr t2
		on t1.id = t2.dhsurveyid
		where((collar.longitude BETWEEN 117 AND 118) AND(collar.latitude BETWEEN - 30.5 AND - 27.5) )
		order by collar.id ASC """
   conn = None
   AZI = 0.0
   DIP = 0.0
   Pre_id =0.0
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      cur.execute(query)
      Survey_First_Filter = [list(elem) for elem in cur]
      Survey_dic_list = [list(elem) for elem in Attr_col_survey_dic_list] 
      for survey_ele in Survey_First_Filter:
         for attr_col_ele in Survey_dic_list:
            if survey_ele[2] == attr_col_ele[0]:  #AZI
               Pre_id = survey_ele[0]
               if 'AZI' in attr_col_ele[1]:
                  #print("1")
                  if survey_ele[3].isalpha():
                     #print("2")
                     continue
                  elif survey_ele[3].isdigit():
                     #print("3")
                     if float((survey_ele[3]).replace('\'',''))  > 360:
                        #print("4")
                        continue
                     else:
                        #print("4")
                        AZI = float((survey_ele[3]).replace('\'',''))

               elif 'DIP' in attr_col_ele[1]:
                  if survey_ele[3].isalpha():
                     continue
                  elif survey_ele[3].isdigit():
                     if float((survey_ele[3]).replace('\'',''))  > 90:  # combine al skip cases
                        continue
                  elif float((survey_ele[3]).replace('\'','')) < 0 or float((survey_ele[3]).replace('\'','')) == 0 :
                     DIP = float((survey_ele[3]).replace('\'',''))
                     
              
                     
               if float(survey_ele[1]) < 0:  # depth # chk all corrections
                  survey_ele[1] = abs(survey_ele[1])      
                  
                  
               
         out.write('%d,' %survey_ele[0])
         out.write('%f,' %survey_ele[1])
         out.write('%s,' %AZI)
         out.write('%f' %DIP)
         out.write('\n')
         AZI=0.0
         DIP = 0.0
            
                 
           
                  
               
               
               







            
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   print("-----End Final---")




def Attr_col_dic():
   print("------ dictionary----start")
   query =""" SELECT * FROM public.survey_dic """
   conn = None
   temp_list =[]
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      cur.execute(query)

      for rec in cur:
         Attr_col_survey_dic_list.append(rec)

         
      #Attr_col_survey_dic_list = [list(elem) for elem in temp_list]

      #for ele in Attr_col_survey_dic_list:
         #print(ele)
         #Attr_col_survey_dic_list.append(record)

      outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
      with open('Dic_attr_col_survey.csv', 'w') as f:
         cur.copy_expert(outputquery, f)
      
 
          
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   print("------ dictionary----End")
         





   



Attr_col_dic()
Survey_Final()






-----------------print survey
------------------



	
	
	
	
	
	
	
	
	AZI_DIP_Print_Filter
	
	
	
	
	
	
	
	for ele1 in AZI_DIP_LIST:
                        #print(AZI_DIP_LIST)
                        tmp =ele1
                        
                        for ele2 in AZI_DIP_LIST:
                           if(tmp[0]==ele2[0] and tmp[1]==ele2[1] and tmp[2]==ele2[2]):
                              if count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                                 if(tmp[1] == ele2[1]) and tmp[2]==ele2[2] :
                                    AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                              
                           elif(tmp[0]==ele2[0] and tmp[1]!=ele2[1] and tmp[2]!=ele2[2]):
                              #print("KKK")
                              #if count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                                 #if(tmp[1] == ele2[1]) and tmp[2]==ele2[2] :
                                    #AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                    
                              if (count_Digit(tmp[1]) > count_Digit(ele2[1]) and count_Digit(tmp[2]) > count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],tmp[1],tmp[2]])
                              elif(count_Digit(tmp[1]) < count_Digit(ele2[1]) and count_Digit(tmp[2]) < count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],ele2[1],ele2[2]])
                              elif (count_Digit(tmp[1]) > count_Digit(ele2[1]) and count_Digit(tmp[2]) < count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                              elif (count_Digit(tmp[1]) < count_Digit(ele2[1]) and count_Digit(tmp[2]) > count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],ele2[1],tmp[2]])
                              elif (count_Digit(tmp[1]) < count_Digit(ele2[1]) and count_Digit(tmp[2]) > count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],ele2[1],tmp[2]])
                              elif (count_Digit(tmp[1]) > count_Digit(ele2[1]) and count_Digit(tmp[2]) < count_Digit(ele2[2])):
                                 AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                 
                              elif(count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) > count_Digit(ele2[2])):
                                 if(tmp[1] > ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],tmp[1],tmp[2]])
                                 elif(tmp[1] < ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],ele2[1],tmp[2]])
                    
                              elif count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) < count_Digit(ele2[2]):
                                 if(tmp[1] > ele2[1]): 
                                    AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                 elif(tmp[1] < ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],ele2[1],ele2[2]])

                              elif count_Digit(tmp[1]) < count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                                 if(tmp[1] > ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                 elif(tmp[1] < ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],ele2[1],ele2[2]])

                              elif count_Digit(tmp[1]) > count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                                 if(tmp[1] > ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                 elif(tmp[1] < ele2[1]) :
                                    AZI_DIP_Print.append([tmp[0],ele2[1],ele2[2]])

                              #elif count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                                 #if(tmp[1] == ele2[1]) and tmp[2]==ele2[2] :
                                    #AZI_DIP_Print.append([tmp[0],tmp[1],ele2[2]])
                                 
                    
                    
                              #elif count_Digit(tmp[1]) == count_Digit(ele2[1]) and count_Digit(tmp[2]) == count_Digit(ele2[2]):
                               #  print(tmp[1])
                                # print(ele2[1])
                                 #print(tmp[2])
                                 #print(ele2[2])
                                 #if (tmp[1]) > (ele2[1]) and (tmp[2]) > (ele[2]) :
                                  #  AZI_DIP_Print.append([tmp[0],tmp[1],tmp[2]])
                                 #if tmp[1] < ele2[1] and tmp[2] < ele[2] :
                                  #  AZI_DIP_Print.append([tmp[0],ele2[1],ele2[2]])
                    

	
	
	
	
	

	











	
	/////links
	1) https://github.com/CodeReclaimers/neat-python/issues/148
	
	2)https://stackoverflow.com/questions/3965104/not-none-test-in-python
	
	
	---------------------
	
	
	if min_long >=114.0000  and max_long  <= 120.0000 : #MGA Zone 50,114.0000, -35.2000, 120.0000, -19.6000
    if min_latt  >= -35.2000 and max_latt <= -19.6000:
        transformer0 = Transformer.from_crs(4326, 28350)
            
    
if min_long >=120.0000  and max_long  <= 126.0000 :  #MGA Zone 51,120.0000, -34.2000, 126.0000, -13.6000
    if min_latt  >= -34.2000 and max_latt <= -13.6000:
        transformer1 = Transformer.from_crs(4326, 28351)
            
if min_long >=126.0000 and max_long  <= 132.0000 :  #MGA Zone 52  126.0000, -32.5000, 132.0000, -10.7000
    if min_latt  >= -32.5000 and max_latt <= -10.7000:
        transformer2 = Transformer.from_crs(4326, 28352)
            
if min_long >=132.0000  and max_long  <= 138.0000 :  #MGA Zone 53 132.0000, -36.1000, 138.0000, -10.7000
    if min_latt  >= -36.1000 and max_latt <=  -10.7000:
        transformer3 = Transformer.from_crs(4326, 28353)
            
            
if min_long >=138.0000 and max_long  <= 144.0000 :  #MGA Zone 54 138.0000, -40.3000, 144.0000, -10.1000
    if min_latt  >= -40.3000 and max_latt <= -10.1000:
        transformer4 = Transformer.from_crs(4326, 28354)
            
if min_long >=144.0000  and max_long  <= 150.0000 :  #MGA Zone 55,144.0000, -44.1000, 150.0000, -13.7000
    if min_latt  >= -44.1000 and max_latt <= -13.7000:
        transformer5 = Transformer.from_crs(4326, 28355)
            
if min_long >=150.0000  and max_long  <= 156.0000 :  #MGA Zone 56,150.0000, -37.8000, 156.0000, -21.7000
    if min_latt  >= -37.8000 and max_latt <= -21.7000:
        transformer6 = Transformer.from_crs(4326, 28356)
		
		
		
		---------------
		 if 114.0000 <=Pre_Longitude  <= 120.0000:      #114.0000, -35.2000, 120.0000, -19.6000
            if -35.2000 <= Pre_latitude <= -19.6000:
                x2,y2=transformer0.transform(Pre_latitude,Pre_Longitude)
                
         if 120.0000 <= Pre_Longitude <= 126.0000:      #MGA Zone 51,120.0000, -34.2000, 126.0000, -13.6000
            if -34.2000 <= Pre_latitude <= -13.6000:
                x2,y2=transformer1.transform(Pre_latitude,Pre_Longitude)
                
         if 126.0000 <=Pre_Longitude  <= 132.0000:     #MGA Zone 52  126.0000, -32.5000, 132.0000, -10.7000
             if -32.5000 <= Pre_latitude <= -10.7000:
                 x2,y2=transformer2.transform(Pre_latitude,Pre_Longitude)
                
         if 132.0000 <= Pre_Longitude <= 138.0000:      #MGA Zone 53,132.0000, -36.1000, 138.0000, -10.7000
            if -36.1000 <= Pre_latitude <= -10.7000:
                x2,y2=transformer3.transform(Pre_latitude,Pre_Longitude)
                
         if 138.0000 <=Pre_Longitude  <= 144.0000:      #MGA Zone 54 ,138.0000, -40.3000, 144.0000, -10.1000
             if -40.3000 <= Pre_latitude <= -10.1000:
                 x2,y2=transformer4.transform(Pre_latitude,Pre_Longitude)
                
         if 144.0000 <= Pre_Longitude <= 150.0000:     #MGA Zone 55,144.0000, -44.1000, 150.0000, -13.7000
            if -44.1000 <= Pre_latitude <= -13.7000:
                x2,y2=transformer5.transform(Pre_latitude,Pre_Longitude)
                
         if 150.0000 <= Pre_Longitude <= 156.0000:     #MGA Zone 56,150.0000, -37.8000, 156.0000, -21.7000
            if -37.8000 <= Pre_latitude <= -21.7000:
                x2,y2=transformer6.transform(Pre_latitude,Pre_Longitude)
------------------------
				
	for index,row in survey.iterrows():
      if(row['CollarID'] != last_CollarID):
         #print(row['CollarID'])
         #print(last_CollarID)
         #if(row['CollarID'] == 124972) :
           # i=i+1
            #print(i)

         print("1")
         first=True

      if(first ==True):
         print("2")
         first=False
         last_Dip=float(row['Dip'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
         last_CollarID=(row['CollarID'])
         X1=float(row['X'])
         Y1=float(row['Y'])
         Z1=float(row['RL'])
         print(index)
         #index=indx+2
			
         out.write('%s,' %last_CollarID)
         out.write('%f,' %last_Dip)
         out.write('%f,' %last_Azi)
         out.write('%f,' %last_Depth)
	 #out.write('%d,' %index)
         out.write('%f,' %X1)
         out.write('%f,' %Y1)
         out.write('%f,' %Z1)
         out.write('\n')
         print(last_CollarID)
         #first=False
	 #print(holeid,float(interval['Depth']),float(interval['Azimuth'],float(interval['Dip']),indx+2,X1,Y1,Z1)
      else:
         if(row['CollarID'] == last_CollarID):
            #print("3")
            print(row['CollarID'])
            print(last_CollarID)
            print(first)
            X2,Y2,Z2=dia2xyz(X1,Y1,Z1,last_Dip,last_Azi,last_Depth,float(row['Dip']),float(row['Azimuth']),float(row['Depth']))
            #print(X2)
            #print(Y2)
            #print(Z2)
            out.write('%s,' %last_CollarID)
            out.write('%f,' %last_Dip)
            out.write('%f,' %last_Azi)
            out.write('%f,' %last_Depth)
	    #out.write('%d,' %index)
            out.write('%f,' %X2)
            out.write('%f,' %Y2)
            out.write('%f,' %Z2)
            out.write('\n')
	    #print(holeid,float(interval['Depth']),float(interval['Azimuth'],float(interval['Dip']),interval['index'],X2,Y2,Z2)
            X1=X2
            Y1=Y2
            Z1=Z2
            last_Dip=float(row['Dip'])
            last_Azi=float(row['Azimuth'])
            last_Depth=float(row['Depth'])	
			
			
			----------------
			-----------------------------
			 else:
         #if(if_Excected == False)                #if(row['CollarID'] == last_CollarID):
            print("else_block")
            print(row['CollarID'])
            print(last_CollarID)
            #print(first)
            X2,Y2,Z2=dia2xyz(X1,Y1,Z1,last_Dip,last_Azi,last_Depth,float(row['Dip']),float(row['Azimuth']),float(row['Depth']))
            #print(X2)
            #print(Y2)
            #print(Z2)
            out.write('%s,' %last_CollarID)
            out.write('%f,' %last_Dip)
            out.write('%f,' %last_Azi)
            out.write('%f,' %last_Depth)
	    #out.write('%d,' %index)
            out.write('%f,' %X2)
            out.write('%f,' %Y2)
            out.write('%f,' %Z2)
            out.write('\n')
	    #print(holeid,float(interval['Depth']),float(interval['Azimuth'],float(interval['Dip']),interval['index'],X2,Y2,Z2)
            X1=X2
            Y1=Y2
            Z1=Z2
            last_Dip=float(row['Dip'])
            last_Azi=float(row['Azimuth'])
            last_Depth=float(row['Depth'])
            #if_Excected ==True
	
	132074
	
	------------------
	---------------
	  my code---
	  ----------
	  -----------------
	  
   def convert_survey():
   X2=0.0
   Y2=0.0
   Z2=0.0
   fieldnames=['CollarID','Depth','Azimuth','Dip','X','Y','Z']
   out= open('DB_Survey_Export_Calc.csv', "w",encoding ="utf-8")
   for ele in fieldnames:
      out.write('%s,' %ele)
   out.write('\n')

   location=pd.read_csv('DB_Collar_Export.csv')
   print(location)
   #location.set_index('CollarID',inplace=True)
   #print(location)
   survey=pd.read_csv('DB_Survey_Export.csv')
   print(survey)
   #survey.astype({'CollarID': '|S80'}).dtypes
   #print(survey)
   #survey.drop(survey.index[len(survey)-1],inplace=True)
   #print(survey)
   #survey.reset_index(inplace=True)
   #print(survey)
   survey=pd.merge(survey,location, how='left', on='CollarID')
   survey.to_csv('merge.csv', encoding='utf-8', index=False)
   print("merge")
   #print(survey.dtypes)
   #holeid=''
   i=0;
   last_CollarID= ''
   if_Excected = True
   for index,row in survey.iterrows():
      if(row['CollarID'] != last_CollarID):
         X1=0.0
         Y1=0.0
         Z1=0.0
         last_Dip =0.0
         last_Azi =0.0
         last_Depth =0.0
         last_CollarID =0.0
         #print("if_block")
         #first=False
         #if(row['CollarID'] == 124972):
            #i= i+1
            #print(i)
         last_Dip=float(row['Dip'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
         last_CollarID=(row['CollarID'])
         X1=float(row['X'])
         Y1=float(row['Y'])
         Z1=float(row['RL'])
         #print(index)
         #index=indx+2
			
         out.write('%s,' %last_CollarID)
         out.write('%f,' %last_Dip)
         out.write('%f,' %last_Azi)
         out.write('%f,' %last_Depth)
	 #out.write('%d,' %index)
         out.write('%f,' %X1)
         out.write('%f,' %Y1)
         out.write('%f,' %Z1)
         out.write('\n')
         #print(last_CollarID)
         #if_Excected =False
         #first=False
	 #print(holeid,float(interval['Depth']),float(interval['Azimuth'],float(interval['Dip']),indx+2,X1,Y1,Z1)
         i=0;
      else:
         X2=0.0
         Y2=0.0
         Z2=0.0
         print(row['CollarID'])
         print(last_CollarID)
         #print(first)
         X2,Y2,Z2=dia2xyz(X1,Y1,Z1,last_Dip,last_Azi,last_Depth,float(row['Dip']),float(row['Azimuth']),float(row['Depth']))
         out.write('%s,' %last_CollarID)
         out.write('%f,' %last_Dip)
         out.write('%f,' %last_Azi)
         out.write('%f,' %last_Depth)
         out.write('%f,' %X2)
         out.write('%f,' %Y2)
         out.write('%f,' %Z2)
         out.write('\n')
	 #print(holeid,float(interval['Depth']),float(interval['Azimuth'],float(interval['Dip']),interval['index'],X2,Y2,Z2)
         X1=X2
         Y1=Y2
         Z1=Z2
         last_Dip=float(row['Dip'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
         #if_Excected ==True
      
     
   out.close()







def dia2xyz(X1,Y1,Z1,I1,Az1,Distance1,I2,Az2,Distance2):
   I1=radians(I1)
   Az1=radians(Az1)
   I2=radians(I2)
   Az2=radians(Az2)
	
   MD = Distance2 - Distance1

   Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
   if(Beta==0):
      RF=1
   else:
      RF = 2 / Beta * tan(Beta / 2)

      dX = MD/2 * (sin(I1)*sin(Az1) + sin(I2)*sin(Az2))*RF
      dY = MD/2 * (sin(I1)*cos(Az1) + sin(I2)*cos(Az2))*RF
      dZ = MD/2 * (cos(I1) + cos(I2))*RF

      X2 = X1 + dX
      Y2 = Y1 + dY
      Z2 = Z1 - dZ
	
      #print(X2)
      #print(Y2)
      #print(Z2)
      return X2,Y2,Z2
	  
	  ----------------
	  ----------------------------------------
	  Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)
	  
	  ---------------------
	  --------------
CollarID
123575
123576
123577
123578
123579
123581
123583
123584
123585
123586
123587
123588
123589
123590
123591
123592
123593
123594
123595
123596
123597
124897
124898
124899
124900
124901
124902
124903
124904
124905
124906
124907
124908
124909
124910
124911
124912
124913
124914
124915
124916
124917
124918
124919
124920
124921
124922
124923
124924
124925
124926
124927
124928
124929
124930
124931
124932
124933
124934
124935
124936
124937
124938
124939
124940
124941
124942
124943
124944
124945
124946
124947
124948
124949
124950
124951
124952
124953
124954
124955
124956
124957
124958
124959
124960
124961
124962
124963
124964
124965
124966
124967
124968
124969
124970
124971
124972
124973
124974
124975
124976
124977
124978
124979
124980
124981
124982
124983
124984
124985
124986
124987
124988
124989
124990
124991
124992
124993
124994
124995
124996
125471
125472
125473
125474
125475
125476
125477
125478
125479
125480
125481
125482
125483
125484
125485
125486
125487
125488
125489
125490
129019
129020
129021
129022
129023
129024
131839
131841
131842
131849
131861
131873
131876
131878
131879
131882
131883
131884
131885
131886
131887
131888
131889
131892
131893
131894
131896
131899
131901
131902
131903
131904
131916
131922
131925
131927
131929
131930
131931
131933
131934
131935
131938
131943
131949
131950
131952
131956
131960
131962
131963
131964
131965
131967
131968
131970
131971
131972
131983
131984
131985
131986
131988
131989
131990
131998
131999
132000
132002
132004
132021
132022
132032
132035
132036
132037
132038
132039
132040
132041
132043
132044
132045
132047
132048
132049
132050
132051
132052
132053
132054
132055
132056
132058
132059
132065
132066
132068
132069
132073
132075
132107
132111
132114
132116
132119
132125
132127
132128
132134
132136
132140
132141
132142
132159
132161
132162
132163
132164
132165
132166
132167
132168
132169
132170
132171
132172
132173
132174
132175
147679
151379
151380
151381
151382
151383
151384
151385
151386
151388
151389
151390
151391
151392
151393
151394
151395
151396
151397
151400
151401
151420
151423
151424
151425
151427
151428
151429
151430
151431
151432
151433
151434
151435
151436
151437
151438
151439
151440
151441
151442
151443
151444
151445
151446
151447
151448
151449
151450
151451
151452
151453
151454
151455
151456
151457
151458
151459
151460
151461
151462
151463
151464
151465
151466
151467
151468
151469
151470
151471
151472
151473
151474
151475
151476
151477
151478
151479
151480
151482
151483
151484
151485
153006
153011
153012
153013
153014
153015
153016
153017
153018
153020
153021
153022
153025
153026
153027
153028
153029
153030
153031
153033
153034
153035
153036
153037
153062
153300
153577
153578
153579
153580
153581
153636
153637
153640
153641
153643
153644
153645
153646
153802
153803
153804
153813
153815
153816
153817
153818
153819
153820
153821
153822
153823
153824
153825
153826
153827
153828
153829
153830
153831
153832
153833
153834
153835
153836
153837
153838
153843
153844
153846
153848
153849
153850
153853
153856
153863
153864
153866
153867
153868
153870
153871
153872
153873
153874
153875
153876
153877
153878
153880
153882
153883
153884
153888
153898
153899
153900
169316
169317
169318
169319
169320
169321
169322
169323
169324
169325
169326
169327
169328
169329
169330
169331
169332
169333
169334
169335
169336
169337
169338
169339
169340
169341
169342
169343
169344
169345
169346
169347
169350
169351
169352
169353
169354
169355
169356
169357
169358
169359
169360
169361
169362
169363
169364
169365
169366
169367
169368
169389
169390
169391
169392
169393
169394
169395
169396
169397
169398
169399
169400
169401
169402
169403
169404
169405
169406
169407
169408
169409
169410
169411
169412
169413
169414
169415
169416
169417
169418
169419
169420
169421
169422
169423
169424
169425
169426
169427
169428
169429
169430
169431
169432
169433
169434
169435
169436
169437
169438
169439
169440
169441
169442
169443
169444
169445
169446
169447
169448
169449
169450
169451
169452
169453
169454
169455
169456
169457
169458
169459
169460
169461
169462
169463
169464
169465
169466
169467
169469
169470
169471
169472
169473
169474
169475
169476
169477
169478
169479
169480
169481
169482
169483
169484
169485
169486
169487
169488
169489
169490
169491
169492
169493
169494
169495
169496
169497
169498
169499
169500
169501
169502
169503
169504
169505
169506
169507
169508
169509
169510
169511
169512
169513
169514
169515
169516
169517
169518
169519
169520
169521
169522
169523
169524
169525
169526
169527
169528
169529
169530
169531
169532
169533
169534
169535
169536
169537
169538
169539
169540
169541
169542
169543
169544
169545
169546
169547
169548
169549
169550
169551
169552
169553
169554
169555
169556
169557
169558
169559
169560
169561
169562
169563
169564
169565
169566
169567
169568
169569
169570
169571
169572
169573
169574
169575
169576
169577
169578
169579
169580
169581
169582
169583
169584
169585
169586
169587
169588
169589
169590
169591
169592
169593
169594
169595
169596
169597
169598
169599
169600
169601
169602
169603
169604
169605
169606
169607
169608
169609
169610
169611
169612
169613
169614
169615
169616
169617
169618
169619
169620
169621
169622
169623
169624
169625
169626
169627
169628
169629
169630
169631
169632
169633
169634
169635
169636
169637
169638
169639
169640
169641
169642
169643
169644
169645
169646
169647
169648
169649
169650
169651
169652
169653
169654
169655
169656
169657
169658
169659
169660
169661
169662
169663
169664
169665
169666
169667
169668
169669
169670
169671
169672
169673
169674
169675
169676
169677
169678
169679
169680
169681
169682
169683
169684
169685
169686
169687
169688
169689
169690
169691
169692
169693
169694
169695
169696
169697
169698
169699
169700
169701
169702
169703
169704
169705
169706
169707
169708
169709
169710
169711
169713
169714
169715
169716
169717
169718
169719
169720
169721
169722
169723
169724
169725
169726
169727
169728
169729
169730
169731
169732
169733
169734
169735
169736
169737
169738
169739
169740
169741
169742
169743
169744
169745
169746
169747
169748
169749
169750
169751
169752
169753
169754
169755
169756
169757
169758
170459
170460
170461
170462
170463
170464
170465
170466
170467
170468
170469
170470
170471
170472
170473
170474
191014
191015
191016
191017
191018
191019
191020
191021
191022
191023
191024
191025
191026
191027
191028
191029
191030
191031
191032
191033
191034
191035
191036
191037
191038
191039
191040
191041
191042
191043
191044
191045
191046
191047
191048
191049
191050
191051
223422
230432
230433
230434
230435
230436
230437
230438
230439
230440
230441
230442
230443
230444
230445
230446
230447
230448
230449
230450
230451
230452
230453
230454
230455
230456
230457
230458
230459
230460
230461
230462
230463
230464
230465
230466
230467
230468
230469
230470
230471
230472
230473
230474
230476
230477
230478
230479
230480
230481
230482
230483
230484
230485
230486
230487
230488
230489
230490
230491
230492
230493
230494
230495
230496
230497
230498
230499
230500
230501
230502
230503
230504
230505
230506
230507
230508
230509
230510
230511
230512
230513
230514
230515
230516
230517
230518
230519
230520
230521
230522
230523
230524
230525
230526
230527
230528
230529
230530
230531
230532
230533
230534
230535
230536
230537
230538
230539
230541
230542
230544
230545
230546
230547
230548
230549
230550
230551
230552
230553
230554
230555
230556
230557
230558
230559
230560
230561
230562
230563
230564
230565
230566
230567
230568
230569
230570
230571
230572
230573
230574
230575
230576
230577
230578
230579
230580
230581
230582
230583
230584
230585
230586
230587
230588
230589
230590
230591
230592
230593
230594
230595
230596
230597
230598
230599
230600
230601
230602
230603
230604
230605
230606
230607
230608
230609
230610
230611
230612
230613
230614
230615
230616
230617
230618
230619
230620
230621
230622
230623
230624
230625
230626
230627
230628
230629
230630
230631
230632
230633
230634
230635
230636
230637
230638
230639
230640
230641
230642
230643
230644
230645
230646
230647
230648
230649
230650
230651
230652
230653
230654
230655
230656
230657
230658
230659
230660
230661
230662
230663
230664
230665
230667
230668
230669
230670
230671
230672
230673
230674
230675
230676
230677
230678
230679
230680
230681
230682
230683
230684
230685
230686
230687
230688
230689
230690
230691
230692
230693
230694
230695
230696
230697
230698
230699
230700
230701
230702
230703
230704
230705
230706
230707
230708
230709
230710
230711
230712
230713
230714
230715
230716
230717
230718
230719
230720
230721
230722
230723
230724
230725
230726
230727
230728
230729
230730
230731
230732
230733
230734
230735
230736
230737
230738
230739
230740
230741
230742
230743
230744
230745
230746
230747
230748
230749
230750
230751
230752
230753
230754
230755
230756
230757
230758
230759
230760
230761
230762
230763
230764
230765
230766
230767
230768
230769
230770
230771
230772
230773
230774
230775
230776
230777
230778
230779
230780
230781
230782
230783
230784
230785
230786
230787
230788
230789
230790
230791
230792
230793
230794
230795
230796
230797
230798
230799
230800
230801
230802
230803
230804
230805
230806
230807
230808
230809
230810
230811
230812
230813
230814
230815
230816
230817
230818
230819
230820
230821
230822
230823
230824
230825
230826
230827
230828
230829
230830
230831
230832
230833
230834
230835
230836
230837
230838
230839
230840
230841
230842
230843
230844
230845
230846
230847
230848
230849
230850
230851
230852
230853
230854
230855
230856
230857
230858
230859
230860
230861
230862
230863
230864
230865
230866
230867
230868
230869
230870
230871
230872
230873
230874
230875
230876
230877
230878
230879
230880
230881
230882
230883
230884
230885
230886
230887
230888
230889
230890
230891
230892
230893
230894
230895
230896
230898
230899
230900
230901
230902
230903
230904
230905
230906
230907
230908
230909
230910
230911
230912
230913
230914
230915
230916
230917
230918
230919
230920
230921
230922
230923
230924
230925
230926
230927
230928
230929
230930
230931
230932
230933
230934
230935
230936
230937
230938
230939
230940
230941
230942
230943
230944
230945
230946
230947
230948
230949
230950
230951
230952
230953
230954
230955
230956
230957
230958
230959
230960
230961
230962
230963
230964
230965
230966
230967
230968
230969
230970
230971
230972
230973
230974
230975
230976
230977
230978
230979
230980
230981
230982
230983
230984
230985
230986
230987
230988
230989
230990
230991
230992
230993
230994
230995
230996
230997
230998
230999
231000
231001
231002
231003
231004
231005
231006
231007
231008
231009
231010
231011
231012
231013
231014
231015
231016
231017
231018
231019
231020
231021
232384
232388
232389
232392
232393
232396
232402
232403
232404
232405
232406
232407
232408
232409
232410
232411
232412
232414
232416
232473
232474
232497
232532
232860
232861
232862
249211
249212
249213
249214
249215
249216
249217
249218
249219
249220
249221
249222
249223
249224
249225
249226
249227
249228
249229
249232
249233
249234
249235
249236
249237
249238
249239
249240
249241
273133
273134
273135
273136
273137
273138
273139
273140
273141
273142
273143
273144
273145
273146
273147
273148
273149
273150
273151
273152
277220
277221
277222
277223
277224
277225
277226
277227
277228
277229
277230
277231
277232
277233
277234
277235
277236
277237
277238
277239
277240
277241
277242
277243
277244
277245
277246
277247
277248
277249
277250
277251
277252
277253
277254
277255
277256
277257
277258
277259
277260
277261
277262
277263
277264
277265
277266
277267
277268
277269
277270
277271
277272
277273
277286
277287
277337
277338
277339
277340
277341
277342
277343
277345
277346
277347
277348
277349
277350
277351
277353
277354
277355
277356
277357
277358
277359
277360
277361
277362
277363
277364
277365
277366
277367
277368
277369
277370
277371
277373
277374
277375
277378
277379
277384
277388
277389
277390
277391
277392
277393
277394
277395
277396
277402
277403
277406
277407
277408
277409
277411
277412
277413
277414
277415
277416
277417
277418
277419
277420
277421
277422
277423
277424
277425
277426
277427
277428
277528
277529
277530
277531
277532
277533
277541
277542
277543
277544
277545
277546
277547
277548
291075
291076
291077
291078
291079
291080
291081
291082
291083
291084
291085
291086
291087
291088
291089
291090
293132
293133
293134
293135
293136
293137
293138
293139
293140
293141
293142
293143
293144
293145
293146
293147
293148
293149
293150
293151
293152
293153
293154
293155
293156
293157
293158
293159
293160
293161
293162
293163
293164
293165
293166
293167
293168
293169
293170
293171
293172
293173
293174
293175
293176
293177
293178
293179
293180
293181
293182
293183
293184
293185
293186
293187
293188
293189
293190
293191
293192
293193
293194
293195
293196
293197
293198
293199
293200
293201
293202
293203
293204
293205
293206
293207
293208
293209
293210
293211
293212
293213
293214
293215
293216
293217
293218
293219
293220
293221
293222
293223
293224
293225
293226
293227
293228
293229
293230
293231
293232
293233
293234
293235
293236
293237
293238
293239
293240
293241
293242
293243
293244
293245
293246
293247
293248
293249
293250
293251
293252
293253
293255
293256
293257
293258
293259
293260
293261
293262
293263
293264
293265
293266
293267
293268
293269
293270
293271
293272
293273
293274
293275
293276
293277
293278
293279
293280
293281
293282
293283
293284
293286
293288
293289
293290
293291
293292
293293
293294
293927
293928
293929
293930
293931
293932
293933
293934
293935
293936
293937
301291
301292
301293
301294
301295
301297
301298
301299
301300
301301
301302
301303
301304
301305
301306
301307
301308
301309
301310
301311
301312
301314
301315
301316
301317
301319
301321
301322
301323
301324
301325
301326
301327
301328
301329
301330
301331
301332
301336
301340
301341
301342
301344
301345
301346
301347
304971
304972
304974
304978
304980
304981
304982
304985
304986
304988
304989
304991
304992
304993
304994
304995
304996
304997
304998
304999
305000
305001
305002
305003
305004
305006
305007
305008
305009
305010
305011
305012
305013
305014
305015
305016
305017
305018
305019
305020
305021
305022
305023
305024
305025
305026
305027
305028
305029
305030
305031
305032
305033
305034
305037
305038
305040
305041
305043
305044
305045
305046
305047
305048
305049
305050
305051
305052
305053
305054
305055
305056
305058
305059
305060
305061
305062
305063
305064
305065
305066
305068
305069
305070
305071
305072
305073
305074
305075
305076
305077
305078
305079
305080
305081
305100
305101
305102
305103
305119
305120
305121
305122
305123
305124
305125
305126
305127
305128
305129
305130
305131
305132
305133
305134
305135
305136
305137
305138
305139
305140
305141
305142
305143
305144
305146
305147
305557
305558
305559
305560
305561
305562
305563
305564
305565
305566
305567
305568
305569
305570
305571
305572
305573
305574
317223
317224
317225
317226
317227
317228
317229
317230
317231
317232
317233
317234
317235
317236
317237
317238
317239
317240
317241
317242
317243
317245
317246
317247
317248
317249
317250
317251
317252
317253
317254
317255
317256
317257
317258
317259
317260
317261
317262
317263
317264
317265
317266
317267
317268
317269
317270
317271
317272
317273
317274
317275
317276
317277
317278
317279
317280
317281
317282
317283
317284
317285
317286
317287
317288
317289
317290
317291
317292
317293
317294
317295
317296
317297
317298
317299
317300
317301
317302
317303
317304
317305
317306
317307
317308
317309
317310
317311
317312
317313
317314
317315
317317
317318
317319
317320
317321
317322
317323
317324
317325
317326
317327
317328
317329
317330
317331
317332
317333
317334
317335
317336
317337
317338
317339
317340
317341
317342
317343
317344
317345
317346
317347
317348
317349
317350
317351
317352
317353
317354
317355
317356
317357
317358
317359
317360
317361
317362
317363
317364
317365
317366
317367
317368
317369
317370
317371
317372
317373
317374
317375
317376
317377
317378
317379
317380
317381
317382
317383
317384
323369
323370
323371
323372
323373
323374
323375
323376
323377
323378
323379
323380
323381
323382
323383
323384
323385
323386
323387
323388
323389
323390
323391
323392
323393
323394
323395
323396
323397
323398
332364
332365
332366
332367
332368
332369
332370
332371
332372
332373
332374
332375
332376
332377
332378
332379
332380
332381
332382
332383
332384
332385
332386
332387
332388
332389
332390
332391
332392
332393
332394
332395
332396
332397
332398
332399
332400
332401
332402
332403
332404
332405
332406
332407
332408
332409
332410
332411
332412
332413
332414
332415
332416
332417
332418
332419
332420
332421
332422
371768
371769
371770
371771
371772
371773
371774
371775
371776
371777
371778
371779
371780
371781
371782
371786
371787
371788
371789
371790
371793
371794
371795
371798
371799
371800
371801
371802
371803
371804
371805
371806
371807
371808
371809
371810
371811
371816
371817
371818
371819
371820
371821
371822
371823
371824
371826
371827
371828
371829
371830
371831
371832
371833
371834
371835
371840
371841
371842
371843
371844
371845
371846
371847
371848
371849
371850
371851
371852
371853
371854
371855
371856
371857
371858
371859
371860
371861
371862
371863
371864
371865
371866
371867
371868
371869
371870
371871
371872
371873
371874
371875
371876
371877
371878
371879
371880
371881
371882
371883
371884
371885
371886
371887
371888
371889
371890
371891
371892
371893
371894
371895
371896
371897
371898
371899
371900
371901
371902
371903
371904
371905
371906
371907
371908
371909
371910
371911
371912
371913
371914
371915
371916
371917
371918
371919
371920
371921
371923
371924
371925
371926
371927
371928
371929
371930
371931
371932
371933
371934
371935
371936
371937
371938
371939
371940
371941
371942
371943
371944
371945
371946
371947
371948
371949
371950
371951
371952
371953
371954
371955
371956
371957
371958
371959
371960
371961
371962
371963
371964
371965
371966
371967
371968
478976
478977
478978
478979
478980
478981
478982
478983
478984
478985
478986
478987
478988
478989
478990
478991
478992
478993
478994
478995
478996
478997
478998
478999
479000
479001
479002
479003
479004
479005
479006
479007
479008
479009
479010
479011
479012
479013
479014
479015
479016
548917
548918
548919
548920
548921
548922
548923
548924
548925
548926
548932
548933
548934
548935
548936
548937
548938
548939
548940
548941
548942
548943
548945
585025
585026
585027
585028
585029
585030
585031
585032
585033
585034
585035
585036
585037
585038
600904
600906
600907
600916
600917
600919
600920
600921
600922
600925
600926
600932
600933
600935
600941
600943
600944
600945
600946
600948
600950
600951
600952
600953
600955
600959
600960
600961
600963
600964
600965
600966
600967
600969
600970
600971
600972
600973
600974
600975
600976
600977
600978
600979
600980
600983
600984
600989
600990
600991
600992
600994
600995
600997
601408
601410
601411
601420
601421
601423
601424
601425
601426
601429
601430
601436
601437
601439
601445
601447
601448
601449
601450
601452
601454
601455
601456
601457
601459
601463
601464
601465
601467
601468
601469
601470
601471
601473
601474
601475
601476
601477
601478
601479
601480
601481
601482
601483
601484
601487
601488
601493
601494
601495
601496
601498
601499
601501
654033
654034
654035
654036
654037
654038
654039
654040
654041
654042
654044
654045
654047
654049
654050
654051
654053
654054
654056
654057
654058
654059
654060
654061
654062
654065
654066
661188
661189
661190
661191
661192
661193
661194
661195
661196
661197
661198
661199
661200
661201
661202
661203
661204
661205
661206
661207
661208
661209
661210
661211
661212
661213
661214
661215
661258
661259
661260
661261
661262
661263
661264
661265
661266
661267
661268
661269
661270
661271
661272
661273
661274
661275
661276
661277
661278
661279
661280
661281
661282
661283
661284
661285
661286
661287
661288
661289
661290
661291
661292
661293
661294
661295
661296
661297
661298
661299
661300
661301
661302
661303
661304
661305
661306
661307
666230
666231
666232
666233
666234
666235
666236
666237
666238
666239
666240
666241
666242
666243
666244
666245
666246
724522
724523
724524
724525
724526
724527
724528
724529
724530
730068
762523
762524
762525
762526
762527
762528
762529
762530
762531
762532
762533
762534
762535
762536
762537
762538
762539
762540
762541
762542
762543
762544
762545
762546
762547
762548
762549
762550
762551
762552
762553
762554
762555
762556
762557
762558
762559
762560
762561
762562
762563
762564
762565
762566
762567
762568
762569
762570
762571
762572
762573
762574
762575
762576
762577
762578
762579
762580
762581
762582
762583
762584
762585
762586
762587
762588
762589
762590
762591
762592
762593
762594
762595
762596
762597
762598
762599
762600
762601
762603
762605
762606
762607
762608
762609
762610
762611
762612
762613
762614
762615
762616
762617
762618
762619
762620
762621
762622
762623
762624
762625
762626
762627
762628
762629
762630
762631
762632
762633
762634
762635
762636
762637
762638
762639
762640
762641
762643
762644
762645
762646
762647
762648
762649
762650
762651
762652
762653
762654
762655
762656
762657
762658
762659
762660
762661
762662
762663
762664
762665
762666
762667
762668
762669
762670
762671
762672
762673
762674
762675
762676
762677
762678
762679
762680
762681
762682
762684
762685
762686
762687
762688
762689
762690
762691
762692
762693
762694
762695
762696
762697
762698
762699
762700
762701
762702
762703
762704
762705
762706
762707
762708
762709
762710
762711
762712
762713
762714
762715
762716
762717
762718
762719
762720
762721
762722
762723
762724
762725
762726
762727
762728
762729
762730
762731
762732
762733
762734
762735
762736
762737
762738
762739
762740
762741
762742
762743
762744
762745
762746
762747
762748
762749
762750
762751
762752
762753
762754
762755
762756
762757
762758
762759
762760
762761
762762
762763
762764
762765
762766
762767
762768
762769
762770
762771
762772
765306
765307
765309
765310
765311
765312
765313
765314
765315
765316
765317
765318
765320
765321
765322
765323
765324
765325
765326
765327
765328
765329
765330
765331
765332
765333
765334
765335
765336
765337
765338
765339
765340
765341
765342
765343
765344
765345
765346
765347
765348
765349
765350
765351
765352
765354
765355
765356
765357
765358
765359
765360
765361
785515
785516
785517
785519
785521
785522
785524
785529
785530
785531
785533
785534
785535
785536
785537
785538
785539
785540
785541
785549
785551
785552
785553
785554
785555
785556
785557
785573
785574
785575
785577
785578
785579
792807
792808
792809
792810
792811
792812
792813
792814
792815
792816
792817
792818
792819
792820
792821
792822
792823
792824
792825
792826
792827
792828
792829
792830
792831
792832
792833
792834
792835
792836
792837
792838
792839
792840
792841
792842
792843
792844
792845
792846
792847
792848
792849
792850
792851
792852
792853
792854
792855
792856
792857
792858
792859
792860
792861
792862
792863
792864
792865
792866
792867
792868
792869
792870
792871
792872
792873
792874
792875
792876
792877
792878
792879
792880
792881
792882
792883
792884
792885
792886
792887
792888
792889
792890
792891
792892
792893
792894
792895
792896
792897
792898
792899
792900
792901
792902
792903
792904
792905
792906
792907
792908
792909
792910
792911
792912
792913
792914
792915
792916
792917
792918
792919
792920
792921
792922
792923
792924
792925
792926
792927
792928
792929
792930
792931
792932
792933
792934
792935
792936
792937
792938
792939
792940
792941
792942
792943
792944
792945
792946
792947
792948
792949
792950
792951
792952
792953
792955
792957
792958
792959
827586
827587
827588
827590
827591
827592
827613
827615
827620
827621
827622
827623
827624
827625
827626
827627
827628
827629
827630
827631
827632
827633
827634
827635
827636
827637
827638
827639
827656
827657
827659
827660
827661
827662
827663
827664
827665
827671
827676
827677
827682
827685
827702
827708
827709
827717
827718
827719
827720
827722
827723
827724
827725
827726
827727
827728
827729
827730
827731
827732
827733
827734
827735
827736
827737
827738
827739
827740
827741
827742
827743
827744
827745
827746
827747
827748
827749
827750
827751
827804
827805
827898
827907
827908
827909
827910
827911
827912
827916
827917
827926
827932
827939
827945
827946
827948
827949
827950
827951
827953
827954
827959
827962
827963
831899
831900
831901
831902
831903
869700
869701
869702
869703
869704
869705
869706
869707
869708
869709
869710
869711
869712
869713
869714
869715
869716
869717
869718
869719
869720
869721
869722
869723
869725
869726
869727
869728
869729
869730
869731
869732
869733
869734
869736
869737
869741
869742
869743
869744
869746
869747
869748
869749
869750
869757
869758
869760
869762
869766
869767
869768
869769
869771
869774
869775
869776
869778
869780
869781
869782
869783
869784
869785
869786
869787
869788
869789
869790
869791
869793
869794
869795
869796
869797
869798
869799
869800
869801
869802
869803
869804
869805
869806
869807
869808
869809
869810
869811
869812
869813
869814
869815
869816
869817
869818
869819
869820
869821
869822
869823
869824
869825
869826
869827
869828
869829
869830
869831
869834
869835
869836
869839
869840
869841
869842
869844
869845
869847
869851
869852
869853
869855
869856
869857
869858
869859
869860
869861
869862
869863
869864
869865
869866
869867
869868
869869
869870
869871
869872
869873
869874
869875
869876
869877
869878
869879
869880
869881
869882
869883
869884
869885
869886
869887
869888
869889
869890
869891
869892
869893
869896
869897
869907
869908
869909
869911
869914
869915
869916
869918
869919
869920
869922
869923
869926
869927
869928
869929
869930
869931
869932
869933
869934
869935
869936
869937
869938
869940
869941
869942
869943
869944
869945
869946
869947
869948
869949
869950
869951
869952
869953
869954
869955
869956
869957
869958
869959
869960
869961
869962
869963
869964
869965
869966
869967
869968
869969
869970
869971
869972
869973
869974
869975
869976
869977
872680
872681
872682
872683
872684
872685
872686
872687
872688
872689
872690
872691
872692
872693
872694
872695
872696
872697
872698
872699
872700
872701
872702
872703
872704
872705
872706
872707
872708
872709
872710
872711
872712
872713
872714
872715
872716
872717
872718
872719
872720
872721
872722
872723
872724
872725
872726
872727
872728
872729
872730
872731
872732
872733
872734
872735
872736
872737
872738
872739
872740
872741
872742
872743
872744
872745
872746
872747
872748
872749
872750
872751
872752
872753
872754
872755
872756
872757
872758
872759
872760
872761
872762
872763
872764
872765
872766
872767
872768
872769
872770
872771
872772
872773
872774
872775
872776
872777
872778
872779
872780
872781
872782
872783
872784
872785
872786
872787
872788
872789
872790
872791
872792
872793
872794
872795
872796
872797
872798
872799
872800
872801
872802
872803
872804
872805
872806
872807
872808
872809
872810
872811
872812
872813
872814
872815
872816
872817
872818
872819
872820
872821
872822
872823
872824
872825
872826
872827
872828
872829
872830
872831
872832
872833
872834
872835
872836
872837
872838
872839
872840
872841
872842
872843
872844
872845
872846
872847
872848
872849
872850
872851
872852
872853
872854
872855
872856
872857
872858
872859
872860
872861
872862
872863
872864
872865
872866
872867
872868
872869
872870
872871
872872
872873
872874
872875
872876
872877
872878
872891
872892
872893
872894
872895
872896
872897
872898
872899
872900
872901
872902
872903
872904
872905
872906
872907
872908
872909
872910
872911
872912
872913
872914
872915
872916
872917
872918
872919
872920
872921
872922
872923
872924
872925
872926
872927
872928
872929
872930
872931
872932
872933
872934
872935
872936
872937
872938
872939
872940
872941
872942
872943
872944
872945
872946
872947
872948
872949
872950
872951
872952
872953
872954
872955
872956
872957
872958
872959
872960
872961
872962
872963
872965
872966
872967
872968
872969
872970
872971
872972
872973
872974
872975
872976
872977
872978
872979
872980
872981
872982
872983
872984
872985
872986
872987
872988
872989
872990
872991
872992
872993
872994
872995
872996
872997
872998
872999
873000
873001
873002
873003
873004
873005
873006
873007
873008
873009
873010
873011
873012
873013
873014
873015
873016
873017
873018
873019
873020
873021
873022
873023
873024
873025
873026
873027
873028
873029
873030
873031
873032
873033
873034
873035
873036
873037
873038
873039
873040
873041
873042
873043
873044
873045
873046
873047
873048
873049
873050
873051
873052
873053
873054
873055
873056
873057
873058
873059
873060
873061
873062
873063
873064
873065
873066
873067
873068
873069
873070
873071
873072
873073
873074
873075
873076
873077
873078
873079
873080
873081
873082
873083
873084
873085
873086
873087
873088
931212
931213
931214
931215
931216
931217
931218
931219
931220
931221
945818
945819
945820
945821
945822
945823
945824
945825
945826
945827
945828
945829
945830
945831
945832
945833
945834
945835
945836
945837
945838
945839
945840
945841
945842
945843
945844
945845
945846
945847
945848
945849
945850
945851
945852
945853
945854
945855
945856
945857
945859
945860
945861
945862
945863
966930
966931
966933
966934
966939
966943
1023634
1023635
1023636
1023637
1023638
1023639
1023640
1023641
1023642
1023643
1023644
1023645
1023646
1023647
1023648
1023649
1023650
1023651
1023652
1023653
1023654
1023655
1023656
1023657
1023658
1023659
1023660
1023661
1023662
1023663
1023664
1023665
1023666
1023667
1023668
1023669
1023670
1023671
1023672
1023673
1023674
1023675
1023676
1023677
1023678
1023679
1023680
1023681
1023682
1023683
1023684
1023685
1023686
1023687
1023688
1023689
1023690
1023691
1023692
1023693
1023694
1023695
1023696
1023697
1023698
1023699
1023700
1023701
1023702
1023703
1023704
1023705
1023706
1023707
1023708
1023709
1023710
1023711
1023712
1023713
1023714
1023715
1023716
1023717
1023718
1023719
1023720
1023721
1023722
1023723
1023724
1023725
1023726
1023727
1023728
1023729
1023730
1023732
1023733
1023734
1023735
1023736
1023737
1023738
1023739
1023740
1023741
1023742
1023743
1023744
1023745
1023746
1023747
1023748
1023751
1023752
1023753
1023754
1023755
1023757
1023758
1023759
1023760
1023761
1023762
1023763
1023764
1023765
1023766
1023767
1023768
1023769
1023770
1023771
1023772
1023773
1023774
1023775
1023776
1023777
1023778
1023779
1023780
1023781
1023782
1023783
1023784
1023785
1023786
1023788
1023789
1023790
1023791
1023792
1023793
1023794
1023795
1023796
1023797
1023798
1023799
1023800
1023801
1023802
1023803
1023804
1023805
1023806
1023807
1023808
1023809
1023810
1023811
1023812
1023813
1023814
1023815
1023816
1023817
1023818
1023819
1023820
1023821
1023822
1023823
1023824
1023825
1023826
1023827
1023828
1023829
1023830
1023831
1023832
1023833
1023834
1023835
1023836
1023837
1023838
1023839
1023840
1023841
1023842
1023843
1023844
1023845
1023846
1023847
1023848
1023849
1023850
1023851
1023852
1023853
1023854
1023855
1023856
1023857
1023858
1023859
1023860
1023861
1023862
1023863
1023864
1023865
1023866
1023867
1023868
1023869
1023872
1023873
1023875
1023880
1023881
1023882
1023883
1023884
1023885
1023886
1023887
1023888
1023889
1023890
1023891
1023892
1023893
1023894
1023896
1023897
1023898
1023899
1023900
1023901
1023902
1023903
1023908
1023909
1023910
1023911
1023912
1023913
1023914
1023915
1023916
1023917
1023918
1023919
1023920
1023921
1023922
1023923
1023924
1023925
1023926
1023929
1023931
1023933
1023935
1023936
1023940
1023943
1023945
1023947
1023948
1023949
1023950
1023951
1023952
1023953
1023954
1023955
1023957
1023958
1023959
1023960
1023961
1023962
1023963
1036491
1036492
1036493
1036494
1036495
1036496
1036557
1036558
1036559
1036560
1036561
1036562
1036563
1036564
1036565
1036566
1036567
1036568
1036569
1036570
1036571
1036572
1036573
1036574
1036575
1036576
1036577
1036578
1036579
1036580
1036581
1036582
1036583
1036584
1036585
1036586
1036587
1036588
1036589
1036590
1036591
1036592
1036593
1036594
1036595
1036596
1036597
1036598
1036599
1036600
1036601
1036602
1036603
1036604
1036605
1036606
1036607
1036608
1036609
1036620
1036621
1036622
1036623
1036624
1036625
1036632
1036633
1036634
1036635
1036636
1036637
1036638
1036639
1036640
1036641
1036642
1036643
1036644
1036645
1135879
1135880
1135881
1135882
1135883
1135884
1135885
1135886
1135891
1146526
1146527
1146528
1146529
1146530
1146531
1146588
1146589
1146590
1146591
1146592
1146593
1146594
1146595
1146596
1146597
1146598
1146599
1146600
1146601
1146602
1146603
1146604
1146605
1146606
1146607
1146608
1146609
1146610
1146611
1146612
1146613
1146614
1146615
1146616
1146617
1146618
1146619
1146620
1146621
1146622
1146623
1146624
1146625
1146626
1146627
1146628
1146629
1146630
1146631
1146632
1146633
1146634
1146635
1146636
1146637
1146639
1146640
1146641
1146642
1146643
1146644
1146645
1146646
1146647
1146648
1146649
1146650
1146651
1146652
1146653
1146654
1146655
1146656
1146657
1146658
1146659
1146660
1146661
1146662
1146663
1146664
1146666
1146667
1170772
1170774
1225466
1225467
1225468
1225469
1225470
1225471
1225472
1225473
1225474
1225475
1225476
1225477
1225478
1225479
1225480
1225481
1225482
1225483
1225484
1225485
1225486
1225487
1225488
1225489
1225490
1225491
1225492
1225493
1225494
1225495
1225496
1225497
1225498
1225499
1225500
1225501
1225502
1225503
1227898
1227899
1227900
1227901
1227902
1227903
1227904
1227905
1227906
1233095
1233096
1233097
1233098
1233099
1233100
1233101
1233102
1233103
1233104
1233105
1233106
1233107
1233108
1233109
1233110
1233111
1233112
1233113
1233114
1233115
1233116
1233117
1233118
1233119
1233120
1233121
1233122
1233123
1233124
1233125
1233126
1233127
1233128
1233129
1233130
1233131
1233132
1233133
1233134
1233135
1233136
1233137
1233138
1233139
1233140
1233141
1233142
1233143
1233144
1233145
1233146
1233147
1233148
1233149
1233150
1233151
1233152
1233153
1233154
1233155
1233156
1233157
1233158
1233159
1233163
1233169
1233170
1233171
1233172
1233173
1233174
1233175
1233176
1233177
1233178
1233179
1233180
1233181
1233182
1233183
1233184
1233185
1233186
1233187
1233188
1233189
1233190
1233191
1233192
1233193
1233194
1233195
1233196
1233197
1233198
1233199
1233200
1233201
1233202
1233203
1233204
1233205
1233206
1233207
1233208
1233209
1233210
1233211
1233212
1233213
1233214
1233215
1233216
1233217
1233218
1233219
1233220
1233221
1233222
1233223
1233224
1233225
1233226
1233227
1233228
1233229
1233230
1233231
1233232
1233233
1233234
1233235
1233236
1233237
1233238
1233239
1233240
1233241
1233242
1233243
1233244
1233245
1233246
1233247
1233248
1233249
1233250
1233251
1233252
1233253
1233254
1233255
1233256
1233257
1233258
1233259
1233260
1233261
1233262
1233263
1233264
1233265
1233266
1233267
1233268
1233269
1233270
1233271
1233272
1233273
1233274
1233275
1233276
1233277
1233278
1233279
1233280
1233281
1233282
1233283
1233284
1233285
1233286
1233287
1233288
1233289
1233290
1233291
1233292
1233293
1233294
1233295
1233296
1233297
1233298
1233299
1233300
1233301
1233302
1233303
1233304
1233305
1233306
1233307
1233308
1233309
1286871
1286872
1286873
1286874
1286875
1286876
1286877
1286878
1286879
1286880
1286881
1286882
1286883
1286884
1286885
1286886
1286887
1286888
1286889
1286890
1286891
1286892
1286893
1286894
1286895
1286896
1286897
1286898
1286899
1286900
1286901
1286902
1286903
1286904
1286905
1286906
1286907
1286908
1286909
1286910
1286911
1286912
1286913
1286914
1286915
1286916
1286917
1286918
1286919
1286920
1286921
1286923
1286925
1286927
1286928
1286929
1286930
1296706
1296707
1296708
1296709
1296710
1296711
1296712
1296713
1296714
1296715
1314405
1314406
1314407
1314408
1314409
1314410
1314411
1314412
1314413
1314414
1314415
1314416
1314417
1314418
1314419
1314420
1314421
1314422
1314423
1314424
1314425
1314426
1314427
1314428
1314429
1314430
1314431
1314432
1314433
1314434
1314435
1314436
1314437
1314438
1314439
1314440
1314441
1314442
1314443
1314444
1314445
1314446
1314447
1314448
1314449
1314450
1314451
1314452
1314453
1314454
1314455
1314456
1314457
1314458
1314459
1314460
1314461
1314462
1314463
1314464
1314465
1314466
1314467
1314468
1314469
1314470
1314471
1314472
1314473
1314474
1314475
1314476
1314477
1314478
1314479
1314481
1314482
1314483
1314484
1314485
1314486
1314487
1314488
1314489
1314490
1314491
1314492
1314493
1314494
1314495
1314496
1314497
1314498
1314499
1314500
1314501
1314502
1314503
1314504
1314505
1314506
1314507
1314508
1314509
1314510
1314511
1314512
1314513
1314514
1314515
1314516
1314517
1314518
1314519
1314520
1314521
1314522
1314523
1314524
1314525
1314526
1314527
1314528
1314529
1314530
1314531
1314532
1314533
1314534
1314535
1314536
1314537
1314538
1314539
1314540
1314541
1314542
1314543
1314544
1314545
1314546
1314547
1314548
1314549
1314550
1314551
1314552
1314553
1314554
1314555
1314556
1314557
1314558
1314559
1314560
1314561
1314562
1314563
1314564
1314565
1314566
1314567
1314568
1314569
1314570
1314571
1314572
1314573
1314574
1314575
1314576
1314577
1314578
1314579
1314580
1314581
1314582
1314583
1314584
1314585
1314586
1314587
1314588
1314589
1314590
1314591
1314592
1314593
1314594
1314595
1314596
1314597
1314598
1314599
1314600
1314601
1314602
1314603
1314604
1314605
1314606
1314607
1314608
1314609
1314610
1314611
1314612
1314613
1314614
1314615
1314616
1314617
1314618
1314619
1314620
1314621
1314622
1314623
1314624
1314625
1314626
1314627
1314628
1314629
1314630
1314631
1314632
1314633
1314634
1314635
1314636
1314637
1314638
1314639
1314640
1314641
1314642
1314643
1314644
1314645
1314646
1314647
1314648
1314649
1314650
1314651
1314652
1314653
1314654
1314655
1314656
1314657
1314658
1314659
1314660
1314661
1314662
1314663
1314664
1314665
1314666
1314667
1314668
1314669
1314670
1314671
1314672
1314673
1314674
1314675
1314676
1314677
1314678
1314679
1314680
1314681
1314682
1314683
1314684
1314685
1314686
1314687
1314688
1314689
1314690
1314691
1314692
1314693
1314694
1314695
1314696
1314697
1314698
1314699
1314700
1314701
1314702
1314703
1314704
1314705
1314706
1314707
1314708
1314709
1314710
1314711
1314712
1314713
1314714
1314715
1314716
1314717
1314718
1314719
1314720
1314721
1314722
1314723
1314724
1314725
1314726
1314727
1314728
1314729
1314730
1314731
1314732
1314733
1314734
1314735
1314736
1314737
1314738
1314739
1314740
1314741
1314742
1314743
1314744
1314745
1314746
1314747
1314748
1314749
1314750
1314751
1314752
1314753
1314754
1314755
1314756
1314757
1314758
1314759
1314760
1314761
1314762
1314763
1314764
1314765
1314766
1314767
1314768
1314769
1314770
1314771
1314772
1314773
1314774
1314775
1314776
1314777
1314778
1314779
1314780
1314781
1314782
1314783
1314784
1314785
1314786
1314787
1314788
1314789
1314790
1314791
1314792
1314793
1314794
1314795
1314796
1314797
1314798
1314799
1314800
1314801
1314802
1314803
1314804
1314805
1314806
1314807
1314808
1314809
1314810
1314811
1314812
1314813
1314814
1314815
1314816
1314817
1314818
1314819
1314820
1314821
1314822
1314823
1314824
1314825
1314826
1314827
1314828
1314829
1314830
1314831
1314832
1314833
1314834
1314835
1314836
1314837
1314838
1314839
1314840
1314841
1314842
1314843
1314844
1314845
1314846
1314847
1314848
1314849
1314850
1314851
1314852
1314853
1314854
1314855
1314856
1314857
1314858
1314859
1314860
1314861
1314862
1314863
1314864
1314865
1314866
1314867
1314868
1314869
1314870
1314871
1314872
1314873
1314874
1314875
1314876
1314877
1314878
1314879
1314880
1314881
1314882
1314883
1314884
1314885
1314886
1314887
1314888
1314889
1314890
1314891
1314892
1314893
1314894
1314895
1314896
1314897
1314898
1314899
1314900
1314901
1314902
1314903
1314904
1314905
1314906
1314907
1314908
1314909
1314910
1314911
1314912
1314913
1314914
1314915
1314916
1314917
1314918
1314919
1314920
1314921
1314922
1314923
1314924
1314925
1314926
1314927
1314928
1314929
1314930
1314931
1314932
1314933
1314934
1314935
1314936
1314937
1314938
1314939
1314940
1314941
1314942
1314943
1314944
1314945
1314946
1314947
1314948
1314949
1314950
1314951
1314952
1314953
1314954
1314955
1314956
1314957
1314958
1314959
1314960
1314961
1314962
1314963
1314964
1314965
1314966
1314967
1314968
1314969
1314970
1314971
1314972
1314973
1314974
1314975
1314976
1314977
1314978
1314979
1314980
1314981
1314982
1314983
1314984
1314985
1314986
1314987
1314988
1314989
1314990
1314991
1314992
1314993
1314994
1314995
1314996
1314997
1314998
1314999
1315000
1315001
1315002
1315003
1315004
1315005
1315006
1315007
1315008
1315009
1315010
1315011
1315012
1315013
1315014
1315015
1315016
1315017
1315018
1315019
1315020
1315021
1315022
1315023
1315024
1315025
1315026
1315027
1315028
1315029
1315030
1315031
1315032
1315033
1315034
1315035
1315036
1315038
1315039
1315040
1315041
1315042
1315044
1315045
1315046
1315047
1315048
1315049
1315050
1315051
1315052
1315053
1315054
1315055
1315056
1315057
1315058
1315059
1315060
1315061
1315062
1315063
1315064
1315065
1315066
1315067
1315068
1315069
1315070
1315071
1315072
1315073
1315074
1315075
1315076
1315077
1315078
1315079
1315080
1315081
1315082
1315083
1315084
1315085
1315086
1315087
1315088
1315089
1315090
1315091
1315092
1315093
1315094
1315095
1315096
1315097
1315098
1315099
1315100
1315101
1315102
1315103
1315104
1315105
1315106
1315107
1315108
1315109
1315110
1315111
1315112
1315113
1315114
1315115
1315116
1315117
1315118
1315119
1315120
1315121
1315122
1315123
1315124
1315125
1315126
1315127
1315128
1315129
1315130
1315131
1315132
1315133
1315134
1315135
1315136
1315137
1315138
1315139
1315140
1315141
1431764
1431765
1431766
1431767
1431768
1431769
1431770
1431771
1431772
1431773
1431774
1431775
1431776
1431777
1431778
1486593
1486594
1486595
1486596
1486597
1486598
1486599
1486600
1486601
1486602
1486603
1486604
1486605
1486606
1486607
1486608
1486609
1486610
1486611
1486612
1486613
1486614
1486617
1486618
1486619
1486620
1486621
1486622
1486623
1486624
1486625
1486626
1486627
1486628
1486629
1486630
1486631
1495006
1495007
1495008
1495009
1495010
1495011
1495012
1495014
1495015
1495016
1495017
1495018
1547504
1547505
1547506
1547507
1547508
1547509
1547510
1547511
1547512
1547513
1547515
1547516
1547517
1547518
1547519
1547520
1547521
1547522
1547523
1547524
1547525
1547526
1547527
1547528
1547529
1547530
1547531
1547532
1547533
1547534
1547535
1547536
1547537
1547538
1547539
1547540
1547541
1547542
1547543
1547544
1547545
1547546
1547547
1547548
1547549
1547551
1547552
1547553
1547554
1547555
1547556
1547557
1547558
1547559
1547560
1547561
1547563
1547564
1547565
1547566
1547567
1547568
1547569
1547570
1547571
1547572
1547573
1547574
1547575
1547576
1547577
1547578
1547579
1547580
1547581
1547582
1547583
1547584
1547585
1547586
1547587
1547588
1547589
1547590
1547591
1547592
1547593
1547594
1547595
1547596
1547597
1547598
1547599
1547600
1547601
1547602
1547603
1547604
1547605
1547606
1547607
1547609
1547610
1547614
1547615
1547616
1547617
1547618
1547619
1547620
1547621
1547622
1547623
1547624
1547625
1547627
1547628
1547629
1547630
1547631
1547632
1550475
1550476
1550477
1550478
1550479
1550480
1550481
1550482
1550483
1550485
1550486
1550488
1550489
1550490
1550491
1550492
1550493
1550494
1550495
1550496
1550497
1550498
1550499
1550500
1550501
1550502
1550503
1550504
1550505
1550506
1550507
1550508
1550509
1550510
1550511
1550512
1550513
1550514
1550515
1550516
1550517
1550518
1550519
1550520
1550521
1550522
1550523
1550525
1550526
1550527
1550528
1550530
1550531
1550532
1550533
1550534
1550535
1550536
1550537
1550538
1550539
1550540
1550541
1550542
1550543
1550544
1550545
1550546
1550547
1550548
1550549
1550550
1550551
1550552
1550553
1550554
1550555
1550556
1550557
1550558
1550559
1550560
1550561
1550562
1550563
1550564
1550565
1550566
1550567
1550568
1550569
1550570
1550571
1550572
1550573
1550574
1550575
1550576
1550577
1550578
1550579
1550580
1550581
1550582
1550583
1550584
1550585
1550586
1550587
1550588
1550589
1550591
1550592
1550593
1550594
1550595
1550596
1550597
1550598
1550599
1550600
1550601
1550602
1550603
1550604
1550605
1550606
1550607
1550608
1550609
1550610
1550611
1550612
1550613
1550614
1550615
1550616
1550617
1550618
1550619
1550620
1550621
1550622
1550623
1550624
1550625
1550626
1550627
1550628
1550629
1550630
1550631
1550632
1550633
1550634
1550635
1550636
1550637
1550638
1550639
1550640
1550641
1550642
1550643
1550644
1550645
1550646
1550647
1550648
1550649
1550650
1550651
1550652
1550653
1550654
1550655
1550656
1550657
1550658
1550659
1550660
1550661
1550662
1550663
1550664
1550665
1550666
1550667
1550668
1550669
1550675
1550676
1550677
1550678
1550679
1550680
1550681
1550682
1550684
1550685
1550686
1550688
1550689
1550690
1550691
1550692
1550693
1550694
1550695
1550696
1550697
1550698
1550699
1550700
1550701
1550702
1550703
1550704
1550705
1550706
1550707
1550708
1550709
1550710
1550711
1550712
1550714
1550715
1550716
1550717
1550718
1550719
1550720
1550721
1550722
1550723
1550724
1550725
1550726
1550727
1550728
1550729
1550730
1550731
1550732
1550733
1550734
1550735
1550736
1550737
1550738
1550739
1550740
1550741
1550742
1550743
1550744
1550745
1550746
1550747
1550748
1550749
1550750
1550751
1550752
1550754
1550758
1550759
1550760
1550761
1550762
1550763
1550764
1550765
1550766
1550767
1550768
1550769
1550770
1550771
1550772
1550773
1550774
1550775
1550776
1553309
1652549
1652550
1652551
1652552
1652553
1652554
1652555
1652556
1652557
1652558
1652559
1652560
1652561
1652562
1652563
1652564
1652565
1652566
1652567
1652568
1652569
1652570
1652571
1652572
1652573
1652574
1652575
1652576
1652577
1652579
1652580
1652581
1652582
1652583
1652584
1652585
1652586
1652587
1652588
1652589
1652590
1652591
1652592
1652593
1652594
1652595
1652596
1652597
1652598
1652599
1652600
1652601
1652602
1660911
1660914
1660921
1660923
1660924
1660925
1660926
1660928
1660929
1660930
1660932
1660933
1660934
1660935
1660936
1660937
1660938
1660939
1660940
1660941
1660942
1660943
1660944
1660945
1660946
1660947
1660948
1664611
1664612
1664613
1664614
1664615
1664616
1664617
1664618
1664619
1664620
1664621
1664622
1664623
1664624
1664625
1664626
1664627
1664628
1664629
1664630
1664631
1664632
1664633
1664634
1664635
1664636
1664637
1664638
1664639
1664640
1664641
1664642
1664643
1664644
1664645
1664646
1664647
1664648
1664649
1664650
1664651
1664652
1664653
1664654
1664655
1664656
1664657
1664658
1664659
1664660
1664661
1664662
1664663
1664664
1664665
1664666
1664667
1664668
1664669
1664670
1664671
1664672
1664673
1664674
1664675
1664676
1664677
1664678
1664679
1664680
1664681
1664682
1664683
1664684
1664685
1664686
1664687
1664688
1664689
1664690
1664691
1664692
1664693
1664694
1664695
1664696
1664697
1664698
1664699
1664700
1664701
1664702
1664703
1664704
1664705
1664706
1664707
1664708
1664709
1664710
1664711
1664712
1664713
1664714
1664715
1664716
1664717
1664718
1664719
1664720
1664721
1664722
1664723
1664724
1664725
1664726
1664727
1664728
1664729
1664730
1664731
1664732
1664733
1664734
1664735
1664736
1664737
1664738
1664739
1664740
1664741
1664742
1664743
1664744
1664745
1664746
1664747
1664748
1664749
1664750
1664751
1664752
1664753
1664754
1664755
1664756
1664757
1664758
1664759
1664760
1664761
1664762
1664763
1664764
1664765
1664766
1664767
1664768
1664769
1664770
1664771
1664772
1664773
1664774
1664775
1664776
1664777
1664778
1664779
1664780
1664781
1664782
1664783
1664784
1664785
1664786
1664787
1664788
1664789
1664790
1664791
1664796
1664797
1664798
1664799
1664800
1664801
1664802
1664803
1664804
1664805
1664806
1664807
1664808
1664809
1664810
1664811
1664812
1664813
1664815
1664816
1664817
1664818
1664819
1664820
1664821
1664822
1664823
1664824
1674056
1674057
1674058
1674059
1674060
1674061
1674062
1674063
1674064
1674065
1674066
1674067
1674068
1674069
1674070
1674071
1674072
1674073
1674074
1674075
1674076
1674077
1674078
1674079
1674080
1674081
1674082
1674083
1674084
1674085
1674086
1674087
1674088
1674089
1674090
1674091
1674092
1674093
1674094
1674095
1674096
1674097
1674098
1674099
1674100
1674101
1674102
1674103
1674104
1674105
1674106
1674107
1674108
1674109
1674110
1674111
1674112
1674113
1674114
1674115
1674116
1674117
1674118
1674119
1674120
1674121
1674122
1674123
1674124
1674125
1674126
1674127
1674128
1674129
1674130
1674131
1674132
1674133
1674134
1674135
1674136
1674137
1674138
1674139
1674140
1674141
1674142
1674143
1674144
1674145
1674146
1674147
1674148
1674149
1674150
1674151
1674152
1674153
1674154
1674155
1674156
1674157
1674158
1674159
1674160
1674161
1674162
1674163
1674164
1674165
1674166
1674167
1674168
1674169
1674170
1674171
1674172
1674173
1674174
1674175
1674176
1674177
1674178
1674179
1674180
1674181
1674182
1674183
1674184
1674185
1674186
1674187
1674188
1674189
1674190
1674191
1674192
1674193
1674194
1674195
1674196
1674197
1674198
1674199
1674200
1674201
1674202
1674203
1674204
1674205
1674206
1674207
1674208
1674209
1674210
1674211
1674212
1674213
1674214
1674215
1674216
1674217
1674218
1674219
1674220
1674221
1674222
1674223
1674224
1674225
1674226
1674227
1674228
1674229
1674230
1674231
1674232
1674233
1674234
1674235
1674236
1674237
1674238
1674239
1674240
1674241
1674242
1674243
1674244
1674245
1674246
1674247
1674248
1674249
1674250
1674251
1674252
1674253
1674254
1674255
1674256
1674257
1674258
1674259
1674260
1674261
1674262
1674263
1674264
1674265
1674266
1674267
1674268
1674269
1674270
1674271
1674272
1674273
1674274
1674275
1674276
1674277
1674278
1674279
1674280
1674281
1674282
1674283
1674284
1674285
1674286
1674287
1674288
1674289
1674290
1674291
1674292
1674293
1674294
1674295
1674296
1674297
1674298
1674299
1674300
1674301
1674302
1674303
1674304
1674305
1674306
1674307
1674308
1674309
1763755
1763756
1763757
1763758
1763759
1763760
1763761
1763762
1763763
1763764
1763765
1763766
1763767
1763768
1763769
1763770
1763771
1763772
1763773
1763774
1763775
1763776
1763777
1763778
1763779
1764470
1764471
1764472
1764473
1764474
1764475
1764476
1764478
1764479
1764480
1764481
1764482
1764483
1764484
1764485
1764486
1764487
1764488
1764489
1764490
1764491
1764492
1764493
1764495
1764496
1764497
1764498
1764499
1764500
1764501
1764502
1764503
1764504
1764505
1764506
1764507
1764508
1764509
1764510
1764511
1764512
1764513
1764514
1764515
1764516
1764517
1764518
1764519
1764521
1764522
1764523
1764524
1764525
1764526
1764527
1764528
1764529
1764530
1764531
1764532
1764533
1764534
1764535
1764536
1764537
1764538
1764539
1764540
1764541
1764542
1764543
1764544
1764545
1764546
1764547
1764548
1764549
1764550
1764551
1764552
1764553
1764554
1764555
1764556
1764557
1764558
1764559
1764561
1764563
1764564
1764565
1764566
1764567
1764568
1764570
1764572
1764574
1764576
1764577
1764580
1764581
1764583
1764584
1764585
1764586
1764587
1805549
1805550
1805551
1805552
1805553
1805554
1805555
1805556
1805557
1805558
1805559
1805560
1805561
1805562
1805563
1805564
1805565
1805566
1805567
1805568
1805569
1805570
1805571
1805572
1805573
1805574
1805575
1805576
1805577
1805578
1805579
1805580
1805581
1805582
1805583
1805584
1805585
1805586
1805587
1805588
1805589
1805590
1805591
1805592
1805593
1805594
1805595
1805596
1805597
1805598
1805599
1805600
1805601
1811590
1811593
1811594
1811595
1811596
1811597
1811598
1811599
1811600
1811601
1811602
1811603
1811604
1811605
1811606
1811607
1811608
1811609
1811610
1811611
1811612
1811613
1811614
1811615
1811616
1811617
1811618
1811619
1811620
1811621
1811623
1811624
1811625
1811626
1811627
1811628
1811629
1811630
1811631
1811632
1811633
1811634
1811635
1811636
1811637
1811638
1811639
1811640
1811641
1811642
1811643
1811644
1811645
1811646
1811647
1811648
1811649
1811650
1811651
1811652
1811653
1811654
1811655
1811656
1811657
1811658
1811659
1811660
1811661
1811662
1811663
1811664
1811665
1811666
1811667
1811668
1811669
1811670
1811671
1811672
1811673
1811674
1811676
1811677
1811678
1811679
1811680
1811681
1811682
1811683
1811684
1811685
1811686
1811687
1811688
1811689
1811690
1811691
1811692
1811693
1811694
1811695
1811696
1811697
1811698
1811699
1811700
1811701
1811702
1811703
1811704
1811705
1811706
1811707
1811708
1811709
1811710
1811711
1811712
1811713
1811714
1811715
1811716
1811717
1811718
1811719
1811720
1811721
1811722
1811723
1811724
1811725
1811726
1811727
1811728
1811729
1811730
1811731
1811732
1811733
1811734
1811735
1811736
1811737
1811738
1811739
1811740
1811741
1811742
1811743
1811744
1811745
1811746
1811747
1811748
1811749
1811750
1811751
1811752
1811753
1811754
1811755
1811756
1811757
1811758
1811759
1811761
1811762
1811763
1811764
1811767
1811769
1811770
1811771
1811772
1811773
1811774
1811775
1811776
1811777
1811778
1898649
1898650
1898651
1898652
1898653
1898654
1898655
1898656
1898657
1898658
1898659
1898660
1898661
1898662
1898663
1898664
1898665
1898666
1898667
1898668
1898669
1898670
1898671
1898672
1898673
1898674
1898675
1898676
1898677
1898678
1898679
1898680
1898681
1898682
1898683
1898684
1898685
1898686
1898687
1898688
1898689
1898690
1898691
1898692
1898693
1898694
1898695
1898696
1898697
1898698
1898699
1898700
1898701
1898702
1898703
1898704
1898705
1898706
1898707
1898708
1898709
1898710
1898711
1898712
1898713
1898714
1898715
1898716
1898717
1898718
1898719
1898720
1898721
1898722
1898723
1898724
1898725
1898726
1898727
1898728
1898729
1898730
1898731
1898732
1898733
1898734
1898735
1898736
1898737
1898738
1898739
1898740
1898741
1898742
1898743
1898744
1898745
1898746
1898747
1898748
1898749
1898750
1898751
1932289
1932290
1932292
1932293
1932294
1932295
1932296
1932297
1932298
1932299
1953341
1953342
1953343
1953344
1953345
1953346
1953347
1953348
1953349
1953350
1953351
1953355
1953356
1953360
1953361
1953362
1953363
1953364
1953365
1953366
1953367
1953368
1953369
1953370
1954867
1954868
1954869
1954870
1954871
1954872
1954873
1954874
1954875
1954876
1954877
1954878
1954879
1954880
1954881
1954882
1954883
1954884
1954885
1954886
1954887
1954888
1954889
1954890
1954891
1954892
1954893
1954894
1954895
1954896
1954897
1954898
1954899
1954900
1954901
1954902
1954903
1954904
1954905
1954906
1954907
1954908
1954909
1954910
1954911
1954912
1954913
1954914
1954915
1954916
1954917
1954918
1954919
1954920
1954921
1954922
1954923
1954924
1954925
1954926
1954927
1954928
1954929
1954930
1954931
1954932
1954933
1954934
1954935
1954936
1954937
1954938
1954939
1954940
1954941
1954942
1954943
1954944
1954945
1954946
1954947
1954948
1954949
1954950
1954951
1954952
1954953
1954954
1954955
1954956
1954957
1954958
1954959
1954960
1954961
1954962
1954963
1954964
1954965
1954966
1954967
1954968
1954969
1954970
1954971
1954985
1954986
1954987
1954988
1954989
1954990
1954991
1954992
1954993
1954994
1954995
1954996
1955096
1955097
1955098
1955099
1955100
1955101
1955102
1956553
1956554
1956555
1956556
1956557
1956558
1956559
1956560
1956561
1956562
1956563
1956564
1956565
1956566
1956567
1956568
1956569
1956570
1956571
1956572
1956573
1956574
1956575
1956576
1956577
1956578
1956579
1956580
1956581
1956582
1956583
1956584
1956585
1956586
1956587
1956588
1956589
1956590
1956591
1956592
1956593
1956594
1956595
1956596
1956597
1956598
1956599
1956600
1956601
1956602
1956603
1956604
1956605
1956606
1956607
1956608
1956609
1956610
1956611
1956612
1956613
1956614
1956615
1956616
1956617
1956618
1956619
1956620
1956621
1956622
1956623
1956624
1956625
1956626
1956627
1956628
1963883
1963884
1963886
1963887
1963888
1963889
1963890
1963891
1963892
1963893
1963894
1963895
1963896
1963897
1963898
1963899
1963900
1963901
1963902
1963903
1963904
1963905
1963906
1963907
1963908
1963909
1963910
1963911
1963912
1963913
1963914
1963915
1963916
1963917
1963918
1963919
1963920
1963921
1963922
1963923
1963924
1963925
1963926
1963927
1963928
1963929
1963930
1963931
1963932
1963933
1963934
1963935
1963936
1963937
1963938
1963939
1963940
1963941
1963942
1963943
1963944
1963945
1963946
1963947
1963948
1963949
1963950
1963951
1963952
1963953
1963954
1963955
1963956
1963957
1963958
1963959
1963960
1963961
1963962
1963963
1963964
1963965
1963966
1963967
1963968
1963969
1963970
1963971
1963972
1963973
1963974
1963975
1963976
1963977
1963978
1963979
1963981
1963982
1963983
1963984
1963985
1963986
1963987
1984962
1984963
1984964
1984965
1984966
1984967
1984968
1984969
1984970
1984971
1984972
1984973
1984974
1984975
1984976
1984977
1984978
1984979
1984980
1984981
1984982
1984983
1984984
1984985
1984986
1984987
1984988
1984989
1984990
1984991
1984992
1984993
1984994
1984996
1984997
1984998
1984999
1985000
1985001
1985002
1985003
1985004
1985005
1985006
1985007
1985008
1985009
1985010
1985011
1985012
1985013
1985014
1985015
1985016
1985017
1985018
1985019
1985020
1985021
1985022
1985023
1985024
1985025
1985026
1985027
1985028
1985029
1985030
1985031
1985032
1985033
1985034
1985035
1985036
1985037
1985038
1985039
1985041
1985042
1985043
1985044
1985045
1985046
1985047
1985048
1985049
1985050
1985051
1985052
1985053
1985054
1985055
1985056
1985057
1985058
1985059
1985060
1985061
1985062
1985063
1985064
1985065
1985066
1985067
1985068
1985069
1985070
1985071
1985072
1985073
1985074
1985075
1985076
1985077
1985078
1985079
1985080
1985081
1985082
1985083
1985084
1985085
1985086
1985087
1985088
1985089
1985090
1985091
1985092
1985093
1985094
1985095
1985096
1985097
1985098
1985099
1985100
1985101
1985102
1985103
1985104
1985105
1985106
1985107
1985108
1985109
1987172
1987173
1987174
1987175
1987176
1987177
1987178
1987179
1987180
1987181
1987182
1987183
1987184
1987185
1987191
1987192
1987193
1987194
1987195
1987196
1987197
1987198
1987199
1987200
1987201
1987202
1987203
1987204
1987205
1987206
1987207
1987208
1987209
1987210
1987211
1987212
1987213
1987214
1987215
1987216
1987217
1987218
1987219
1987220
1987221
1987222
1987223
1987224
1987225
1987226
1987227
1987228
1987229
1987230
1987231
1987232
1987233
2080862
2129272
2129273
2129274
2129275
2129276
2129277
2129278
2129279
2129280
2129281
2129283
2129284
2129285
2129286
2129287
2129288
2129289
2129292
2129293
2129294
2129295
2129296
2129297
2129298
2129299
2129304
2129305
2129306
2129307
2129308
2129309
2129310
2129311
2129312
2129313
2129314
2129315
2129316
2129317
2129318
2129319
2129323
2129324
2129325
2129326
2129327
2129328
2129329
2129330
2129331
2129332
2129333
2129334
2129335
2129336
2129337
2129338
2129339
2129340
2129341
2129342
2129343
2129344
2129345
2129346
2129347
2129348
2129349
2129350
2129351
2129352
2129353
2129354
2129355
2129356
2129357
2129358
2129359
2129360
2129361
2129362
2129363
2129364
2129365
2129366
2129367
2129368
2129369
2129370
2129371
2129372
2129373
2129375
2129376
2129377
2129378
2129379
2129380
2129381
2129382
2129383
2129384
2129385
2129386
2129387
2129388
2129389
2129390
2129391
2129392
2129393
2129394
2129395
2129396
2129397
2129398
2129399
2129400
2129401
2129402
2129403
2129404
2129405
2129406
2129407
2129408
2129409
2129410
2129411
2129412
2129413
2129414
2129415
2129416
2129417
2129418
2129419
2129420
2129421
2129422
2129423
2129424
2129425
2129426
2129427
2129428
2129429
2129430
2129431
2129432
2129433
2129434
2129435
2129436
2129437
2129438
2129439
2129440
2129441
2129442
2129443
2129444
2129445
2129446
2129447
2129448
2129449
2129450
2129451
2129452
2129453
2129454
2129455
2129456
2129457
2129458
2129459
2145504
2145505
2145506
2145507
2145508
2145509
2145510
2145511
2145512
2145513
2145514
2145515
2145516
2145517
2145518
2145519
2145520
2145521
2145522
2145523
2145524
2145525
2145526
2145527
2145528
2145529
2145530
2145531
2145532
2145533
2145534
2145535
2145536
2145537
2145538
2145539
2145540
2145541
2145542
2145543
2145544
2145545
2145546
2145547
2145548
2145549
2145550
2145551
2145552
2145553
2145554
2145555
2145556
2145557
2145558
2145559
2145560
2145561
2145562
2145563
2145564
2145565
2145566
2145567
2145568
2145569
2145570
2145571
2145572
2145573
2145574
2145575
2145576
2145577
2145578
2145579
2145580
2145581
2145582
2145583
2145584
2145585
2145586
2145587
2145588
2145589
2145590
2145591
2145592
2145593
2145594
2145595
2145596
2145597
2145598
2145599
2145600
2145601
2145602
2145603
2145604
2145605
2145606
2145607
2145608
2145609
2145610
2145611
2145612
2145613
2145614
2145615
2145616
2145617
2145618
2201683
2201685
2201686
2214946
2218047
2218048
2218049
2249065
2249071
2249072
2249073
2249076
2249079
2249081
2249082
2249084
2249085
2249086
2249089
2249090
2249091
2249093
2249094
2249097
2249098
2249104
2249107
2249110
2278439
2278440
2278441
2278442
2278443
2278444
2278445
2278446
2278447
2278448
2278449
2278450
2278451
2278452
2278453
2278454
2278455
2278456
2278457
2278458
2278459
2278460
2278461
2278462
2278463
2278464
2278465
2278466
2278467
2278468
2278469
2278470
2278471
2278472
2278473
2278474
2278475
2278476
2278477
2278478
2278479
2278480
2278481
2278482
2278483
2278484
2278485
2278486
2278487
2278488
2278489
2278490
2278491
2278492
2278493
2278494
2278495
2278496
2278497
2278498
2278499
2278500
2278501
2278502
2278503
2278504
2278505
2278506
2278507
2278508
2278509
2278510
2278511
2278512
2278513
2278514
2278515
2278516
2278517
2278518
2278519
2278520
2278521
2278522
2278523
2278524
2278525
2278526
2278527
2278528
2278529
2278530
2278531
2278532
2278533
2278534
2278535
2278536
2278537
2278538
2278539
2278540
2278541
2278542
2278543
2278544
2278545
2278546
2278547
2278548
2278549
2278550
2278551
2278552
2278553
2278554
2278555
2278556
2278557
2278558
2278559
2278560
2278561
2278562
2278563
2278564
2278565
2278566
2278567
2278568
2278569
2278570
2278571
2278572
2278573
2278574
2278575
2278576
2278577
2278579
2278580
2278581
2278582
2278583
2278584
2278585
2278586
2278587
2278588
2278589
2278590
2278591
2278592
2278593
2278594
2278595
2278596
2278597
2278598
2278599
2278600
2278601
2278602
2278603
2278604
2278605
2278606
2278607
2278608
2278609
2278610
2278611
2278612
2278613
2278614
2278615
2278616
2278617
2278618
2278619
2278620
2278621
2278622
2278623
2278624
2278625
2278626
2278627
2278628
2278629
2278630
2278631
2278632
2278633
2278634
2278635
2278636
2278637
2278638
2278639
2278640
2278641
2278642
2278643
2278644
2278645
2278646
2278647
2278648
2278649
2278650
2278651
2278652
2278653
2278654
2278655
2278656
2278657
2278658
2278659
2278660
2278661
2278662
2278663
2278664
2278665
2278666
2278667
2278668
2278669
2278670
2278671
2278672
2278673
2278674
2278675
2278677
2278678
2278679
2278680
2278681
2278682
2278683
2278684
2278685
2278686
2278687
2278688
2278689
2278690
2278691
2278692
2278693
2278694
2278695
2278696
2278697
2278698
2278699
2278700
2278701
2278702
2278703
2278704
2278705
2278706
2278707
2278708
2278709
2278710
2278711
2278712
2278713
2278714
2278715
2278716
2278717
2278718
2278719
2278720
2278721
2278722
2278723
2278724
2278725
2278726
2278727
2278728
2278729
2278730
2278731
2278732
2278733
2278734
2278735
2278736
2278737
2278738
2278739
2278740
2278741
2278742
2278743
2278744
2278745
2278746
2278747
2278748
2278749
2278750
2278751
2278752
2278753
2278754
2278755
2278756
2278757
2278758
2278759
2278760
2278761
2278762
2278763
2278764
2278765
2278766
2278767
2278768
2278769
2278770
2278771
2278772
2278773
2278774
2278775
2278776
2278777
2278778
2278779
2278780
2278781
2278782
2278783
2278784
2278785
2278786
2278787
2278788
2278789
2278790
2278791
2278792
2278793
2278794
2278795
2278796
2278797
2278798
2278799
2278800
2278801
2278802
2278803
2278804
2278805
2278806
2278807
2278808
2278809
2278810
2278811
2278812
2278813
2278814
2278815
2278816
2278817
2278818
2278819
2278820
2278821
2278822
2278823
2278824
2278825
2278826
2278827
2278828
2278829
2278830
2278831
2278832
2278833
2278834
2278835
2278836
2278837
2278838
2278839
2278840
2278841
2278842
2278843
2278844
2278845
2278846
2278847
2278848
2278849
2278850
2278851
2278852
2278853
2278854
2278856
2278857
2278858
2278859
2278860
2278861
2278862
2278863
2278864
2278865
2278866
2278867
2278868
2278869
2278870
2278871
2278872
2278873
2278874
2278875
2278876
2278877
2278878
2278879
2278880
2278881
2278882
2278883
2278884
2278885
2278886
2278887
2278888
2278889
2278890
2278891
2278892
2278893
2278894
2278895
2278896
2278897
2278898
2278899
2278900
2278901
2278902
2278903
2278904
2278905
2278906
2278907
2278908
2278909
2278910
2278911
2278912
2278913
2278914
2278915
2278916
2278917
2278918
2278919
2278920
2278921
2278922
2278923
2278924
2278925
2278926
2278927
2278928
2278929
2278930
2278931
2278932
2278933
2278934
2278935
2278936
2278937
2278938
2278939
2278940
2278941
2278942
2278943
2278944
2278945
2278946
2278947
2278948
2278949
2278950
2278951
2278952
2278953
2278954
2278955
2278956
2278957
2278958
2278959
2278960
2278961
2278962
2278963
2278964
2278970
2278971
2278972
2278973
2278974
2278975
2278976
2278977
2278978
2278979
2278980
2278981
2278982
2278983
2278984
2278985
2278986
2278987
2278988
2278989
2278990
2278991
2278992
2278993
2278994
2278995
2278996
2278997
2278998
2278999
2279000
2279001
2279002
2279003
2279004
2279005
2279006
2279007
2279008
2279009
2279010
2279011
2279012
2279013
2279014
2279015
2279016
2279017
2279018
2279019
2279020
2279021
2279022
2279023
2279024
2279025
2279026
2279027
2279028
2279029
2279030
2279031
2279032
2279033
2279034
2279035
2279036
2279037
2279038
2279039
2279040
2279041
2279042
2279043
2279044
2279045
2279046
2279047
2279048
2279049
2279050
2279051
2279052
2279053
2279054
2279055
2279056
2279057
2279058
2279059
2279060
2279061
2279062
2279063
2279064
2295716
2295717
2295749
2295750
2295751
2295752
2295753
2295754
2295755
2295756
2295757
2295758
2331533
2331534
2331535
2331536
2331537
2331538
2331539
2331540
2357879
2357880
2357881
2357882
2357883
2357884
2357885
2357886
2357887
2357888
2357889
2357890
2357891
2357892
2357893
2357894
2357895
2357896
2357897
2357898
2357899
2357900
2357901
2357902
2357903
2357904
2357905
2357906
2357907
2357908
2357909
2357910
2357911
2357912
2357913
2357914
2357915
2357916
2357917
2357918
2357919
2357920
2357921
2357922
2357923
2357924
2357925
2357926
2357927
2357928
2357929
2357930
2357931
2357932
2357933
2357934
2357935
2357936
2357937
2357938
2357939
2357940
2357941
2357942
2357943
2357944
2357945
2357946
2357947
2357948
2357949
2357950
2357951
2357952
2357953
2357954
2357955
2357956
2357957
2357958
2357959
2357960
2357961
2357962
2357963
2357964
2357965
2357966
2357967
2357968
2357969
2357970
2357971
2357972
2357973
2357974
2357975
2357976
2357977
2357978
2357979
2357980
2357981
2357982
2357983
2357984
2357985
2357986
2357987
2357988
2357989
2357990
2357991
2357992
2357993
2632881
2632882
2632883
2632884
2632885
2632886
2632887
2632888
2632889
2632890
2632891
2632892
2632893
2632894
2632895
2632896
2632897
2632898
2632899
2632900
2632901
2632902
2632903
2632904
2632905
2632906
2632907
2632908
2632909
2632910
2632911
2632912
2632913
2632914
2632915
2632916
2632917
2632918
2632919
2632920
2632921
2632922
2632923
2632924
2632925
2632926
2632927
2632928
2632929
2632930
2632931
2632932
2632933
2656732
2656733
2656734
2656735
2656736
2656737
2656738
2656740
2656741
2656742
2656743
2656744
2656745
2656746
2656747
2656749
2656750
2656751
2656752
2656753
2656754
2656755
2656756
2656757
2656758
2656759
2656760
2656761
2656762
2656763
2656764
2656765
2656766
2656767
2656768
2656769
2656770
2656771
2656772
2656773
2656774
2656775
2656776
2656777
2656778
2656779
2869354
2869355
2869356
2869357
2869358
2869359
2869360
2869361
2869362
2869363
2869364
2869365
2869366
2869367
2869368
2869369
2869370
2869371
2869372
2869373
2869374
2869375
2869376
2869377
2869378
2934109
2934110
2934111
2934112
2934113
2934114
2934115
2934116
2934117
2934118
2934119
2934120
2934121
2934122
2934123
2934124
2934125
2934126
2934127
2934128
2934129
2934130
2934131
2934132
2934133
2934134
2934135
2934136
2934137
2934138
2934139
2934140
2934141
2934142
2934143
2934144
2934145
2934146
2934147
2934148
2934149
2934150
2934151
2934152
2934153
2934154
2934155
2934156
2934157
2934158
2934159
2934160
2934161
2934162
2934163
2934164
2934165
2934166
2934167
2934168
2934169
2934170
2934171
2934172
2934173
2934174
2934175
2934176
2934177
2934178
2934179
2934180
2934181
2934182
2934183
2934184
2934185
2934186
2934187
2934188
2934189
2934190
2934191
2934192
2934193
2934194
2934195
2934196
2934197
2934198
2934199
2934200
2934201
2934202
2934203
2934204
2934205
2934206
2934207
2934208
2934209
2934210
2934211
2934212
2934213
2934214
2934215
2934216
2934217
2934218
2934219
2934220
2934221
2934222
2934223
2934224
2934225
2934226
2934227
2934228
2934229
2934230
2934231
2934232
2934233
2934234
2934235
2934236
2934237
2934238
2934239
2934240
2934241
2934242
2934243
2934244
2934245
2934246
2934247
2934248
2934249
2934250
2934251
2934252
2934253
2934254
2934255
2934256
2934257
2934346
2934347
2934348
2934349
2934350
2934351
2934352
2934353
2934354
2934355
2934356
2934357
2934358
2934359
2934360
2934361
2934362
2934363
2934364
2934365
2934366
2934367
2934368
2934369
2934866
2934867
2934868
2934869
2934870
2934871
2934872
2934873
2934874
2934875
2934876
2934877
2934878
2934879
2934880
2934881
2934882
2934883
2934884
2934885
2934886
2934887
2934888
2934889
2934890
2934891
2934892
2934893
2934894
2934895
2934896
2934897
2934898
2934899
2934900
2934901
2934902
2934903
2934904
2934905
2934906
2934907
2934908
2934909
2934910
2934911
2934912
2934913
2934914
2934916
2934917
2934918
2934919
2934920
2934921
2934922
2934923
2934924
2934925
2934926
2934927
2934928
2934929
2934930
2934931
2934932
2934933
2934934
2934935
2934936
2934937
2934938
2934939
2934940
2934941
2934942
2934943
2934944
2934945
2934946
2934947
2934948
2934949
2934950
2934951
2934952
2934953
2934954
2934955
2934956
2934957
2934958
2934959
2934960
2934961
2934962
2934963
2934964
2934965
2934966
2934967
2934968
2934969
2934970
2934971
2934972
2934973
2934974
2934975
2934976
2934977
2934978
2934979
2934980
2934981
2934982
2934983
2934984
2934985
2934986
2934987
2934988
2934989
2934990
2934991
2934992
2934993
2934994
2934995
2934996
2934997
2934998
2934999
2935000
2935001
2935002
2935003
2935004
2935005
2935006
2935007
2935008
2935009
2935010
2935011
2935012
2935013
2935014
2935015
2935016
2935017
2935018
2935019
2935020
2935021
2935022
2935023
2935024
2935025
2935026
2935027
2935028
2935029
2935030
2935031
2935032
2935033
2935034
2935035
2935036
2935037
2935038
2935040
2935041
2935042
2935043
2935044
2935045
2935046
2935047
2935048
2935049
2935050
2935051
2935052
2935053
2935054
2935055
2935056
2935057
2935058
2935059
2935060
2935061
2935062
2935063
2935064
2935065
2935066
2935067
2935068
2935069
2935070
2935071
2935072
2935073
2935074
2935075
2935076
2935077
2935078
2935079
2935080
2935081
2935082
2935083
2935084
2935085
2935086
2935087
2935088
2935089
2935090
2935091
2935092
2935093
2935094
2935097
2935098
2935099
2935100
2935101
2935102
2935103
2935104
2935105
2935106
2935107
2935108
2935109
2935110
2935111
2935112
2935113
2935114
2935115
2935116
2935117
2935118
2935119
2935120
2935121
2935122
2935123
2935124
2935125
2935126
2935127
2935128
2935129
2935130
2935131
2935132
2935133
2935134
2935135
2935136
2935137
2935138
2935139
2935140
2935141
2935142
2935143
2935144
2935145
2935146
2935147
2935148
2935149
2935150
2935151
2935152
2935153
2935154
2935155
2935156
2935157
2935158
2935159
2935160
2935161
2935162
2935163
2935164
2935165
2935166
2935167
2935168
2935169
2935170
2935171
2935172
2935173
2935174
2935175
2935176
2935177
2935178
2935179
2935180
2935181
2935182
2935183
2935184
2935185
2935186
2935187
2935188
2935189
2935190
2935191
2935192
2935193
2935194
2935195
2935196
2935197
2935198
2935199
2935200
2935201
2935202
2935203
2935204
2935205
2935206
2935207
2935208
2935209
2935210
2935211
2935212
2935213
2935214
2935215
2935216
2935217
2935218
2935219
2935220
2935221
2935222
2935223
2935224
2935225
2935226
2935227
2935228
2935229
2935230
2935231
2935232
2935233
2935234
2935235
2935236
2935237
2935238
2935239
2935240
2935241
2935242
2935243
2935244
2935245
2935246
2935247
2935248
2935249
2935250
2935251
2935252
2935259
2935260
2935261
2935262
2935263
2935264
2935265
2935266
2935267
2935268
2935269
2935270
2935271
2935272
2935273
2935274
2935275
2935276
2935277
2935278
2935279
2935280
2935281
2935387
2935388
2935389
2935390
2935455
2935456
2935457
2935459
2935461
2935463
2935464
2935465
2935467
2935468
2935469
2935470
2935471
2935472
2935473
2935474
2935475
2935476
2935477
2935478
2935479
2935480
2935481
2935482
2935483
2935484
2935485
2935486
2935487
2935488
2935489
2935490
2935491
2935492
2935493
2935494
2935495
2935496
2935497
2935498
2935499
2935500
2935501
2935502
2935503
2935504
2935505
2935506
2935507
2935508
2935509
2935510
2935511
2935512
2935513
2935514
2935515
2935516
2935517
2935518
2935519
2935520
2935521
2935522
2935523
2935524
2935528
2935530
2935531
2935532
2935533
2935534
2935535
2935536
2935537
2935538
2935539
2935540
2935541
2935542
2935543
2935544
2935545
2935546
2935547
2935548
2935549
2935550
2935551
2935552
2935553
2935554
2935555
2935556
2935557
2935558
2935559
2935560
2935561
2935562
2935563
2935564
2935565
2935566
2935567
2935568
2935569
2935570
2935571
2935572
2935573
2935574
2935575
2935576
2935577
2935578
2935579
2935580
2935581
2935582
2935583
2935584
2935585
2935586
2935587
2935588
2935589
2935590
2935591
2935592
2935593
2935594
2935595
2935596
2935597
2935599
2935600
2935601
2935602
2935603
2935604
2935605
2935606
2935607
2935608
2935609
2935610
2935611
2935612
2935613
2935614
2935615
2935616
2935617
2935618
2935619
2935620
2935621
2935622
2935623
2935624
2935625
2935626
2935627
2935628
2935629
2935630
2935631
2935632
2935633
2935634
2935635
2935636
2935637
2935638
2935639
2935640
2935658
2935659
2935660
2935661
2935662
2935663
2935664
2935665
2935666
2935667
2935668
2935669
2935670
2935671
2935672
2935673
2935674
2935675
2935676
2935677
2935678
2935679
2935680
2935681
2935682
2935683
2935684
2935685
2935686
2935687
2935688
2935689
2935690
2935691
2935692
2935693
2935694
2935695
2935696
2935697
2935698
2935699
2935700
2935701
2935702
2935703
2935704
2935705
2935706
2935707
2935708
2935709
2935712
2935713
2935714
2935715
2935719
2935720
2935721
2935722
2935723
2935724
2935726
2935727
2935730
2935732
2935733
2935735
2935736
2935737
2935738
2935741
2935742
2935743
2935744
2935745
2935746
2935747
2935748
2935749
2935750
2935751
2935752
2935753
2935754
2935755
2935756
2935757
2935758
2935759
2935760
2935761
2935762
2935763
2935764
2935765
2935766
2935767
2935768
2935769
2935770
2935771
2935772
2935773
2935774
2935775
2935776
2935777
2935778
2935779
2935780
2935781
2935782
2935783
2935784
2935785
2935786
2935787
2935788
2935789
2935790
2935791
2935792
2935793
2935794
2935795
2935796
2935797
2935798
2935799
2935800
2935801
2935802
2935803
2935804
2935805
2935806
2935807
2935808
2935809
2935810
2935811
2935812
2935813
2935814
2935815
2935816
2935819
2935822
2935823
2935824
2935825
2935826
2935827
2935828
2935829
2935830
3031557
3031558
3031559
3031560
3031561
3031562
3031563
3031564
3031565
3031566
3031567
3031568
3031569
3031570
3031571
3031572
3031573
3031574
3031575
3031576
3031577
3031578
3031579
3031580
3031581
3031582
3031583
3031584
3031585
3031586
3031587
3031588
3031589
3031590
3031591
3031592
3031593
3031594
3031595
3031596
3031597
3031598
3031599
3031600
3031601
3031602
3031603
3031604
3031605
3031606
3031607
3031608
3031609
3031610
3031611
3031612
3031613
3031614
3031615
3031616
3031617
3031618
3031619
3031620
3031621
3031622
3031623
3031624
3031625
3031627
3031628
3031629
3031630
3031631
3031632
3031634
3031635
3031636
3031642
3031643
3031644
3031645
3031646
3031647
3031648
3031649
3031650
3031651
3031652
3031653
3031654
3031655
3031656
3031657
3031658
3031659
3031660
3031661
3031662
3031663
3031664
3031665
3031666
3031667
3031668
3031669
3031670
3031671
3031672
3031673
3031674
3031675
3031676
3031677
3031678
3031679
3031680
3031681
3031682
3031683
3031684
3031685
3031686
3031687
3031688
3031689
3031690
3031691
3031692
3031693
3031694
3031695
3031696
3031697
3031698
3031699
3031700
3031701
3031702
3031703
3031704
3031705
3031706
3031707
3031708
3031709
3031710
3031711
3031712
3031713
3031714
3031715
3031716
3031717
3031718
3031719
3031720
3031721
3031722
3031723
3031724
3031725
3031726
3031727
3031728
3031729
3031730
3031731
3031732
3031733
3031734
3031735
3031736
3031737
3031738
3031739
3031740
3031741
3031742
3031743
3031744
3031745
3031746
3031747
3031748
3031749
3031750
3031751
3031752
3031753
3031754
3031755
3031756
3031757
3031758
3031759
3031760
3031761
3031762
3031763
3031764
3031765
3031766
3031767
3031768
3031769
3031770
3031771
3031772
3031773
3031774
3031775
3031776
3031777
3031778
3031779
3031780
3031781
3031782
3031783
3031784
3031785
3031786
3031787
3031788
3031789
3031790
3031791
3031792
3031793
3031794
3031795
3031796
3031797
3031798
3031799
3031800
3031801
3031802
3031803
3031804
3031805
3031806
3031807
3031808
3031809
3031810
3031811
3031812
3031813
3031815
3031816
3031817
3031818
3031819
3031820
3031821
3031822
3031823
3031824
3031825
3031826
3031827
3031828
3031829
3031830
3031831
3031832
3031833
3031834
3031835
3031836
3031837
3031838
3031839
3031840
3031841
3031842
3031843
3031844
3031845
3031846
3031847
3031848
3031849
3031850
3031852
3031853
3031854
3031855
3031856
3031857
3031858
3031859
3031860
3031861
3031862
3031863
3031864
3031865
3031866
3031867
3031868
3031869
3031870
3031871
3031872
3031873
3031874
3031875
3031876
3031877
3031878
3031879
3031880
3031881
3031882
3031883
3031884
3031885
3031886
3031887
3031888
3031889
3031890
3031891
3031892
3031893
3031894
3031895
3031896
3031897
3031898
3031899
3031900
3031901
3031902
3031903
3031904
3031905
3031906
3031907
3031908
3031909
3031910
3031911
3031912
3031913
3031914
3031915
3031916
3031917
3098854
3098855
3098856
3098857
3098858
3098859
3098860
3098861
3098862
3098863
3098864
3098865
3098866
3098867
3098868
3098869
3098870
3098871
3098872
3098873
3098874
3098875
3098876
3098877
3098878
3098879
3098880
3098881
3098882
3098883
3098884
3098885
3098886
3098887
3098888
3098889
3098890
3098891
3098892
3098893
3098894
3098895
3098896
3098897
3098898
3098899
3098900
3098901
3098902
3098903
3098904
3098905
3098906
3098907
3098908
3098909
3098910
3098911
3098912
3098913
3098914
3098915
3098916
3098917
3098918
3098919
3098920
3098921
3098922
3098923
3098924
3098925
3098926
3098927
3098928
3098929
3098930
3098931
3114366
3114367
3114368
3114369
3114370
3114371
3114372
3114609
3114620
3114673
3114674
3114675
3114676
3114677
3114678
3114679
3114680
3114681
3114682
3114683
3114684
3114685
3114686
3114687
3114688
3114689
3114690
3114691
3114692
3114693
3114694
3114695
3114696
3114697
3114698
3114699
3114700
3114701
3114702
3114703
3114704
3114705
3114706
3114707
3114708
3118044
3118045
3118047
3118048
3118049
3118057
3118058
3118059
3118060
3118062
3118065
3118066
3118067
3118068
3118069
3118074
3118075
3118077
3118078
3118079
3118080
3118081
3118082
3118083
3118084
3118093
3118097
3118098
3118126
3118127
3118128
3118129
3118130
3118131
3118132
3118133
3118134
3118135
3118136
3118137
3118138
3118139
3118140
3118141
3118142
3118143
3118144
3118145
3118146
3118147
3118148
3118149
3118150
3203326
3203328
3203329
3203330
3203331
3203332
3203333
3203334
3203335
3203336
3203337
3203338
3203339
3203341
3203342
3203343
3203344
3203345
3203347
3203349
3203350
3203351
3203352
3203353
3203355
3203356
3203357
3203361
3203362
3203363
3203364
3203365
3203366
3203367
3203368
3203370
3203371
3203372
3203373
3203374
3203375
3203376
3203377
3203378
3203379
3203380
3203381
3203382
3203383
3203384
3203385
3203386
3203387
3203388
3203389
3203390
3203391
3203392
3203393
3203394
3203395
3203396
3203397
3203398
3203399
3203400
3203401
3203402
3203403
3203404
3203405
3203406
3203407
3203408
3203409
3203410
3203411
3203412
3203413
3203414
3203415
3203416
3203417
3203418
3203419
3203420
3203421
3203422
3203423
3203424
3203425
3203426
3203427
3203428
3203429
3203430
3203431
3203432
3203433
3203434
3203435
3203436
3203437
3203438
3203439
3203440
3203441
3203442
3203443
3203444
3203445
3203446
3203447
3203448
3203449
3203450
3203451
3203452
3203453
3203454
3203455
3203456
3203457
3203458
3203459
3203460
3203461
3203462
3203463
3203464
3203465
3203466
3203467
3203468
3203469
3203470
3203471
3203472
3203473
3203474
3203475
3203476
3203477
3203478
3203479
3203480
3203481
3203482
3203483
3203484
3203485
3203486
3203487
3203488
3203489
3203490
3203491
3203492
3203493
3203494
3203495
3203496
3203497
3203498
3203499
3203500
3203501
3203502
3203503
3203504
3203505
3203506
3203507
3203508
3203509
3203510
3203511
3203512
3203513
3203514
3203515
3203516
3203517
3203518
3203519
3203520
3203521
3203522
3203523
3203524
3203525
3203526
3203527
3203528
3203529
3203530
3203531
3203532
3203533
3203534
3203535
3203536
3203537
3203538
3203539
3203540
3203541
3203542
3203543
3203544
3203545
3203546
3203547
3203548
3203549
3203550
3203551
3203554
3203555
3203556
3203557
3203558
3203559
3203560
3203561
3203562
3203564
3203565
3203566
3203567
3203568
3203569
3203570
3203571
3203572
3203573
3203574
3203575
3203576
3203577
3203578
3203579
3203581
3203582
3203583
3203584
3203585
3203586
3203587
3203588
3203589
3203590
3203593
3203594
3203595
3203596
3203597
3203598
3203599
3203600
3203601
3203602
3203603
3203604
3203605
3203606
3203607
3203608
3203609
3203610
3203611
3203612
3203613
3203614
3203615
3203616
3203617
3203618
3203619
3203620
3203621
3203622
3203623
3203624
3203625
3203626
3203627
3203628
3203629
3203630
3203631
3203632
3203633
3203634
3203635
3203636
3203637
3203638
3203639
3203640
3203641
3203642
3203643
3203644
3203645
3203646
3203647
3203648
3203649
3203650
3203651
3203652
3203653
3203654
3203655
3203656
3203657
3203658
3203659
3203660
3203661
3203663
3203664
3203665
3203666
3203667
3203668
3203669
3203670
3203671
3203672
3203673
3203674
3203675
3203676
3203677
3203678
3203679
3203680
3203683
3203684
3203685
3203686
3203687
3203688
3203690
3203691
3203692
3203693
3203694
3203695
3203696
3203697
3203698
3203699
3203700
3203701
3203702
3203703
3203704
3203705
3203706
3203707
3203708
3203709
3203710
3203711
3203712
3203713
3203714
3203715
3203716
3203717
3203718
3203719
3203720
3203721
3203722
3203723
3203724
3203725
3203726
3203727
3203728
3203729
3203730
3203731
3203732
3203733
3203734
3203735
3203736
3203737
3203738
3203739
3203740
3203741
3203742
3203743
3203744
3203745
3203746
3203747
3203748
3203749
3203750
3203754
3203755
3203756
3203757
3203758
3203759
3203760
3203761
3203762
3203763
3203764
3203765
3203766
3203767
3203768
3203769
3203770
3203771
3203772
3203773
3203774
3203775
3203776
3203777
3203778
3203779
3203780
3203781
3203782
3203783
3203784
3203785
3203786
3203787
3203788
3203789
3203790
3203791
3203792
3203793
3203794
3203795
3203796
3203797
3203798
3203799
3203800
3203801
3203803
3203804
3203805
3203806
3203808
3203809
3203810
3203811
3203812
3203813
3203814
3203815
3203816
3203817
3203818
3203819
3203820
3203821
3203822
3203823
3203824
3203825
3203826
3203827
3203828
3203829
3203830
3203831
3203832
3203833
3203834
3203835
3203836
3203837
3203838
3203839
3203840
3203841
3203842
3203843
3203844
3203845
3203846
3203847
3203848
3203849
3203850
3203851
3203852
3203853
3203854
3203855
3203856
3203857
3203858
3203859
3203860
3203861
3203862
3203863
3203864
3203865
3203866
3203867
3203868
3203869
3203870
3203871
3203872
3203873
3203874
3203875
3203876
3203877
3203878
3203879
3203880
3203881
3203882
3203883
3203884
3203885
3203886
3203887
3203888
3203889
3203890
3203891
3203892
3203893
3203894
3203895
3203896
3203897
3203898
3203899
3203900
3203901
3203902
3203903
3203904
3203905
3203906
3203907
3203908
3203909
3203910
3203911
3203912
3203913
3203914
3203915
3203916
3203917
3203918
3203919
3203920
3203921
3203922
3203923
3203924
3203925
3203926
3203927
3203928
3203929
3203930
3203931
3203932
3203933
3203934
3203935
3203936
3203937
3203938
3203939
3203940
3203941
3203942
3203943
3203944
3203945
3203946
3203947
3203948
3203949
3203950
3203951
3203952
3203953
3203954
3203955
3203956
3203957
3203958
3203959
3203960
3203961
3203962
3203963
3203965
3203966
3203967
3203968
3203969
3203970
3203971
3203972
3203973
3203974
3203975
3203976
3203977
3203978
3203979
3203980
3203981
3203982
3203983
3203984
3203988
3203990
3203991
3203995
3203996
3203997
3203998
3204000
3204002
3204003
3204004
3204005
3204006
3204007
3204008
3204009
3204010
3204011
3204016
3204017
3204018
3204019
3204020
3204021
3204022
3204023
3204024
3204025
3204026
3204027
3204028
3204029
3204030
3204031
3204032
3204033
3204034
3204035
3204036
3204037
3204038
3204039
3204040
3204041
3204042
3204043
3204044
3204046
3204047
3204048
3204049
3204050
3204051
3204052
3204053
3204054
3204055
3204056
3204057
3204058
3204059
3204061
3204062
3204063
3204064
3204065
3204066
3204067
3204068
3204069
3204070
3204071
3204072
3204073
3204074
3204075
3204076
3204077
3204078
3204079
3204080
3204081
3204082
3204083
3204084
3204085
3204086
3204087
3204088
3204089
3204090
3204091
3204092
3204093
3204094
3204095
3204096
3204097
3204098
3204099
3204100
3204101
3204102
3204103
3204104
3204105
3204106
3204107
3204108
3204109
3204110
3204111
3204112
3204113
3204114
3204115
3204116
3204117
3204118
3204119
3204120
3204121
3204122
3204123
3204124
3204125
3204126
3204127
3204128
3204129
3204130
3204131
3204132
3204133
3204134
3204135
3204136
3204137
3204138
3204139
3204140
3204141
3204142
3204143
3204144
3204145
3204146
3204147
3204148
3204149
3204150
3204151
3204152
3204153
3204154
3204155
3204156
3204157
3204158
3204159
3204160
3204161
3204162
3204163
3204164
3204165
3204166
3204167
3204168
3204169
3204170
3204171
3204172
3204173
3204174
3204175
3204176
3204177
3204178
3204179
3204180
3204181
3204182
3415539
3415540
3415542
3415543
3415544
3415545
3415546
3415547
3415548
3415549
3415550
3415552
3415553
3415555
3415556
3415557
3415558
3415559
3415560
3415561
3415562
3415563
3415564
3415565
3415566
3415567
3415568
3415569
3415570
3415572
3415573
3415574
3415575
3415576
3415577
3415578
3415579
3415580
3415581
3415582
3415583
3415584
3415585
3415586
3415587
3415588
3415589
3415590
3415591
3415592
3415593
3415594
3415595
3415596
3415597
3415598
3415599
3415601
3415602
3415603
3415604
3415605
3415606
3415607
3415608
3415609
3415610
3415611
3415612
3415613
3415614
3415615
3415616
3415617
3415618
3415619
3415620
3415621
3415622
3415623
3415624
3415625
3415626
3415627
3415628
3415629
3415630
3415631
3415632
3415633
3415634
3415635
3415636
3415637
3415638
3415639
3415640
3415641
3415642
3415643
3415644
3415647
3415648
3415649
3415650
3415651
3415652
3415653
3415654
3415655
3415656
3415657
3415658
3415659
3415660
3415661
3415662
3415663
3415664
3415665
3415666
3415667
3415668
3415669
3415670
3415671
3415672
3415673
3415674
3415675
3415676
3415677
3415678
3415679
3415680
3415681
3415682
3415683
3415684
3415685
3415686
3415687
3415688
3415689
3415690
3415691
3415692
3415693
3415694
3415695
3415696
3415697
3415698
3415699
3415700
3415701
3415702
3415703
3415704
3415705
3415706
3415707
3415708
3415709
3415710
3415711
3415712
3415713
3415714
3415715
3415716
3415717
3415718
3415719
3415720
3415721
3415722
3415723
3415724
3415725
3415726
3415727
3415728
3415729
3415730
3415731
3415732
3415733
3415734
3415735
3415736
3415737
3415738
3415739
3415740
3415741
3415742
3415743
3415744
3415745
3415746
3415747
3415748
3415749
3415750
3415751
3415752
3415753
3415754
3415755
3415756
3415757
3415758
3415759
3415760
3415761
3415762
3415763
3415764
3415765
3415766
3415767
3415768
3415769
3415770
3415771
3415772
3415773
3415774
3415775
3415776
3415777
3415778
3415779
3415780
3415781
3415782
3415783
3415784
3415785
3415786
3415787
3415788
3415789
3415790
3415791
3415792
3415793
3415794
3415795
3415796
3415797
3415798
3415799
3415800
3415801
3415802
3415803
3415804
3415805
3415806
3415807
3415808
3415809
3415810
3415811
3415812
3415813
3415814
3415815
3415816
3415817
3415818
3415819
3415820
3415821
3415822
3415823
3415824
3415825
3415826
3415827
3415828
3415829
3415830
3415831
3415832
3415833
3415835
3415836
3415837
3415838
3415839
3415840
3415842
3415843
3415845
3415847
3415848
3415851
3415852
3415853
3415854
3415855
3415856
3415858
3415861
3415863
3415868
3415873
3415878
3415900
3415901
3415902
3415903
3415904
3415905
3415906
3415907
3415908
3415909
3415910
3415911
3415912
3415913
3415914
3415915
3415916
3415917
3415918
3415919
3415920
3415921
3415922
3415923
3415924
3415925
3415926
3415927
3415928
3415929
3415930
3415931
3415932
3415933
3415934
3415935
3415936
3415937
3415938
3415939
3415940
3415941
3415942
3415943
3415944
3415945
3415946
3415947
3415948
3415949
3415950
3415951
3415952
3415953
3415954
3415955
3415956
3415957
3415958
3415959
3415960
3415961
3415962
3415963
3415964
3415965
3415966
3415967
3415968
3415969
3415970
3415972
3415974
3415976
3415977
3415978
3415979
3415980
3415981
3415982
3415983
3415984
3415986
3415987
3415988
3415989
3415990
3415991
3415992
3415993
3415994
3415995
3415996
3415997
3415998
3415999
3416000
3416020
3416021
3416022
3416023
3416024
3416025
3416026
3416027
3416028
3416029
3416030
3416031
3416032
3416033
3416034
3416035
3416036
3416037
3416038
3416040
3416050
3416061
3416070
3416072
3416073
3416074
3416075
3416076
3416077
3416083
3416084
3416085
3416088
3416091
3416092
3416093
3416094
3416095
3416096
3416097
3416098
3416099
3416100
3416101
3416102
3416103
3416104
3416105
3416106
3416110
3416111
3416112
3416113
3416114
3416115
3416116
3416119
3416120
3416121
3416122
3416123
3416124
3416125
3416126
3416127
3416128
3416129
3416130
3416131
3416132
3416133
3416134
3416135
3416136
3416137
3416138
3416139
3416140
3416141
3416142
3416143
3416144
3416145
3416146
3416147
3416148
3416149
3416150
3416151
3416152
3416153
3416154
3416155
3416156
3416157
3416158
3416159
3416160
3416161
3416162
3416163
3416164
3416165
3416166
3416167
3416168
3416169
3416170
3416171
3416172
3416173
3416174
3416175
3416176
3416177
3416178
3416179
3416180
3416181
3416182
3416183
3416184
3416185
3416186
3416187
3416188
3416189
3416190
3416191
3416192
3416193
3416194
3416195
3416196
3416197
3416198
3416199
3416200
3416201
3416202
3416203
3416204
3416205
3416206
3416207
3416208
3416209
3416210
3416211
3416212
3416213
3416214
3416215
3416216
3416217
3416218
3416219
3416220
3416221
3416222
3416223
3416224
3416225
3416226
3416227
3416228
3416230
3416231
3416232
3416233
3416234
3416235
3416236
3416237
3416238
3416239
3416240
3416241
3416242
3416243
3416244
3416245
3416246
3416247
3416248
3416249
3416250
3416251
3416252
3416253
3416255
3416256
3416257
3416258
3416259
3416260
3416261
3416262
3416263
3416264
3416265
3416266
3416267
3416268
3416269
3416270
3416271
3416272
3416273
3416274
3416275
3416276
3416277
3416278
3416279
3416280
3416281
3416282
3416283
3416284
3416285
3416286
3416287
3416288
3416289
3416290
3416291
3416292
3416293
3416294
3416295
3416296
3416297
3416298
3416299
3416300
3416301
3416302
3416303
3416304
3416305
3416306
3416307
3416308
3416309
3416310
3416311
3416312
3416313
3416314
3416315
3416316
3416317
3416318
3416319
3416320
3416321
3416322
3416323
3416324
3416325
3416326
3416327
3416328
3416329
3416330
3416331
3416332
3416333
3416334
3416335
3416336
3416337
3416338
3416339
3416340
3416341
3416342
3416343
3416344
3416345
3416346
3416347
3416348
3416349
3416350
3416351
3416352
3416353
3416354
3416355
3416356
3416357
3416358
3416359
3416360
3416361
3416362
3416363
3416364
3416365
3416366
3416367
3416368
3416369
3416370
3416371
3416372
3416373
3416374
3416375
3416376
3416377
3416378
3416379
3416380
3416381
3416382
3416383
3416384
3416385
3416386
3416387
3416388
3416389
3416390
3416391
3416392
3416393
3416394
3416395
3416396
3416397
3416398
3416399
3416400
3416401
3416402
3416403
3416404
3416405
3416406
3416407
3416408
3416409
3416410
3416411
3416412
3416413
3416414
3416415
3416416
3416417
3416418
3416419
3416420
3416421
3416422
3416423
3416424
3416425
3416426
3416427
3416428
3416429
3416430
3416431
3416432
3416433
3416434
3416435
3416436
3416437
3416438
3416439
3416440
3416441
3416442
3416443
3416444
3416445
3416446
3416447
3416448
3416449
3416450
3416451
3416452
3416453
3416454
3416455
3416456
3416457
3416458
3416459
3416460
3416462
3416463
3416464
3416465
3416466
3416467
3416468
3416469
3416470
3416471
3416472
3416473
3416474
3416475
3416476
3416477
3416478
3416479
3416480
3416481
3416482
3416483
3416484
3416485
3416486
3416487
3416488
3416489
3416490
3416491
3416492
3416493
3416494
3416495
3416496
3416497
3416498
3416499
3416500
3416501
3416502
3416503
3416504
3416505
3416506
3416507
3416508
3416509
3416510
3416511
3416512
3416513
3416514
3416515
3416516
3416517
3416518
3416519
3416520
3416521
3416522
3416523
3416524
3416525
3416526
3416527
3416528
3416529
3416530
3416531
3416532
3416533
3416534
3416535
3416536
3416537
3416538
3416539
3416540
3416541
3416542
3416543
3416544
3416545
3416546
3416547
3416548
3416549
3416550
3416551
3416552
3416553
3416554
3416555
3416561
3416563
3416564
3416565
3416566
3416567
3416568
3416569
3416570
3416571
3416572
3416573
3416574
3416575
3416576
3416577
3416578
3416579
3416580
3416581
3416582
3416583
3416584
3416585
3416586
3416587
3416588
3416589
3416590
3416591
3416592
3416593
3416594
3416595
3416596
3416597
3416598
3416599
3416600
3416601
3416602
3416603
3416604
3416605
3416606
3416607
3416608
3416609
3416610
3416611
3416612
3416613
3416614
3416615
3416616
3416617
3416618
3416619
3416620
3416621
3416622
3416623
3416624
3416625
3416626
3416627
3416628
3416629
3416630
3416631
3416632
3416633
3416634
3416635
3416636
3416637
3416638
3416639
3416640
3416641
3416642
3416643
3416644
3416645
3416646
3416647
3416648
3416649
3416650
3416651
3416652
3416653
3416654
3416655
3416656
3416657
3416658
3416659
3416660
3416661
3416662
3416663
3416664
3416665
3416666
3416667
3416668
3416669
3416670
3416671
3416672
3416673
3416674
3416675
3416676
3416677
3416678
3416679
3416680
3416681
3416682
3416683
3416684
3416685
3416687
3416688
3416689
3416690
3416691
3416692
3416693
3416694
3416695
3416696
3416697
3416698
3416699
3416700
3416701
3416702
3416703
3416704
3416705
3416706
3416707
3416708
3416709
3416710
3416711
3416712
3416713
3416714
3416715
3416716
3416717
3416718
3416719
3416720
3416721
3416722
3416723
3416724
3416725
3416726
3416727
3416728
3416729
3416730
3416731
3416732
3416733
3416734
3416735
3416736
3416737
3416738
3416739
3416740
3416741
3416742
3416743
3416744
3416745
3416746
3416747
3416749
3416752
3416753
3416754
3416755
3416756
3416757
3416758
3416759
3416760
3416761
3416762
3416763
3416764
3416765
3416766
3416767
3416768
3416769
3416785
3416786
3416787
3416788
3416789
3416790
3416791
3416792
3416793
3416794
3416795
3416796
3416797
3416798
3416799
3416800
3416801
3416802
3416803
3416804
3416805
3416806
3416807
3416808
3416809
3416810
3416811
3416812
3416813
3416814
3416815
3416816
3416817
3416818
3416819
3416820
3416821
3416822
3416823
3416824
3416826
3416827
3416828
3416829
3416830
3416831
3416832
3416833
3525474
3525475
3525476
3525477
3525478
3525479
3525480
3525481
3525482
3525483
3525484
3525485
3525486
3525487
3525488
3525489
3525490
3534817
3534819
3534820
3534822
3534824
3534826
3534828
3534829
3534830
3536185
3536186
3536187
3536188
3536189
3623249
3623250
3623251
3623252
3623253
3623254
3623255
3662132
3662133
3662134
3662135
3662136
3662137
3662138
3662139
3662140
3662141
3662142
3662143
3662144
3662145
3662146
3662147
3662148
3662149
3662150
3662151
3662152
3662153
3662154
3662155
3662156
3662157
3662158
3662159
3662160
3662161
3662162
3662163
3662164
3662165
3662166
3662167
3662168
3662169
3662170
3662171
3662172
3662173
3690101
3690102
3690104
3690107
3690108
3690110
3690115
3690118
3690119
3690120
3749212
3749213
3827740
3827741
3827742
3827743
3827744
3827753
3827754
3827755
3827756
3827766
3827767
3827769
3827775
3827776
3827777
3827788
3827789
3827790
3827791
3827792
3847479
3853755
3853756
3853757
3853758
3880676
3880679
3880680
3984616
3984617
3984618
3984619
3984620
3984621
3984622
3984623
3984624
3984625
3984626
3984627
3984628
3984629
3984630
3984631
3984632
3984633
3984634
3984635
3984636
3984637
3984638
3984639
3984640
3984641
3984642
3984643
3984644
3984645
3984646
3984647
3991216
3991217
3991218
3991219
3991220
3991221
3991222
3991223
3991224
3991225
3991226
3991227
3991228
3991229
3991230
3991231
3991232
3991233
3991234
3991235
3991236
3991237
3991238
3991239
4053766
4053849
4053850
4053851
4053852
4053853
4053860
4053862
4053864
4053870
4053878
4053971
4054003
4054004
4075472
4078073
4078074
4078075
4078077
4078078
4078079
4078080
4078179
4078180
4078181
4078182
4078183
4078184
4078185
4078186
4078187
4078188
4078189
4078223
4113712
4113713
4113714
4113715
4113716
4113717
4113718
4113720
4113721
4113723
4113726
4113727
4113728
4113730
4113741
4113742
4113743
4113744
4113745
4113746
4113747
4113754
4113755
4113756
4113757
4113760
4113775
4113776
4113777
4113778
4113779
4113780
4113781
4113782
4113783
4113784
4113785
4113786
4113787
4113788
4113789
4113790
4113791
4113792
4113793
4113799
4113800
4113801
4113802
4113803
4113804
4113809
4113810
4113811
4113812
4113813
4113814
4113815
4113816
4113817
4113818
4113820
4113825
4113826
4113827
4113828
4113831
4113832
4113833
4113834
4113835
4113836
4113837
4113838
4113839
4113840
4113841
4113842
4113843
4113844
4113846
4113847
4113848
4113849
4113850
4113851
4113852
4113853
4113854
4113856
4113858
4113859
4113860
4113862
4113865
4113867
4113868
4113869
4113870
4113871
4113872
4113873
4113874
4113876
4113878
4113879
4113880
4113882
4113886
4113887
4113888
4113889
4113890
4113892
4113911
4113915
4113916
4113930
4113931
4113934
4113935
4113942
4113943
4113944
4113945
4113946
4113947
4113948
4113952
4113956
4113967
4113969
4113974
4114042
4114047
4114051
4114055
4114056
4114057
4114064
4114071
4114085
4114094
4114159
4114160
4114165
4114166
4114167
4114169
4114170
4114171
4114172
4114173
4114174
4114175
4114180
4114181
4114182
4114183
4114185
4114186
4114199
4114206
4114207
4114212
4114223
4114228
4114229
4114231
4114234
4114235
4114239
4114243
4114244
4114246
4114247
4114253
4114258
4114259
4114261
4114262
4114263
4114265
4114267
4114268
4114269
4114272
4114273
4114275
4114277
4114278
4114279
4114280
4114281
4114282
4114283
4114284
4114285
4114296
4114302
4114303
4114304
4114307
4114313
4114314
4114315
4114319
4114322
4114327
4114339
4114340
4114341
4114342
4114343
4114344
4114346
4114348
4114349
4114350
4114351
4114352
4114353
4114355
4114356
4114357
4114358
4114359
4114360
4114364
4114365
4114366
4114367
4114370
4114375
4114376
4114380
4114381
4114385
4114386
4114387
4114388
4114389
4114390
4114391
4114392
4114393
4114394
4114395
4114396
4114397
4114398
4114399
4114400
4114401
4114402
4114431
4114449
4114450
4114456
4114464
4114490
4114492
4114498
4114528
4114529
4114530
4114531
4114532
4114533
4114534
4114535
4114536
4114537
4114538
4114539
4114540
4114541
4114542
4114543
4114544
4114545
4114546
4114547
4114548
4114549
4114550
4114567
4114569
4114595
4114596
4114605
4114606
4114630
4114645
4114646
4114647
4114658
4114661
4114663
4114666
4114667
4114671
4114672
4114673
4114675
4114676
4114677
4114678
4114689
4114690
4114691
4114692
4114693
4114732
4114740
4114741
4114742
4114743
4114744
4114745
4114746
4114747
4114748
4114749
4114750
4114752
4114753
4114754
4114755
4114756
4114757
4114758
4114759
4114760
4114761
4114762
4114763
4114846
4114847
4114848
4114849
4114850
4114851
4114852
4114853
4114854
4114855
4114858
4114859
4114860
4114861
4114863
4114864
4114866
4114867
4114868
4114871
4114875
4114880
4114883
4114886
4114887
4114888
4114890
4114893
4114894
4114895
4114903
4114904
4114905
4114906
4114907
4114908
4114909
4114910
4114911
4114912
4114913
4114917
4114918
4114919
4114920
4114921
4114923
4114930
4114931
4114932
4114933
4114935
4114936
4114938
4114939
4114940
4114945
4114946
4114949
4114951
4114955
4114959
4114960
4114961
4114963
4114964
4114965
4114966
4114967
4114968
4114969
4114970
4114971
4114974
4114979
4114980
4114981
4114982
4114984
4114985
4114989
4114991
4114995
4114996
4114997
4114999
4115000
4115001
4115002
4115003
4115004
4115005
4115006
4115007
4115008
4115009
4115010
4115011
4115012
4117175
4117176
4117781
4167625
4167627
4167632
4167633
4167634
-----------------------------
------------------------------------
1674079	63786MNJSWHRB015	116.965	-29.1246	389.14	47	496595.0986	6778209.137

1674079	0	90	-60


3049	1674079	18	None	AU	Metamorphosed ultramafic rocks undivided	Other	80	Other	unclassified rock	unclassified_rock



3049	1674079	18	18.1	AU	Metamorphosed ultramafic rocks undivided	Other	80	Other	unclassified rock	unclassified_rock	496604.0986	6778209.137	373.5515427	496604.1236	6778209.137	373.5082415	496604.1486	6778209.137	373.4649402



dic_attr_val_lithology_filter

company_id

company_code

comapany_litho

DELETE FROM dic_attr_val_lithology_filter
WHERE company_id =141 AND company_code = 'Q' AND comapany_litho =''

print(azm1,"\t",dip1,"\t",at)





--------------------
---------------
import math
import pandas as pd
import numpy as np
  
# Function to find distance 
def distance(x1, y1, z1, x2, y2, z2):  
       
    d = math.sqrt(math.pow(x2 - x1, 2) +
                math.pow(y2 - y1, 2) +
                math.pow(z2 - z1, 2)* 1.0) 
    return(d)


def distance(x, y):
    if x >= y:
        result = x - y
    elif y > x:
        result = y - x
    elif x == y:
        result = x- y

    return result
  

  
   


Calculated_Data= pd.read_csv('DB_Lithology_Export_Calc.csv',encoding = "ISO-8859-1", dtype='object')
Leapfrog_Data= pd.read_csv('DB_Lithology_Export_Leapfrog.csv',encoding = "ISO-8859-1", dtype='object')


#collar.CollarID = collar.CollarID.astype(str)



Calculated_Data.xbt=Calculated_Data['xbt'].astype(float)
Calculated_Data.ybt=Calculated_Data['ybt'].astype(float)
Calculated_Data.zbt=Calculated_Data['zbt'].astype(float)
Leapfrog_Data.start_x=Leapfrog_Data['start_x'].astype(float)
Leapfrog_Data.start_y=Leapfrog_Data['start_y'].astype(float)
Leapfrog_Data.start_z=Leapfrog_Data['start_z'].astype(float)

Calculated_Data.xmt=Calculated_Data['xmt'].astype(float)
Calculated_Data.ymt=Calculated_Data['ymt'].astype(float)
Calculated_Data.zmt=Calculated_Data['zmt'].astype(float)
Leapfrog_Data.mid_x=Leapfrog_Data['mid_x'].astype(float)
Leapfrog_Data.mid_y=Leapfrog_Data['mid_y'].astype(float)
Leapfrog_Data.mid_z=Leapfrog_Data['mid_z'].astype(float)

Calculated_Data.xet=Calculated_Data['xet'].astype(float)
Calculated_Data.yet=Calculated_Data['yet'].astype(float)
Calculated_Data.zet=Calculated_Data['zet'].astype(float)
Leapfrog_Data.end_x=Leapfrog_Data['end_x'].astype(float)
Leapfrog_Data.end_y=Leapfrog_Data['end_y'].astype(float)
Leapfrog_Data.end_z=Leapfrog_Data['end_z'].astype(float)




######################

x1=Calculated_Data['xbt'].values
y1=Calculated_Data['ybt'].values
z1=Calculated_Data['zbt'].values
x2=Leapfrog_Data['start_x'].values
y2=Leapfrog_Data['start_y'].values
z2=Leapfrog_Data['start_z'].values

x3=Calculated_Data['xmt'].values
y3=Calculated_Data['ymt'].values
z3=Calculated_Data['zmt'].values
x4=Leapfrog_Data['mid_x'].values
y4=Leapfrog_Data['mid_y'].values
z4=Leapfrog_Data['mid_z'].values

x5=Calculated_Data['xet'].values
y5=Calculated_Data['yet'].values
z5=Calculated_Data['zet'].values
x6=Leapfrog_Data['end_x'].values
y6=Leapfrog_Data['end_y'].values
z6=Leapfrog_Data['end_z'].values


x1_count= x1.shape[0]
y1_count= y1.shape[0]
z1_count= z1.shape[0]
x2_count= x2.shape[0]
y2_count= y2.shape[0]
z2_count= z2.shape[0]


x3_count= x3.shape[0]
y3_count= y3.shape[0]
z3_count= z3.shape[0]
x4_count= x4.shape[0]
y4_count= y4.shape[0]
z4_count= z4.shape[0]


x5_count= x5.shape[0]
y5_count= y5.shape[0]
z5_count= z5.shape[0]
x6_count= x6.shape[0]
y6_count= y6.shape[0]
z6_count= z6.shape[0]

#Diff_1=[]
#Diff_2=[]
#Diff_3=[]

x1_diff=[]
y1_diff=[]
z1_diff=[]

x2_diff=[]
y2_diff=[]
z2_diff=[]


x3_diff=[]
y3_diff=[]
z3_diff=[]




if(x1_count == y1_count==z1_count==x2_count==y2_count==z2_count):
    for c1 in range(x1_count):
        #p1 = distance(x1[c1],y1[c1],z1[c1],x2[c1],y2[c1],z2[c1])
        x1diff=distance(float(x1[c1]),float(x2[c1]))
        y1diff=distance(float(y1[c1]),float(y2[c1]))
        z1diff=distance(float(z1[c1]),float(z2[c1]))
        #print(p1)
        x1_diff.append(x1diff)
        y1_diff.append(y1diff)
        z1_diff.append(z1diff)
    #print(Diff_1)
    #print('########')


if(x3_count == y3_count==z3_count==x4_count==y4_count==z4_count):
    for c2 in range(x3_count):
        #p1 = distance(x1[c1],y1[c1],z1[c1],x2[c1],y2[c1],z2[c1])
        x2diff=distance(float(x3[c1]),float(x4[c1]))
        y2diff=distance(float(y3[c1]),float(y4[c1]))
        z2diff=distance(float(z3[c1]),float(z4[c1]))
        #print(p1)
        x2_diff.append(x2diff)
        y2_diff.append(y2diff)
        z2_diff.append(z2diff)

if(x5_count == y5_count==z5_count==x6_count==y6_count==z6_count):        
    for c3 in range(x5_count):
        #p1 = distance(x1[c1],y1[c1],z1[c1],x2[c1],y2[c1],z2[c1])
        x3diff=distance(float(x5[c1]),float(x6[c1]))
        y3diff=distance(float(y5[c1]),float(y6[c1]))
        z3diff=distance(float(z5[c1]),float(z6[c1]))
        #print(p1)
        x3_diff.append(x3diff)
        y3_diff.append(y3diff)
        z3_diff.append(z3diff)

#if(x1_count == y1_count==z1_count==x2_count==y2_count==z2_count):
    #for c1 in range(x1_count):
        #p1 = distance(x1[c1],y1[c1],z1[c1],x2[c1],y2[c1],z2[c1])
        #print(p1)
        #Diff_1.append(p1)
    #print(Diff_1)
    #print('########')
            
        
#if(x3_count == y3_count==z3_count==x4_count==y4_count==z4_count):
    #for c2 in range(x3_count):
        #p2 = distance(x3[c2],y3[c2],z3[c2],x4[c2],y4[c2],z4[c2])
        #Diff_2.append(p2)
    #print(Diff_2)
    #print('########')
        
        
#if(x5_count == y5_count==z5_count==x6_count==y6_count==z6_count):
    #for c3 in range(x5_count):
        #p3 = distance(x5[c3],y5[c3],z5[c3],x6[c3],y6[c3],z6[c3])
        #Diff_3.append(p3)
    #print(Diff_3)
    #print('########')









Calculated_Data['x_beg_diff']=x1_diff
Calculated_Data['y_beg_diff']=y1_diff
Calculated_Data['z_beg_diff']=z1_diff


Calculated_Data['x_mid_diff']=x2_diff
Calculated_Data['y_mid_diff']=y2_diff
Calculated_Data['z_mid_diff']=z2_diff


Calculated_Data['x_end_diff']=x3_diff
Calculated_Data['y_end_diff']=y3_diff
Calculated_Data['z_end_diff']=z3_diff


#Calculated_Data['Diff_2']=Diff_2
#Calculated_Data['Diff_3']=Diff_3
del Calculated_Data['Unnamed: 15']
Calculated_Data.to_csv ('Litho_Direct_diff_with_leapfrog.csv', index = False, header=True)



        
ymt								mid_y
6710233.553                   
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6709778.581
6709772.046
6709761.654
6709750.209
6709736.042
6709723.526
6709713.402
6709701.705
6709688.814
6709667.932
6709639.195
6709595.243

6710233.553  
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6710233.553
6709777.765
6709768.696
6709757.801
6709745.697
6709730.995
6709718.355
6709708.048
6709696.289
6709683.281
6709662.342
6709633.461
6709589.484




CollarID	Depth	Azimuth	Dip
1111	0	270	-45
1111	100	270	-50
1111	200	270	-55
1111	300	270	-60
1111	400	270	-65
2222	0	270	-90
2222	150	180	-80
2222	300	170	-70
2222	350	160	-60
2222	400	150	-50
2222	500	140	-40

leapfrog
CollarID	FromDepth	ToDepth	Lithology	start_x	start_y	start_z	mid_x	mid_y	mid_z	end_x	end_y	end_z
Test_2	0	75	Rock1	516438.3481	6709779.399	300	516438.3481	6709778.581	262.511898	516438.3481	6709776.129	225.0951567
Test_2	75	150	Rock1	516438.3481	6709776.129	225.0951567	516438.3481	6709772.046	187.821001	516438.3481	6709766.342	150.7603845
Test_2	150	200	Rock1	516438.3481	6709766.342	150.7603845	516438.4725	6709761.654	126.205163	516438.8456	6709756.275	101.794542
Test_2	200	250	Rock1	516438.8456	6709756.275	101.794542	516439.4669	6709750.209	77.55040533	516440.3361	6709743.463	53.49448731
Test_2	250	300	Rock2	516440.3361	6709743.463	53.49448731	516441.4523	6709736.042	29.6483537	516442.8145	6709727.954	6.033382136
Test_2	300	325	Rock2	516442.8145	6709727.954	6.033382136	516443.7336	6709723.526	-5.618910717	516445.0049	6709718.672	-17.06622114
Test_2	325	350	Rock3	516445.0049	6709718.672	-17.06622114	516446.6255	6709713.402	-28.2830217	516448.5917	6709707.727	-39.24429898
Test_2	350	375	Rock3	516448.5917	6709707.727	-39.24429898	516450.9703	6709701.705	-49.93517554	516453.8268	6709695.395	-60.33934241
Test_2	375	400	Rock4	516453.8268	6709695.395	-60.33934241	516457.1539	6709688.814	-70.43060937	516460.9433	6709681.977	-80.18357388
Test_2	400	450	Rock4	516460.9433	6709681.977	-80.18357388	516469.5356	6709667.932	-98.99226002	516479.2261	6709653.658	-117.0807586
Test_2	450	500	Rock4	516479.2261	6709653.658	-117.0807586	516489.9872	6709639.195	-134.397622	516501.7882	6709624.585	-150.8935971
Test_2	500	600	Rock4	516501.7882	6709624.585	-150.8935971	516526.4084	6709595.243	-183.0329776	516551.0286	6709565.902	-215.1723581
Test_1	0	50	Rock1	516535.717	6710233.553	350	516518.2336	6710233.553	332.1309069	516501.1441	6710233.553	313.884667
Test_1	50	100	Rock1	516501.1441	6710233.553	313.884667	516484.4567	6710233.553	295.2699644	516468.1794	6710233.553	276.2956586
Test_1	100	150	Rock1	516468.1794	6710233.553	276.2956586	516452.3199	6710233.553	256.9707805	516436.8857	6710233.553	237.3045277
Test_1	150	200	Rock1	516436.8857	6710233.553	237.3045277	516421.8842	6710233.553	217.3062602	516407.3226	6710233.553	196.9854961
Test_1	200	250	Rock2	516407.3226	6710233.553	196.9854961	516393.2077	6710233.553	176.351907	516379.5463	6710233.553	155.4153133
Test_1	250	300	Rock2	516379.5463	6710233.553	155.4153133	516366.3448	6710233.553	134.1856798	516353.6097	6710233.553	112.6731106
Test_1	300	350	Rock3	516353.6097	6710233.553	112.6731106	516341.3468	6710233.553	90.8878445	516329.5621	6710233.553	68.84025015
Test_1	350	400	Rock3	516329.5621	6710233.553	68.84025015	516318.2612	6710233.553	46.54082098	516307.4495	6710233.553	24.00017032
Test_1	400	425	Rock4	516307.4495	6710233.553	24.00017032	516302.1667	6710233.553	12.67132298	516296.884	6710233.553	1.342475641
Test_1	425	450	Rock4	516296.884	6710233.553	1.342475641	516291.6013	6710233.553	-9.986371697	516286.3185	6710233.553	-21.31521904
Test_1	450	500	Rock4	516286.3185	6710233.553	-21.31521904	516275.7531	6710233.553	-43.97291371	516265.1876	6710233.553	-66.63060839



CollarID	HoleId	Longitude	Latitude	RL	MaxDepth	X	Y
1111	Test_1	117.171	-29.738	350	500	516535.717	6710233.553
2222	Test_2	117.17	-29.7421	300	600	516438.3481	6709779.399

--------------------------
import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math
from collections import Counter
import datetime
import pandas as pd
import numpy as np
from math import acos, cos, asin, sin, atan2, tan, radians


def dsmincurb (len12,azm1,dip1,azm2,dip2):
    #DEG2RAD = 3.141592654/180.0
    #i1 = (90 - float(dip1)) * DEG2RAD
    i1 = np.deg2rad(90 - float(dip1))
    #a1 = float(azm1) * DEG2RAD
    a1 = np.deg2rad(float(azm1))
    #i2 = (90 - float(dip2)) * DEG2RAD
    i2 = np.deg2rad(90 - float(dip2))
    #a2 = float(azm2) * DEG2RAD
    a2 = np.deg2rad(float(azm2))  #DEG2RAD
	
    #Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
    dl = acos(cos(float(i2)-float(i1))-(sin(float(i1))*sin(float(i2))*(1-cos(float(a2)-float(a1)))))
    if dl!=0.:
        rf = 2*tan(dl/2)/dl  # minimum curvature
    else:
        rf=1				 # balanced tangential
    dz = 0.5*len12*(cos(float(i1))+cos(float(i2)))*rf
    dn = 0.5*len12*(sin(float(i1))*cos(float(a1))+sin(float(i2))*cos(float(a2)))*rf
    de = 0.5*len12*(sin(float(i1))*sin(float(a1))+sin(float(i2))*sin(float(a2)))*rf
    return dz,dn,de
	#modified from pygslib

def interp_ang1D(azm1,dip1,azm2,dip2,len12,d1):
    # convert angles to coordinates
    x1,y1,z1 = ang2cart(azm1,dip1)
    x2,y2,z2 = ang2cart(azm2,dip2)

    # interpolate x,y,z
    x = x2*d1/len12 + x1*(len12-d1)/len12
    y = y2*d1/len12 + y1*(len12-d1)/len12
    z = z2*d1/len12 + z1*(len12-d1)/len12

    # get back the results as angles
    azm,dip = cart2ang(x,y,z)
    return azm, dip
    #modified from pygslib
	
def ang2cart(azm, dip):
    #DEG2RAD=3.141592654/180.0
    # convert degree to rad and correct sign of dip
    #razm = float(azm) * float(DEG2RAD)
    razm =  float(np.deg2rad(float(azm)))
    #rdip = -(float(dip)) * float(DEG2RAD)
    rdip =  float(np.deg2rad(-float(dip)))

    # do the conversion
    x = sin(razm) * cos(rdip)
    y = cos(razm) * cos(rdip)
    z = sin(rdip)
    return x,y,z
    #modified from pygslib
	
def cart2ang(x,y,z):
    if x>1.: x=1.
    if x<-1.: x=-1.
    if y>1.: y=1.
    if y<-1.: y=-1.
    if z>1.: z=1.
    if z<-1.: z=-1.
    #RAD2DEG=180.0/3.141592654
    #pi = 3.141592654
    azm= float(atan2(x,y))
    if azm<0.:
        #azm= azm + pi*2
        azm= azm + math.pi*2
    #azm = float(azm) * float(RAD2DEG)
    azm =float(np.rad2deg(float(azm)))
    #dip = -(float(asin(z))) * float(RAD2DEG)
    dip =-float(np.rad2deg(float(asin(z))))
    return azm, dip
    #modified from pygslib
	
def angleson1dh(indbs,indes,ats,azs,dips,lpt):
    for i in range (indbs,indes):
        a=ats[i]
        b=ats[i+1]
        azm1 = azs[i]
        dip1 = dips[i]
        azm2 = azs[i+1]
        dip2 = dips[i+1]
        len12 = ats[i+1]-ats[i]
        if lpt>=a and lpt<b:
            d1= lpt- a
            azt,dipt = interp_ang1D(azm1,dip1,azm2,dip2,len12,d1)
            return azt, dipt
    a=ats[indes]
    azt = azs[indes]
    dipt = dips[indes]
    if float(lpt)>=float(a):
        return   azt, dipt
    else:
        return   np.nan, np.nan

def convert_lithology():
    print("--------start of convert Lithology -----------")
    collar= pd.read_csv('DB_Collar_Export.csv',encoding = "ISO-8859-1", dtype='object')
    survey= pd.read_csv('DB_Survey_Export_9.csv',encoding = "ISO-8859-1", dtype='object')
    litho= pd.read_csv('Upscaled_Litho.csv',encoding = "ISO-8859-1", dtype='object')
    
    collar.CollarID = collar.CollarID.astype(str)
    survey.CollarID = survey.CollarID.astype(str)
    survey.Depth = survey.Depth.astype(float)
    litho.CollarID = litho.CollarID.astype(str)
    litho.Fromdepth = litho.Fromdepth.astype(float)

    collar.sort_values(['CollarID'], inplace=True)
    survey.sort_values(['CollarID', 'Depth'], inplace=True)
    litho.sort_values(['CollarID', 'Fromdepth'], inplace=True)

    idc =collar['CollarID'].values
    xc = collar['X'].values
    yc = collar['Y'].values
    zc = collar['RL'].values
    ids = survey['CollarID'].values
    ats = survey['Depth'].values
    azs = survey['Azimuth'].values
    dips = survey['Dip'].values
    idt =litho['CollarID'].values
    fromt = litho['Fromdepth'].values
    tot = litho['Todepth'].values
    cetlit=litho['CET_Lithology'].values

    nc= idc.shape[0]
    ns= ids.shape[0]
    nt= idt.shape[0]

    azmt = np.empty([nt], dtype=float)
    dipmt = np.empty([nt], dtype=float)
    xmt = np.empty([nt], dtype=float)
    ymt = np.empty([nt], dtype=float)
    zmt = np.empty([nt], dtype=float)
    azbt = np.empty([nt], dtype=float)
    dipbt = np.empty([nt], dtype=float)
    xbt = np.empty([nt], dtype=float)
    ybt = np.empty([nt], dtype=float)
    zbt = np.empty([nt], dtype=float)
    azet = np.empty([nt], dtype=float)
    dipet = np.empty([nt], dtype=float)
    xet = np.empty([nt], dtype=float)
    yet = np.empty([nt], dtype=float)
    zet = np.empty([nt], dtype=float)

    azmt[:] = np.nan
    dipmt[:] = np.nan
    azbt [:]= np.nan
    dipbt [:]= np.nan
    azet[:] = np.nan
    dipet[:] = np.nan
    xmt[:] = np.nan
    ymt [:]= np.nan
    zmt [:]= np.nan
    xbt[:] = np.nan
    ybt[:] = np.nan
    zbt[:] = np.nan
    xet[:] = np.nan
    yet[:] = np.nan
    zet [:]= np.nan

    fieldnames=['CollarID','FromDepth','ToDepth','Lithology','xbt','ybt','zbt','xmt','ymt', 'zmt', 'xet','yet','zet','azbt','dipbt']
    out= open('DB_Lithology_Export_Calc.csv', "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')

    indbt = 0
    indet = 0
    inds = 0
    indt = 0
    for jc in range(nc):
        indbs = -1
        indes = -1
        for js in range(inds, ns):
            if idc[jc]==ids[js]:
                inds = js
                indbs = js
                break
        for js in range(inds, ns):
            if idc[jc]!=ids[js]:
                break
            else:
                inds = js
                indes = js
        
        if indbs==-1 or indes==-1:
            continue

        azm1  = azs[indbs]
        dip1 = dips[indbs]
        at = 0.
        
        if indbs==indes:
            continue
            
        x =  xc[jc]
        y =  yc[jc]
        z =  zc[jc]

        for jt in range(indt, nt):
            #if(idc[jc]!=idt[jt]):
                #break
            if idc[jc]==idt[jt]:
                indt = jt
                #from
                azm2,dip2 = angleson1dh(indbs,indes,ats,azs,dips,fromt[jt])
                azbt[jt] = azm2
                dipbt[jt] = dip2
                len12 = float(fromt[jt]) - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xbt[jt] = de
                ybt[jt] = dn
                zbt[jt] = dz

                 #update
                azm1 = azm2
                dip1 = dip2
                at   = float(fromt[jt])
                #print(azm1,"\t",dip1,"\t",at)

                #midpoint
                mid = float(fromt[jt]) + float((float(tot[jt])-float(fromt[jt]))/2)
                azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,mid)
                azmt[jt] = azm2
                dipmt[jt]= dip2
                len12 = mid - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xmt[jt] = de + xbt[jt]
                ymt[jt] = dn + ybt[jt]
                zmt[jt] = dz + zbt[jt]

                #update
                azm1 = azm2
                dip1 = dip2
                at   = mid
                #print(azm1,"\t",dip1,"\t",at)

                #to
                azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,float(tot[jt]))
                azet[jt] = azm2
                dipet[jt] = dip2
                len12 = float(tot[jt]) - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xet[jt] = de + xmt[jt]
                yet[jt] = dn + ymt[jt]
                zet[jt] = dz + zmt[jt]

                #update
                azm1 = azm2
                dip1 = dip2
                at   = float(tot[jt])
                #print(azm1,"\t",dip1,"\t",at)

                #calculate coordinates
                xbt[jt] = float(x)+float(xbt[jt])
                ybt[jt] = float(y)+float(ybt[jt])
                zbt[jt] = float(z)+float(zbt[jt])
                xmt[jt] = float(x)+float(xmt[jt])
                ymt[jt] = float(y)+float(ymt[jt])
                zmt[jt] = float(z)+float(zmt[jt])
                xet[jt] = float(x)+float(xet[jt])
                yet[jt] = float(y)+float(yet[jt])
                zet[jt] = float(z)+float(zet[jt])

                # update for next interval
                x = xet[jt]
                y = yet[jt]
                z = zet[jt]

                out.write('%s,' %idt[jt])
                out.write('%s,' %fromt[jt])
                out.write('%s,' %tot[jt])
                out.write('%s,' %cetlit[jt])
                out.write('%s,' %xbt[jt])
                out.write('%s,' %ybt[jt])
                out.write('%s,' %zbt[jt])
                out.write('%s,' %xmt[jt])
                out.write('%s,' %ymt[jt])
                out.write('%s,' %zmt[jt])
                out.write('%s,' %xet[jt])
                out.write('%s,' %yet[jt])
                out.write('%s,' %zet[jt])
                out.write('%s,' %azbt[jt])
                out.write('%s,' %dipbt[jt])
                #out.write('%s,' %azmt[jt])
                #out.write('%s,' %dipmt[jt])
                #out.write('%s,' %azet[jt])
                #out.write('%s,' %dipet[jt])
                out.write('\n')
    out.close()






if(float(tot[jt]) in Depth_survey ['Depth']  & float(tot[jt]) > Depth_survey [survey_ind+1]):
                   loc = np.where(Depth_survey [survey_ind] ==tot[jt])
                   while(float(tot[jt]) != Depth_survey [survey_ind] ):
                       fromt[jt] = Depth_survey [survey_ind]
                       tot[jt] = Depth_survey [survey_ind + 1]
                       calculate_x_y_z()
                       survey_ind = survey_ind +1

                   print_xyz_csv()

                   

                elif(float(tot[jt]) not in Depth_survey ['Depth'] & float(tot[jt]) > max(Depth_survey)) :
                    while(survey_ind <  survey_sub_cnt):
                       fromt[jt] = Depth_survey [survey_ind]
                       tot[jt] = Depth_survey [survey_ind + 1]
                       calculate_x_y_z()
                       survey_ind = survey_ind +1

                    print_xyz_csv()   #chk from to interval in csv


                elif(float(tot[jt]) < Depth_survey [survey_ind+1]) :
                    calculate_x_y_z()
                    print_xyz_csv()





 while (start_pos < end_pos):
                        print(survey_ind)
                        #print(Depth_survey [survey_ind])
                        fromt[jt] = Depth_survey [survey_ind]
                        print(fromt[jt])
                        tot[jt] = Depth_survey [survey_ind + 1]
                        print(tot[jt])
                        calculate_x_y_z()
                        #print_xyz_csv()
                        survey_ind = survey_ind +1
                        start_pos= start_pos-1






















Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)

-----------------------
-------------------
working notebook calls
------------------
Start_Time = datetime.datetime.now()
dh2l_db.collar_attr_col_dic()
dh2l_db.collar_collar_attri_Final(DB_Collar_Export,src_csr,dst_csr,minlong,maxlong,minlat,maxlat)
End_Time = datetime.datetime.now()
print("Time taken in Hour_Min_Sec_MilliSec is:", End_Time-Start_Time)
----------
Start_Time = datetime.datetime.now()
dh2l_db.Attr_col_dic()
dh2l_db.Survey_Final(DB_Survey_Export,minlong,maxlong,minlat,maxlat)
dh2l_db.convert_survey(DB_Collar_Export,DB_Survey_Export,DB_Survey_Export_Calc)
End_Time = datetime.datetime.now()
print("Time taken in Hour_Min_Sec_MilliSec is:", End_Time-Start_Time)
----------
Start_Time = datetime.datetime.now()
dh2l_db.Attr_Val_Dic()
dh2l_db.Litho_Dico()
dh2l_db.Clean_Up()
dh2l_db.Attr_val_With_fuzzy()
dh2l_db.Final_Lithology(DB_Lithology_Export,minlong,maxlong,minlat,maxlat)
dh2l_db.Upscale_lithology(DB_Lithology_Export,DB_Lithology_Upscaled_Export)
dh2l_db.Remove_duplicates_Litho(DB_Lithology_Upscaled_Export,Upscaled_Litho_NoDuplicates_Export)   # call if duplicate rows in lithology(multiple logging system)
#convert_lithology()
End_Time = datetime.datetime.now()
print("Time taken in Hour_Min_Sec_MilliSec is:", End_Time-Start_Time)
-------
config.py
#Extents to query 
#ranee
minlong=115.5
maxlong=118
minlat=-30.5
maxlat=-27.5

#fabilea
#minlong=121.2
#maxlong=122.89
#minlat=-21.04
#maxlat=-21.03


#src_pro,Dst_proj
src_csr = 4326 
dst_csr = 28350


#ExportFiles
export_path='../data/export_db/'
DB_Collar_Export=export_path+'DB_Collar_Export.csv'
DB_Survey_Export=export_path+'DB_Survey_Export.csv'
DB_Survey_Export_Calc=export_path+'DB_Survey_Export_Calc.csv'
CET_Litho=export_path+'CET_Litho.csv'
DB_Lithology_Export=export_path+'DB_Lithology_Export.csv'
DB_Lithology_Export_Backup=export_path+'DB_Lithology_Export_Backup.csv'
DB_Lithology_Upscaled=export_path+'DB_Lithology_Upscaled.csv'
DB_Lithology_Export_Calc=export_path+'DB_Lithology_Export_Calc.csv'
DB_Lithology_Export_VTK=export_path+'DB_Lithology_Export.vtp'

print('Default parameters loaded from DH2_LConfig.py:')
with open('../notebooks/DH2_LConfig.py', 'r') as myfile:
  data = myfile.read()
  print(data)
  myfile.close()
print('\nModify these parameters in the cell below')-----------------
---------------------
----------------
------code in notepad++import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math
import datetime
import pyproj
from pyproj import Proj, transform
import numpy as np
import pandas as pd
#import shapefile
import pyproj
import numpy as np
from pyproj import Transformer, transform
import os

Attr_col_collar_dic_list=[]



            
    
            
            
def collar_collar_attri_Final(DB_Collar_Export,src_csr,dst_csr,minlong,maxlong,minlat,maxlat):
  # print("-----start Final---")

   fieldnames=['CollarID','HoleId','Longitude','Latitude','RL','MaxDepth','X','Y']
   out= open(DB_Collar_Export, "w",encoding ="utf-8")
   for ele in fieldnames:
        out.write('%s,' %ele)
   out.write('\n')
   query =""" SELECT collar.id, replace(replace(collar.holeid, '\"', '_'), ',', '_') as holeid, 
		  collar.longitude, collar.latitude, collarattr.attributecolumn, collarattr.attributevalue 
		  FROM public.collar 
		  INNER JOIN collarattr 
		  ON collar.id = collarattr.collarid 
		  WHERE(longitude BETWEEN %s  AND %s AND latitude BETWEEN %s AND %s)
		  ORDER BY collarattr.collarid ASC """
   
 #WHERE(longitude BETWEEN (minlong = COALESCE(%f, minlong)  AND maxlong = COALESCE(%f, maxlong)) AND latitude BETWEEN (minlat = COALESCE(%f, minlat) AND maxlat = COALESCE(%f, maxlat)))
   conn = None
   Pre_id = 0
   Pre_hole_id = ''
   Pre_Longitude =0.0
   Pre_latitude = 0.0
   
   Cur_id = 0
   Cur_hole_id = ''
   Cur_Longitude =0.0
   Cur_latitude = 0.0
   
   list_rl= []
   list_maxdepth =[]
   RL =''
   Maxdepth =''
   write_to_csv = False
   x2=0.0
   y2=0.0
    #create tranformer object
   transformer = Transformer.from_crs(src_csr, dst_csr)
    
   
  
   
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)
      collar_collarAttr_Filter = [list(elem) for elem in cur]
      DicList_collar_collarattr = [list(elem) for elem in Attr_col_collar_dic_list]
      for collar_ele in collar_collarAttr_Filter:
         #if (collar_ele[0] == 305574):
            #print("its danger")
         for Dic_ele in DicList_collar_collarattr:
            if(collar_ele[4] == Dic_ele[0]):
               
               if(Dic_ele[1] == 'rl'):
                  #print("1")
                  if(Pre_id== collar_ele[0] or Pre_id ==0 or Cur_id ==collar_ele[0]):
                     #print("2")
                     list_rl.append(Parse_Num(collar_ele[5]))
                     Pre_id =collar_ele[0]
                     Pre_hole_id = collar_ele[1]
                     Pre_Longitude =collar_ele[2]
                     Pre_latitude = collar_ele[3]
          
                  else:
                     #chk large , with empty case, write old rec to file
                     #print("3")
                     if(len(list_rl)!=0):
                        #print("4")
                        RL = maximum(list_rl,'NAN')
                     else:
                        RL = maximum(list_rl,'NAN')
                        #RL = "NAN"
                     if(len(list_maxdepth)!=0):
                        #print("5")
                        Maxdepth = maximum(list_maxdepth,'NAN')
                     else:
                         Maxdepth = maximum(list_maxdepth,'NAN')
                         #Maxdepth ="NAN"
                         
                     write_to_csv = True
 
                     Cur_id =collar_ele[0]
                     Cur_hole_id = collar_ele[1]
                     Cur_Longitude =collar_ele[2]
                     Cur_latitude = collar_ele[3]

                     list_rl.clear()
                     list_maxdepth.clear()
                     
                     list_rl.append(Parse_Num(collar_ele[5]))
                     
             
               elif(Dic_ele[1]=='maxdepth'):
                  #print("7")
                  if(Pre_id== collar_ele[0] or Pre_id == 0 or Cur_id ==collar_ele[0] ):
                     if(collar_ele[5][0] == '-'):
                        #print("7")
                        list_maxdepth.append(Parse_Num(collar_ele[5])*-1)
                     else:
                        #print("8")
                        list_maxdepth.append(Parse_Num(collar_ele[5]))

                     Pre_id =collar_ele[0]
                     Pre_hole_id = collar_ele[1]
                     Pre_Longitude =collar_ele[2]
                     Pre_latitude = collar_ele[3]

               
                  else:
                     if(len(list_rl)!=0):
                        #print("4")
                        RL = maximum(list_rl,'NAN')
                     else:
                        RL = maximum(list_rl,'NAN')
                        #RL ="NAN"
                     if(len(list_maxdepth)!=0):
                        #print("5")
                        Maxdepth = maximum(list_maxdepth,'NAN')
                     else:
                         Maxdepth = maximum(list_maxdepth,'NAN')
                         #Maxdepth = "NAN"


                     write_to_csv = True  
        
                     Cur_id =collar_ele[0]
                     Cur_hole_id = collar_ele[1]
                     Cur_Longitude =collar_ele[2]
                     Cur_latitude = collar_ele[3]

                     list_maxdepth.clear()
                     list_rl.clear()
                     
                     list_maxdepth.append(Parse_Num(collar_ele[5]))
                     
        
         
         x2,y2=transformer.transform(Pre_latitude,Pre_Longitude) # tranform long,latt
         if(write_to_csv == True):
            out.write('%d,' %Pre_id)
            out.write('%s,' %Pre_hole_id)
            out.write('%f,' %Pre_Longitude)
            out.write('%f,' %Pre_latitude)
            out.write('%s,' %RL)
            out.write('%s,' %Maxdepth)
            out.write('%f,' %x2)
            out.write('%f,' %y2)
            out.write('\n')
            write_to_csv =False
            RL =''
            Maxdepth =''
            Pre_id = 0
            Cur_id = 0
          

         else:
            continue
          
   
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   #print("-----End Final---")




def Parse_Num(s1):
   s1=s1.lstrip()
   if re.match("^[-+]?[0-9]+$", s1):
      return(int(s1))
   elif re.match("[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?", s1):
      return(float(s1))
   elif s1.isalpha():
      return(None)



def maximum(iterable, default):
  #   '''Like max(), but returns a default value if xs is empty.'''
    try:
        return str(max(i for i in iterable if i is not None))
    except ValueError:
        return default





def collar_attr_col_dic():
   #print("------ dictionary----start")
   query =""" SELECT  rl_maxdepth_dic.attributecolumn,rl_maxdepth_dic.cet_attributecolumn  FROM rl_maxdepth_dic """
   conn = None
   
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      cur.execute(query)

      for rec in cur:
         Attr_col_collar_dic_list.append(rec)

   
      #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
      #with open('Dic_attr_col_collar.csv', 'w',encoding="utf-8") as f:
         #cur.copy_expert(outputquery, f)
      
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   #print("------ dictionary----End")
         









import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math
import datetime
import pandas as pd
from math import acos, cos, asin, sin, atan2, tan, radians

Attr_col_survey_dic_list=[]

def Survey_Final(DB_Survey_Export,minlong,maxlong,minlat,maxlat):
   #print("-----start Final---")
   fieldnames=['CollarID','Depth','Azimuth','Dip']
   out= open(DB_Survey_Export, "w",encoding ="utf-8")
   for ele in fieldnames:
        out.write('%s,' %ele)
   out.write('\n')
   query =""" select t1.collarid,t1.depth,t2.attributecolumn,t2.attributevalue 
		from public.dhsurvey t1
		inner join public.collar 
		on collar.id = t1.collarid
		inner join dhsurveyattr t2
		on t1.id = t2.dhsurveyid
		where((collar.longitude BETWEEN %s AND %s) AND(collar.latitude BETWEEN %s AND %s) )
		order by collar.id ASC """
   conn = None
   AZI = 0.0
   AZI_list =0.0
   AZI_sub_list=[]
   AZI_DIP_LIST =[]
   AZI_ele = 0.0
   DIP = -90 #default Dip to -90
   Pre_id =0
   b_AZI =False
   b_DIP =False
   b_DEPTH =False
   back_survey_0 =0
   back_survey_1 = -1.1
   One_DIP=False
   One_AZI =False
   
   
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)
      Survey_First_Filter = [list(elem) for elem in cur]
      Survey_dic_list = [list(elem) for elem in Attr_col_survey_dic_list] 
      for survey_ele in Survey_First_Filter:
         for attr_col_ele in Survey_dic_list:
            if (survey_ele[2] == attr_col_ele[0])  :  #AZI or DIP
               if(Pre_id !=survey_ele[0]  and Pre_id !=0):
                  if(len(AZI_DIP_LIST)!=0):
                     AZI_DIP_Print=[]
                     list_AZI =[]
                     list_DIP =[]
                     if AZI_sub_list:
                        AZI_ele=max(AZI_sub_list)
                     if float(survey_ele[1]) < 0 :
                        survey_ele[1] = abs(survey_ele[1])

                     AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                        
                     #if Pre_id == 125476 :
                        #print("125476")
                        #print(AZI_DIP_LIST)


                     AZI_1 =0.0
                     AZI_2 =0.0
                     DIP_1 =0.0
                     DIP_2 =0.0
                     for loop1_ele in AZI_DIP_LIST:
                        for loop2_ele in AZI_DIP_LIST:
                           if(loop1_ele[0] == loop2_ele[0]):

                                 if abs(loop1_ele[1]) == abs(loop2_ele[1]) and abs(loop1_ele[2]) == abs(loop2_ele[2]):
                                    AZI_1=loop1_ele[1]
                                    DIP_1 = loop1_ele[2]
                                    
                                 elif abs(loop1_ele[1]) != abs(loop2_ele[1]) and abs(loop1_ele[2]) != abs(loop2_ele[2]):
                                    if abs(loop1_ele[1]) > abs(loop2_ele[1]):
                                       AZI_2 = loop1_ele[1]
                                     
                                    else:
                                       AZI_2 = loop2_ele[1]
                                     
                                    
                                    if abs(loop1_ele[2]) > abs(loop2_ele[2]):
                                       if(abs(loop1_ele[2]) ==90):  #default DIP bug solved
                                          DIP_2 = loop2_ele[2]
                                       else:
                                          DIP_2 = loop1_ele[2]
                                      
                                    else:
                                       if(abs(loop2_ele[2]) ==90): #default DIP bug solved
                                          DIP_2 = loop1_ele[2]
                                       else:
                                          DIP_2 = loop2_ele[2]

                                    #if(abs(loop1_ele[2]) ) == 90 :
                                       #DIP_2 = loop2_ele[2]
                                    #elif(abs(loop2_ele[2]) ) == 90 :
                                       #DIP_2 = loop1_ele[2] 
                                   

                                   
                        if abs(AZI_1) > abs(AZI_2):
                           AZI_ = AZI_1
                        else:
                            AZI_ = AZI_2

                        if abs(DIP_1) > abs(DIP_2):
                           if(abs(DIP_1 ) ==90): #default DIP bug solved
                              DIP_ = DIP_2
                           else:
                              DIP_ = DIP_1
                        else:
                           if(abs(DIP_2) ==90): #default DIP bug solved
                              DIP_ = DIP_1
                           else :
                              DIP_ = DIP_2

                            
                        
                        AZI_DIP_Print.append([loop1_ele[0],AZI_,DIP_])
                        AZI_1 =0.0
                        AZI_2 =0.0
                        DIP_1 =0.0
                        DIP_2 =0.0
                        AZI_= 0.0
                        DIP_ = 0.0
                           
   
                     #if Pre_id ==125476  :   #1914687
                        #print(AZI_DIP_Print)
                     
                     b_set = set(tuple(x) for x in AZI_DIP_Print)
                     AZI_DIP_Print_Filter = [ list(x) for x in b_set ]

                     #if Pre_id == 125476 :
                        #print(AZI_DIP_Print_Filter)

                     AZI_DIP_Print_Filter = dict((x[0], x) for x in AZI_DIP_Print_Filter).values()

                 

                     One_AZI= False

                     #if Pre_id == 117689:
                        #print(AZI_DIP_Print_Filter_ele[0])
                        #print(AZI_DIP_Print_Filter_ele[1])
                        #print(AZI_DIP_Print_Filter_ele[2])
                        #print(One_AZI)
                     #print(AZI_DIP_Print_Filter)
                     df = pd.DataFrame(AZI_DIP_Print_Filter,columns=['Depth','Azimuth','Dip'])
                     df.sort_values("Depth", axis = 0, ascending = True, inplace = True)
                     AZI_DIP_Print_Filter = df.values.tolist()
                     if(len(AZI_DIP_Print_Filter)!=0):
                        for AZI_DIP_Print_Filter_ele in AZI_DIP_Print_Filter:
        
                           out.write('%d,' %back_survey_0)
                           out.write('%d,' %AZI_DIP_Print_Filter_ele[0])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[1])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[2])
                           out.write('\n')
                           

                           #if Pre_id == 117689:
                              #print(AZI_DIP_Print_Filter_ele[0])
                             # print(AZI_DIP_Print_Filter_ele[1])
                              #print(AZI_DIP_Print_Filter_ele[2])
                             # print(One_AZI)
                     
                     AZI_DIP_Print.clear()
                     
                      
                  AZI_DIP_LIST.clear()
                  
                  if(One_AZI==True):
                     out.write('%d,' %back_survey_0)
                     out.write('%d,' %back_survey_1)
                     out.write('%f,' %AZI)
                     out.write('%f,' %DIP)
                     out.write('\n')
                  AZI =0.0
                  DIP =-90  #default Dip to -90
                  #One_DIP =False
                  One_AZI =False
                  AZI_sub_list.clear()
                  AZI_ele =0.0
 
                  back_survey_0 = 0
                  back_survey_1 = -1.1
                  Pre_id =0


                     
               if ('AZI' in attr_col_ele[1] and (Pre_id ==0 or Pre_id ==survey_ele[0])): # and back_survey_1 == survey_ele[1] ):   #AZI
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                  
                     if float((survey_ele[3]).replace('\'','').replace('>','').replace('<','').strip())  > 360:
                        
                        continue
                     else:
                     
                        if (back_survey_1 == survey_ele[1] or back_survey_1==-1.1 ):
                           AZI = float((survey_ele[3]).replace('\'','').strip().replace('<','').replace('>','').rstrip('\n\r'))
                        
                           AZI_sub_list.append(AZI)
                           
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                          
                           One_AZI =True
                           
                           
                        else:
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                          
                           if float(survey_ele[1]) < 0:
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                     
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           AZI=0.0
                           DIP=-90 #default Dip to -90
                           AZI = float((survey_ele[3]).replace('\'','').strip().rstrip('\n\r'))
                           AZI_sub_list.append(AZI)
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                           One_AZI =False
                           
                           
                           

               if ('DIP' in attr_col_ele[1] and (Pre_id ==survey_ele[0] or Pre_id ==0)) :   #DIP
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                     if float((survey_ele[3]).replace('\'','').replace('<','').strip())  > 90:  # combine al skip cases
                        continue
                     elif float((survey_ele[3]).replace('\'','').replace('<','').strip()) < 0 or float((survey_ele[3]).replace('\'','').replace('<','').strip()) == 0 :
                        if (back_survey_1 == survey_ele[1] or  back_survey_1==-1.1):
                           DIP= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                    
                        else:
                  
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                           if float(survey_ele[1]) < 0 :
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                    
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           DIP=-90  #default Dip to -90
                           AZI=0.0
                           DIP= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
        
                           
                        
                 
                        
               #if (Pre_id ==survey_ele[0] or Pre_id ==0):  # depth # chk all corrections
                  #Pre_id = survey_ele[0]
                  #if float(survey_ele[1])
                    # survey_ele[1] = abs(survey_ele[1])
                  #b_DEPTH =True
                 # back_survey_0 =survey_ele[0]
                 # back_survey_1 = survey_ele[1]
                  
                  
   
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   #print("-----End Final---")




def Attr_col_dic():
   #print("------ dictionary----start")
   query =""" SELECT * FROM public.survey_dic """
   conn = None
   temp_list =[]
   try:
      conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
      cur = conn.cursor()
      cur.execute(query)

      for rec in cur:
         Attr_col_survey_dic_list.append(rec)

         
      #Attr_col_survey_dic_list = [list(elem) for elem in temp_list]

      #for ele in Attr_col_survey_dic_list:
         #print(ele)
         #Attr_col_survey_dic_list.append(record)

      outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
      with open('Dic_attr_col_survey.csv', 'w') as f:
         cur.copy_expert(outputquery, f)
      
 
          
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   #print("------ dictionary----End")
         




def count_Digit(n):
    if n > 0:
        digits = int(math.log10(n))+1
    elif n == 0:
        digits = 1
    else:
        digits = int(math.log10(-n))+1 # +1 if you don't count the '-'
  
    return digits


def convert_survey(DB_Collar_Export,DB_Survey_Export,DB_Survey_Export_Calc):
   location=pd.read_csv(DB_Collar_Export)
   survey=pd.read_csv(DB_Survey_Export)
   survey=pd.merge(survey,location, how='left', on='CollarID')

   fieldnames=['CollarID','Depth','Azimuth','Dip','X','Y','Z']
   out= open(DB_Survey_Export_Calc, "w",encoding ="utf-8")
   for ele in fieldnames:
      out.write('%s,' %ele)
   out.write('\n')
	
   last_CollarID= ''
   for index,row in survey.iterrows():
      if(row['CollarID'] != last_CollarID):
         X1=0.0
         Y1=0.0
         Z1=0.0
         last_Dip =0.0
         last_Azi =0.0
         last_Depth =0.0
         last_CollarID =0.0
         last_Dip=float(row['Dip'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
         last_CollarID=(row['CollarID'])
         X1=float(row['X'])
         Y1=float(row['Y'])
         Z1=float(row['RL'])
      
			
         out.write('%s,' %last_CollarID)
         out.write('%f,' %last_Depth)
         out.write('%f,' %last_Azi)
         out.write('%f,' %last_Dip)
         out.write('%f,' %X1)
         out.write('%f,' %Y1)
         out.write('%f,' %Z1)
         out.write('\n')
         
      else:
         #X2=0.0
         #Y2=0.0
         #Z2=0.0
         #len12 = float(row['Depth']) - last_Depth
         #X2,Y2,Z2=dsmincurb(len12,last_Azi,last_Dip,float(row['Azimuth']),float(row['Dip']))
         X2,Y2,Z2=dia2xyz(X1,Y1,Z1,last_Dip,last_Azi,last_Depth,float(row['Dip']),float(row['Azimuth']),float(row['Depth']))
         out.write('%s,' %last_CollarID)
         out.write('%f,' %float(row['Depth']))
         out.write('%f,' %float(row['Azimuth']))
         out.write('%f,' %float(row['Dip']))
         out.write('%f,' %X2)
         out.write('%f,' %Y2)
         out.write('%f,' %Z2)
         out.write('\n')
         X1=X2
         Y1=Y2
         Z1=Z2
         last_Dip=float(row['Dip'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
   out.close()




def dia2xyz(X1,Y1,Z1,I1,Az1,Distance1,I2,Az2,Distance2):
   I1=radians(I1)
   Az1=radians(Az1)
   I2=radians(I2)
   Az2=radians(Az2)
	
   MD = Distance2 - Distance1

   Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
   if(Beta==0):
      RF=1
   else:
      RF = 2 / Beta * tan(Beta / 2)

   dX = MD/2 * (sin(I1)*sin(Az1) + sin(I2)*sin(Az2))*RF
   dY = MD/2 * (sin(I1)*cos(Az1) + sin(I2)*cos(Az2))*RF
   dZ = MD/2 * (cos(I1) + cos(I2))*RF

   X2 = X1 + dX
   Y2 = Y1 + dY
   Z2 = Z1 - dZ
	
 
   return X2,Y2,Z2











import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math
from collections import Counter
import datetime
import pandas as pd
import numpy as np
from math import acos, cos, asin, sin, atan2, tan, radians
import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
from nltk.corpus import stopwords


#First_Filter_list=[['11410',3118047,169.7,169.9,'Lithology','GR'],['11410',3118060,22,23,'Lithology','CL']]
First_Filter_list=[]
Attr_col_list=[]
Litho_dico=[]
cleanup_dic_list=[]
Att_col_List_copy_tuple=[]
Attr_val_Dic=[]
Attr_val_fuzzy=[]


#print("------------------start Dic_Attr_Col------------")
def Attr_COl():
    query = """SELECT * FROM public.dic_att_col_lithology_1"""
    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    for record in cur:
        #print(record)
        Attr_col_list.append(record)
    outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
    with open('Dic_attr_col.csv', 'w') as f:
        cur.copy_expert(outputquery, f)
    

    cur.close()
    conn.close()

    #print("------------------end Dic_Attr_Col------------")




#print("------------------start Dic_Attr_val------------")
def Attr_Val_Dic():
    query = """SELECT * FROM public.dic_attr_val_lithology_filter"""
    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    for record in cur:
        #print(record)
        Attr_val_Dic.append(record)
    outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
    with open('Dic_attr_val.csv', 'w') as f:
        cur.copy_expert(outputquery, f)
    

    cur.close()
    conn.close()

    #print("------------------end Dic_Attr_val------------")


   



def Litho_Dico():
    #print("------------------Start Litho_Dico------------")
    query = """SELECT litho_dic_1.clean  FROM litho_dic_1"""
    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    #print(cur)
    for record in cur:
        #print(record)
        Litho_dico.append(record)
        #print(Litho_dico)
    #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
       
    #with open('Dic_litho.csv', 'w') as f:
        #cur.copy_expert(outputquery, f)
        
    #print(Litho_dico)
    cur.close()
    conn.close()
    #print("------------------end Litho_Dico------------")


    
    

def Clean_Up():
    #print("------------------start Clean_Up_Dico------------")


    query = """SELECT cleanup_lithology.clean  FROM cleanup_lithology"""
    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    for record in cur:
        #print(record)
        cleanup_dic_list.append(record)
    #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
       
    #with open('cleanup_dic.csv', 'w',encoding="utf-8") as f:
        #cur.copy_expert(outputquery, f)
        

    cur.close()
    conn.close()

    #print("------------------End Clean_Up_Dico------------")

  



def First_Filter():
    print("------------------start First_Filter------------")
    start = time.time()
    #out= open("DB_lithology_First1.csv", "w",encoding ="utf-8")
    query = """select t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn, t1.attributevalue 
    from public.dhgeologyattr t1 
    inner join public.dhgeology t2 
    on t1.dhgeologyid = t2.id 
    inner join collar t3 
    on t3.id = t2.collarid 
    inner join clbody t4 
    on t4.companyid = t3.companyid 
    WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN - 30.5 AND - 27.5) 
    ORDER BY t3.companyid ASC"""


    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    a_list = [list(elem) for elem in cur]
    for row in a_list:
        att_val=row[4]
        for att_col_ele in Attr_col_list:
            dic_att_col=str(att_col_ele).replace('(','').replace(')','').replace(',','').replace('\'','')
            
            if att_val == dic_att_col :
                from_depth = row[2]                
                to_depth = row[3]
                if from_depth is not None and to_depth is not None:
                    if to_depth>from_depth:
                        First_Filter_list.append(row)
                        #print(row)
                    elif from_depth == to_depth:
                        to_depth = to_depth+0.01
                        row[3]=to_depth
                        First_Filter_list.append(row)
                        #print(row)
                    elif from_depth >to_depth:   
                        row[2]=to_depth       
                        row[3]=from_depth
                        First_Filter_list.append(row)
                        #print(row)
                 
                    #for column in row:
                        #out.write('%s,' %column)
                    #out.write('\n')
                   
                    
   

    cur.close()
    conn.close()
    out.close() 
    end = time.time()
    print(end - start)
    print("------------------End First_Filter------------")




def clean_text(text):
    text=text.lower().replace('unnamed','').replace('meta','').replace('meta-','').replace('undifferentiated ','').replace('unclassified ','')
    text=text.replace('differentiated','').replace('undiff','').replace('undiferentiated','').replace('undifferntiates','')
    text=(re.sub('\(.*\)', '', text)) # removes text in parentheses
    text=(re.sub('\[.*\]', '', text)) # removes text in parentheses
    text=text.replace('>','').replace('?','').replace('/',' ') 
    text = text.replace('>' , ' ')
    text = text.replace('<', ' ')
    text = text.replace('/', ' ')
    text = text.replace(' \' ', ' ')
    text = text.replace(',', ' ')
    text = text.replace('%', ' ')
    text = text.replace('-', ' ')
    text = text.replace('_', ' ')
    #text = text.replace('', ' ')
    #text = text.replace('+', '')
    text = text.replace('\'', ' ') 
    if text.isnumeric():
        text = re.sub('\d', ' ', text) #replace numbers
    text = text.replace('&' , ' ')
    text = text.replace(',', ' ')
    text = text.replace('.', ' ')
    text = text.replace(':', ' ')
    text = text.replace(';', ' ')
    text = text.replace('$', ' ')
    text = text.replace('@', ' ')
    text = text.replace('\'', '')
    text = text.replace('\\', '')                        
	
    for cleanup_dic_ele in cleanup_dic_list:
        cleaned_item =str(cleanup_dic_ele).replace('(','').replace(')','').replace(',','').replace('\'','')
        text = text.replace('cleaned_item','')
    return text








#Final File
def Final_Lithology_old():
    print("--------start of Final -----------")
    bestmatch=-1
    bestlitho=''
    top=[]
    p = re.compile(r'[- _]')
    fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode','Company_Lithology','CET_Lithology','Score']
    out= open("DB_lithology_Final.csv", "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    query = '''SELECT dic_attr_val_lithology_filter.company_id,dic_attr_val_lithology_filter.company_code,replace(dic_attr_val_lithology_filter.comapany_litho, ',' , '_') as comapany_litho  FROM dic_attr_val_lithology_filter'''
    conn = psycopg2.connect(host='130.95.198.59', port = 5432, database='gswa_dh', user='postgres', password='loopie123pgpw')
    cur = conn.cursor()
    cur.execute(query)
    a_list = [list(elem) for elem in cur]
    for row in a_list:    
        for First_filter_ele in First_Filter_list:
            #ele_0 = str(First_filter_ele[0]).replace('(','').replace(')','').replace(',','').replace('\'','')    
            #ele_5 = str(First_filter_ele[5]).replace('(','').replace(')','').replace(',','').replace('\'','')
            
            company_code = row[1]
            company_litho = row[2]
            #print(row[0])
            #print( First_filter_ele[0])
            #print(row[1])
            #print( First_filter_ele[5])
            if int(row[0]) == First_filter_ele[0] and  row[1] == First_filter_ele[5]:
                #del First_filter_ele[4]
                #del First_filter_ele[4]
                cleaned_text=clean_text(row[2])
                #print(cleaned_text)
                words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
                words=words.split(" ")
                last=len(words)-1 #position of last word in phrase
                
                for Litho_dico_ele in Litho_dico:              
                    #litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').split(" ")
                    litho_words=re.split(p, str(Litho_dico_ele))
                    scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
                    for sc in scores:                        
                        if(sc[1]>bestmatch): #better than previous best match
                            bestmatch =  sc[1]
                            bestlitho=litho_words[0]
                            top=sc
                            if(sc[0]==words[last]): #bonus for being last word in phrase
                                bestmatch=bestmatch*1.01
                        elif (sc[1]==bestmatch): #equal to previous best match
                            if(sc[0]==words[last]): #bonus for being last word in phrase
                                bestlitho=litho_words[0]
                                bestmatch=bestmatch*1.01
                            else:
                                top=top+sc

                #top = [list(elem) for elem in top]
                top_new = list(top)
                if top_new[1] >80:
                    #del First_filter_ele[4]
                    #del First_filter_ele[4]
                    #for column in First_filter_ele:
                    out.write('%s,' %First_filter_ele[0])
                    out.write('%s,' %First_filter_ele[1])
                    out.write('%s,' %(First_filter_ele[2]).replace(',' ,' '))
                    out.write('%s,' %First_filter_ele[3])
                    out.write('%s,' %row[1])
                    out.write('%s,' %row[2])
                    CET_Litho = str(top_new[0]).replace('(','').replace(')','').replace('\'','').replace(',','')
                    CET_Litho = CET_Litho.replace(',', ' ')
                    out.write('%s,' %CET_Litho)
                    out.write('%d,' %top_new[1])
                    out.write('\n')
                    #top.clear()
                    top_new[:] =[]
                    CET_Litho=''
                    bestmatch=-1
                    bestlitho=''
                else:
                    #del First_filter_ele[4]
                    #del First_filter_ele[4]
                    #for column in First_filter_ele:
                    out.write('%s,' %First_filter_ele[0])
                    out.write('%s,' %First_filter_ele[1])
                    out.write('%s,' %(First_filter_ele[2]).replace(',' ,' '))
                    out.write('%s,' %First_filter_ele[3])
                    out.write('%s,' %row[1])
                    out.write('%s,' %row[2])
                    out.write('Other,')
                    out.write('%d,' %top_new[1])
                    out.write('\n')
                    #top.clear()
                    top_new[:] =[]
                    CET_Litho=''
                    bestmatch=-1
                    bestlitho=''

    cur.close()
    conn.close()
    out.close()
    print("--------End of Final-----------")



#labelEncoder = LabelEncoder()
#one_enc = OneHotEncoder()
lemma = nltk.WordNetLemmatizer()

extra_stopwords = [
    'also',
]
stop = stopwords.words('english') + extra_stopwords


def tokenize(text, min_len=1):
    '''Function that tokenize a set of strings
    Input:
        -text: set of strings
        -min_len: tokens length
    Output:
        -list containing set of tokens'''

    tokens = [word.lower() for sent in nltk.sent_tokenize(text)
              for word in nltk.word_tokenize(sent)]
    filtered_tokens = []

    for token in tokens:
        if token.isalpha() and len(token) >= min_len:
            filtered_tokens.append(token)

    return [x.lower() for x in filtered_tokens if x not in stop]


def tokenize_and_lemma(text, min_len=0):
    '''Function that retrieves lemmatised tokens
    Inputs:
        -text: set of strings
        -min_len: length of text
    Outputs:
        -list containing lemmatised tokens'''
    filtered_tokens = tokenize(text, min_len=min_len)

    lemmas = [lemma.lemmatize(t) for t in filtered_tokens]
    return lemmas




    



def Attr_val_With_fuzzy():
    #print("--------start of Attr_val_fuzzy-----------")
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    attr_val_sub_list=[]
    #p = re.compile(r'[' ']')
    fieldnames=['CollarID','code','Attr_val','cleaned_text','Fuzzy_wuzzy','Score']
    out= open("Attr_val_fuzzy.csv", "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    Attr_val_Dic_new = [list(elem) for elem in Attr_val_Dic]
    for Attr_val_Dic_ele in Attr_val_Dic_new:
        

       # Attr_val_Dic_ele[2] = Attr_val_Dic_ele[2].replace('\'','').replace('-','').replace('/','')
       # cleaned_text_1=tokenize_and_lemma(Attr_val_Dic_ele[2])  #tokenize
       # print(cleaned_text_1)
       # cleaned_text_2=" ".join(str(x) for x in cleaned_text_1)  #convert to string from list
       # print(cleaned_text_2)
       # cleaned_text=clean_text(cleaned_text_2)   #tokenize

        cleaned_text_1=clean_text(Attr_val_Dic_ele[2])
        cleaned_text_1=tokenize_and_lemma(cleaned_text_1)
        cleaned_text=" ".join(str(x) for x in cleaned_text_1)

        #cleaned_text=clean_text(Attr_val_Dic_ele[2])   # for testing purpose
        
        #if(cleaned_text =='granite'):
            #print(cleaned_text)
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        for Litho_dico_ele in Litho_dico:
            #print(Litho_dico)
        #litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').split(" ")
            #litho_words=re.split(" ", str(Litho_dico_ele))
            #litho_words=str(Litho_dico_ele).split(" ")
            litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")
            #print(litho_words)
            #if(litho_words == "alkali-feldspar-granite"):
                #print("Alkali-feldspar-granite")


            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    #print(bestmatch)
                    #print(bestlitho)
                    #top=sc
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                        #print("inside 1")
                        #print(sc[0])
                        #print(words[last])
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                        #print(bestlitho)
                        #print(bestmatch)
                        #print(words[last])
                    else:
                        #top=top+sc
                        top.append([sc[0],sc[1]])
        
        #print(top)
        #top_new = list(top)
        #top_new=[list(elem) for elem in top]
        #for i in range(len(top)):
            
        #print(top_new)
        i=0
        #print(" %s %d " %(top_new[0], top_new[1] ))

        
        #for top_new_ele in top:
            #if(top_new_ele[0].replace('(','').replace(')','').replace('\'','').replace(',','') == cleaned_text):
               # bestlitho = cleaned_text
               # bestmatch = 100
                
            
                
        
           
            
            
        if bestmatch >80:
            #CET_Litho = str(top_new[0]).replace('(','').replace(')','').replace('\'','').replace(',','')
            #print(CET_Litho)
            
            #attr_val_sub_list.append(Attr_val_Dic_ele[0])
            #attr_val_sub_list.append(Attr_val_Dic_ele[1])
            #attr_val_sub_list.append(Attr_val_Dic_ele[2])
            #attr_val_sub_list.append(bestlitho)
            #attr_val_sub_list.append(top_new[1])
            #Attr_val_fuzzy.append(attr_val_sub_list)

            Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            
            #attr_val_sub_list.clear()
            
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            #out.write('%d,' %top_new[1])
            out.write('%d,' %bestmatch)
            out.write('\n')
            #top_new[:] =[]
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
           
            
        else:
            #attr_val_sub_list.append(Attr_val_Dic_ele[0])
            #attr_val_sub_list.append(Attr_val_Dic_ele[1])
            #attr_val_sub_list.append(Attr_val_Dic_ele[2])
            #attr_val_sub_list.append('Other')
            #attr_val_sub_list.append(top_new[1])
            #Attr_val_fuzzy.append(attr_val_sub_list)
            #attr_val_sub_list.clear()


            Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,'Other',bestmatch])  #top_new[1]])
            
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('Other,')
            #out.write('%d,' %top_new[1])
            out.write('%d,' %bestmatch)
            out.write('\n')
            #top_new[:] =[]
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
            
            







    #print("--------End of Attr_val_fuzzy-----------")



def Depth_validation(row_2,row_3):
    from_depth = row_2               
    to_depth = row_3
    if (from_depth is not None and to_depth is not None) or  (from_depth is not None or to_depth is not None) :
        if(to_depth == 'NULL' or to_depth == None):
            to_depth = from_depth +0.1
            return from_depth,to_depth
        elif to_depth>from_depth:
            return row_2,row_3
        elif from_depth == to_depth:
            to_depth = to_depth+0.01
            row_3=to_depth
            return row_2,row_3
        elif from_depth >to_depth:
            row_2=to_depth       
            row_3=from_depth
            return row_2,row_3
        
            
            



def Final_Lithology(DB_Lithology_Export,minlong,maxlong,minlat,maxlat):
   # print("--------start of Final -----------")
    query = """select t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn, t1.attributevalue 
		 from public.dhgeologyattr t1 
		 inner join public.dhgeology t2 
		 on t1.dhgeologyid = t2.id 
		 inner join collar t3 
		 on t3.id = t2.collarid 
		 inner join clbody t4 
		 on t4.companyid = t3.companyid
		 inner join public.dic_att_col_lithology_1 t5
		 on t1.attributecolumn = t5.att_col
		 WHERE(t3.longitude BETWEEN %s AND %s) AND(t3.latitude BETWEEN %s AND %s) 
		 ORDER BY t3.companyid ASC"""


    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    #cur.execute(query)
    Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
    cur.execute(query,Bounds)
    First_Filter_list = [list(elem) for elem in cur]
    print("First Filter ready")
    fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode','Company_Lithology','CET_Lithology','Score']
    out= open(DB_Lithology_Export, "w",encoding ="utf-8")
    #out_first_filter= open("DB_lithology_First.csv", "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    #Attr_val_Dic_new = [list(elem) for elem in Attr_val_Dic]
    for First_filter_ele in First_Filter_list:
        for Attr_val_fuzzy_ele in Attr_val_fuzzy:
            if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                #print(Attr_val_fuzzy_ele[0],"\t",Attr_val_fuzzy_ele[1])
                #print(First_filter_ele[0],"\t",First_filter_ele[5])
                First_filter_ele[2],First_filter_ele[3] =Depth_validation(First_filter_ele[2],First_filter_ele[3])
                out.write('%d,' %First_filter_ele[0])
                out.write('%d,' %First_filter_ele[1])
                out.write('%d,' %First_filter_ele[2])
                out.write('%s,' %First_filter_ele[3])
                out.write('%s,' %Attr_val_fuzzy_ele[1])
                out.write('%s,' %Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',',''))
                out.write('%s,' %Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',',''))   #.replace(',' , ''))
                out.write('%d,' %int(Attr_val_fuzzy_ele[5]))
                out.write('\n')

    
        #for column in First_filter_ele:
            #out_first_filter.write('%s,' %column)
        #out_first_filter.write('\n')
        	
	
    print("--------End of Final -----------")


def Upscale_lithology(DB_Lithology_Export,DB_Lithology_Upscaled_Export):
    print("--------start of Upsacle -----------")
    Hierarchy_litho_dico_List =[]
    query = """ select * from public.hierarchy_dico """
    conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    cur = conn.cursor()
    cur.execute(query)
    Hierarchy_litho_dico_List  = [list(elem) for elem in cur]
    CET_hierarchy_dico = pd.DataFrame(Hierarchy_litho_dico_List,columns=['Level_3','Level_2','Level_1'])
    #CET_hierarchy_dico.to_csv ('CET_hierarchy_dico.csv', index = False, header=True)
    #print (CET_hierarchy_dico)
    DB_Lithology= pd.read_csv(DB_Lithology_Export,encoding = "ISO-8859-1", dtype='object')
    Upscaled_Litho=pd.merge(DB_Lithology, CET_hierarchy_dico, left_on='CET_Lithology', right_on='Level_3')
    Upscaled_Litho.sort_values("Company_ID", ascending = True, inplace = True)
    #Upscaled_Litho.drop(['Unnamed: 8'], axis=1)
    del Upscaled_Litho['Unnamed: 8']
    Upscaled_Litho.to_csv (DB_Lithology_Upscaled_Export, index = False, header=True)
    
    #Upscaled_Litho= Upscaled_Litho.loc[:, ~Upscaled_Litho.columns.str.contains('^Unnamed')]
    #Upscaled_Litho.reset_index(level=0, inplace=True)
    #Upscaled_Litho['CET_Litho']=Upscaled_Litho['index']
    #del Upscaled_Litho['index']
    #Upscaled_Litho.to_csv(DB_Lithology_Upscaled)
    print("--------End of Upsacle -----------")



def Remove_duplicates_Litho(DB_Lithology_Upscaled_Export,Upscaled_Litho_NoDuplicates_Export):
    Final_Data= pd.read_csv(DB_Lithology_Upscaled_Export)   
    Final_Data.CollarID = Final_Data.CollarID.astype(int)
    Final_Data.Fromdepth = Final_Data.Fromdepth.astype(float)
    Final_Data.Todepth = Final_Data.Todepth.astype(float)
    Final_Data.sort_values(['CollarID', 'Fromdepth','Todepth'], inplace=True)
    singles = Final_Data.drop_duplicates(subset=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode'],keep='first',inplace =False)   #,'Company_Lithology','CET_Lithology','Score'
    singles.to_csv(Upscaled_Litho_NoDuplicates_Export,index=False)



------------------------
----------------------code in xyz
----------------------
 while(survey_ind <  survey_sub_cnt-1):
                       #print(survey_ind)
                       #last_Litho_ToDepth = tot[jt]
                       #print(last_Litho_ToDepth)
                       #fromt[jt] = Depth_survey [survey_ind]
                       #print(fromt[jt])
                       #if(survey_ind < survey_sub_cnt-1):
                       if(survey_ind == survey_sub_cnt-2):
                           #print("inside")
                           print(survey_ind)
                           #print(survey_sub_cnt-2)
                           #print(last_Litho_ToDepth)
                           #tot[jt] = last_Litho_ToDepth

                           #if tmp_litho_sub_cnt == litho_sub_cnt :
                               #fromt[jt] = from_depth
                               #tot[jt] = to_depth
                               #calculate_x_y_z()
                               #break



                           
                           fromt[jt] = Depth_survey [survey_ind]
                           print(fromt[jt])
                           tot[jt] = to_depth
                           print(tot[jt])
                           calculate_x_y_z()
                           #survey_ind = survey_ind +1
                           break
                           #print_xyz_csv()
                           #survey_ind = survey_ind +1
                           
                       else:
                           print(survey_ind)
                           fromt[jt] = Depth_survey [survey_ind]
                           print(fromt[jt])
                           tot[jt] = Depth_survey [survey_ind + 1]
                           print(tot[jt])
                           calculate_x_y_z()
                           #print_xyz_csv()
                           survey_ind = survey_ind +1
                           #print(survey_ind)
























while(survey_ind <  survey_sub_cnt):
                       #print(survey_ind)
                       #last_Litho_ToDepth = tot[jt]
                       #print(last_Litho_ToDepth)
                       #fromt[jt] = Depth_survey [survey_ind]
                       #print(fromt[jt])
                       #if(survey_ind < survey_sub_cnt-1):
                       if(survey_ind == survey_sub_cnt-1):
                           #print("inside")
                           #print(survey_ind)
                           #print(survey_sub_cnt-2)
                           #print(last_Litho_ToDepth)
                           #tot[jt] = last_Litho_ToDepth

                           #if tmp_litho_sub_cnt == litho_sub_cnt :
                               #fromt[jt] = from_depth
                               #tot[jt] = to_depth
                               #calculate_x_y_z()
                               #break



                           
                           fromt[jt] = Depth_survey [survey_ind]
                           #print(fromt[jt])
                           tot[jt] = to_depth
                           #print(tot[jt])
                           calculate_x_y_z()
                           #survey_ind = survey_ind +1
                           break
                           #print_xyz_csv()
                           #survey_ind = survey_ind +1
                           
                       else:
                           #print(survey_ind)
                           fromt[jt] = Depth_survey [survey_ind]
                           #print(fromt[jt])
                           tot[jt] = Depth_survey [survey_ind + 1]
                           #print(tot[jt])
                           calculate_x_y_z()
                           #print_xyz_csv()
                           survey_ind = survey_ind +1
                           #print(survey_ind)


'''
    Function Extracts data from tables collar and collarattr for processing attributes RL and Maxdepth
    Inputs:
        - src_csr : Coordinate Reference System of source 4326
        - dst_csr : Coordinate Reference System of destination 28350 to 28356
        - minlong,maxlong,minlat,maxlat :  coordinates of region 
  
    Output: is a csv file ,the data processed for RL, Maxdepth attribute in required format  
        
    '''

-------------------------
-----------------

def Attr_val_With_fuzzy():
    '''
    Function gets the fuzzuwuzzy string of the lithology text .The lithology text is cleaned,lemmatised and tokenized.
    Input: Dictionaries Extracted
    Output: is a List and csv file of fuzzywuzzy with score for lithology.
    '''
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    attr_val_sub_list=[]
    #p = re.compile(r'[' ']')
    fieldnames=['CollarID','code','Attr_val','cleaned_text','Fuzzy_wuzzy','Score']
    out= open("Attr_val_fuzzy.csv", "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    Attr_val_Dic_new = [list(elem) for elem in Var.Attr_val_Dic]
    for Attr_val_Dic_ele in Attr_val_Dic_new:
        

       
        cleaned_text_1=clean_text(Attr_val_Dic_ele[2])
        cleaned_text_1=tokenize_and_lemma(cleaned_text_1)
        cleaned_text=" ".join(str(x) for x in cleaned_text_1)

        
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        for Litho_dico_ele in Var.Litho_dico:
            litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")
            
            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                        
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                        
                    else:
                        
                        top.append([sc[0],sc[1]])
        
        
            
        if bestmatch >80:
            
            Var.Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            
            #attr_val_sub_list.clear()
            
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            #out.write('%d,' %top_new[1])
            out.write('%d,' %bestmatch)
            out.write('\n')
            #top_new[:] =[]
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
           
            
        else:
            
            Var.Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,'Other',bestmatch])  #top_new[1]])
            
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('Other,')
            #out.write('%d,' %top_new[1])
            out.write('%d,' %bestmatch)
            out.write('\n')
            #top_new[:] =[]
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
            
			
			
			
			
			
			
			
			
			
			
			
			jupyter notebook --NotebookApp.iopub_data_rate_limit=1.0e10





def Upscale_lithology(DB_Lithology_Export,DB_Lithology_Upscaled_Export):
    '''
    Function upscales the CET_Loithology generated using the CET hierarchy dictionary to level1,level2,level3
    Input: 
        - DB_Lithology_Export csv file 
    Output:
        - is a csv file DB_Lithology_Upscaled_Export with upscales data 
    '''

    Hierarchy_litho_dico_List =[]
    query = """ select * from public.hierarchy_dico """
    #conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    cur.execute(query)
    Hierarchy_litho_dico_List  = [list(elem) for elem in cur]
    CET_hierarchy_dico = pd.DataFrame(Hierarchy_litho_dico_List,columns=['Level_3','Level_2','Level_1'])
    #CET_hierarchy_dico.to_csv ('CET_hierarchy_dico.csv', index = False, header=True)
    #print (CET_hierarchy_dico)
    DB_Lithology= pd.read_csv(DB_Lithology_Export,encoding = "ISO-8859-1", dtype='object')
    Upscaled_Litho=pd.merge(DB_Lithology, CET_hierarchy_dico, left_on='CET_Lithology', right_on='Level_3')
    Upscaled_Litho.sort_values("Company_ID", ascending = True, inplace = True)
    #Upscaled_Litho.drop(['Unnamed: 8'], axis=1)
    #del Upscaled_Litho['Unnamed: 8']
    Upscaled_Litho.to_csv (DB_Lithology_Upscaled_Export, index = False, header=True)
    





pushd \\uniwa.uwa.edu.au\userhome\staff8\00103098\My Documents\GitHub\dh2loop


python setup.py install --user  --force

93455335










def Depth_validation(row_2,row_3,collarid,dhsurveyid,logger1):
    '''
    Funtion validates the from and to depth values according to the requirment
    Input : 
        - From Depth
        - To Depth
    Output:
        - From Depth,To Depth : Right Depth values for from and to depth 
    '''
   
    
    from_depth = row_2               
    to_depth = row_3
    if (from_depth is not None and to_depth is not None) or  (from_depth is not None or to_depth is not None) :
        if(to_depth == 'NULL' or to_depth == None):
            
            to_depth = from_depth +0.1
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"todepth is NULL/None ,0.1 added to from_depth result is todepth")
            return from_depth,to_depth
        elif to_depth>from_depth:
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"to_depth > from_depth , which is considered as is")
            return row_2,row_3
        elif from_depth == to_depth:
            to_depth = to_depth+0.01
            row_3=to_depth
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"to_depth == from_depth , 0.01 is added to to_depth")
            return row_2,row_3
        elif from_depth >to_depth:
            row_2=to_depth       
            row_3=from_depth
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"from_depth > to_depth , depths are swapped")
            return row_2,row_3
        
            
def Depth_validation_comments(row_2,row_3,collarid,dhsurveyid):
    '''
    Funtion validates the from and to depth values according to the requirment
    Input : 
        - From Depth
        - To Depth
    Output:
        - From Depth,To Depth : Right Depth values for from and to depth 
    '''
   
    
    from_depth = row_2               
    to_depth = row_3
    if (from_depth is not None and to_depth is not None) or  (from_depth is not None or to_depth is not None) :
        if(to_depth == 'NULL' or to_depth == None):
            
            to_depth = from_depth +0.1
            
            return from_depth,to_depth
        elif to_depth>from_depth:
            
            return row_2,row_3
        elif from_depth == to_depth:
            to_depth = to_depth+0.01
            row_3=to_depth
            
            return row_2,row_3
        elif from_depth >to_depth:
            row_2=to_depth       
            row_3=from_depth
            
            return row_2,row_3
            







1_Exporting_and_Text_Parsing_of_Drillhole_Data_From_PostgreSQL

DB_Survey_Azi_Log,DB_Survey_Dip_Log,DB_Litho_Depth_Log,DB_Litho_Att_Val_Log


	logger2 = logging.getLogger('dev2')
    logger2.setLevel(logging.INFO)
    DB_Collar_MD_Log_Name = os.path.join(export_path, DB_Collar_Maxdepth_Log)
    fileHandler2 = logging.FileHandler(DB_Collar_MD_Log_Name)  #'MD.log')    #DB_Collar_Maxdepth_Log)  #'MD.log')
    logger2.addHandler(fileHandler2)



#conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")



procs =[]
    #process creation

    for x in variable_list:
        proc = mp.Process(target=comments_with_fuzzy_Process, args=(x, Comments_fuzzy)) 
        procs.append(proc)
        proc.start()
        
    #for p in processes:  # not required
    #    p.start()    #not required

    #cpname = multiprocessing.current_process().name
    #mylogger.info("{0} is currently doing...".format(cpname))

    # Exit the completed processes
    for proc in procs:
        proc.join()

    # Get process results from the output queue
    #results = [output.get() for p in processes]
    #Comments_fuzzy.append(results)

    #Comments_fuzzy_Final = reduce(lambda x,y: x+y, Comments_fuzzy)

    my_df1 = pd.DataFrame(Comments_fuzzy)  #, index=var_name1.keys())
    my_df1.to_csv('Comments_fuzzy.csv', index=False, header=True)

    End_Time = datetime.now()
    print("Time taken comments fuzzy  processes is:", End_Time-Start_Time)

    Final_Lithology_With_Comments()

    End_Time = datetime.now()
    print("Time taken total:", End_Time-Start_Time)
    




##################

[['ALTN_COMMENTS', "'clay' - light brown, weathered to clay, pervasive and along planes of weakness"], ['ALTN_COMMENTS', 'Core loss of 1.4m this interval'], ['ALTN_COMMENTS', 'Core loss of 1.9m this interval'], ['ALTN_COMMENTS', 'Core loss of 1m this interval'], ['ALTN_COMMENTS', 'Core loss of 2.4m 126.6 -129.3m.'], ['ALTN_COMMENTS', 'Core loss of 70cm this interval'], ['ALTN_COMMENTS', 'Core loss of 90cm this interval'], ['code description.', 'basalt'], ['code description.', 'black shale'], ['code description.', 'felsic porphyry'], ['code description.', 'granitic porphyry'], ['code description.', 'granitoid'], ['code description.', 'gravel transported'], ['code description.', 'mafic schist'], ['code description.', 'schist undiff.'], ['code description.', 'sediment undiff.'], ['code description.', 'siltstone'], ['code description.', 'transported material'], ['code description.', 'ultramafic schist'], ['code description.', 'ultramafic undiff.'], ['code description.', 'weathered rock'], ['Comment', '-'], ['Comment', '?)'], ['Comment', '.'], ['Comment', '""""'], ['Comment', '0-101 BLADE EOH 101M'], ['Comment', '"0-10CM of colluvial gravel then mottled, hard (silcrete?) colours vary from whites, reds, oranges/browns. Textures vary b/n massive and clastic (up to 10cm)"'], ['Comment', '0-19M.-HAMMER'], ['Comment', '<0.1M OF TRANS. COVER.'], ['Comment', '0 - 2.3M NOT SAMPLED'], ['Comment', '<0.2M OF RSP CLAY.'], ['Comment', '"0.2m QZ-MGN zone at top contact, MAS PY- intergrown spidery SI clasts and other sulfides"'], 





----------------------
----------------------process creation

	p3 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[2], Litho_dico,'fuzzy_3.csv'))
    p3.start()
    Comments_fuzzy.append(q.get())
    p3.join()

    
    p4 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[3], Litho_dico,'fuzzy_4.csv'))
    p4.start()
    Comments_fuzzy.append(q.get())
    p4.join()

   
    p5 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[4], Litho_dico,'fuzzy_5.csv'))
    p5.start()
    Comments_fuzzy.append(q.get())
    p5.join()


    
    p6 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[5], Litho_dico,'fuzzy_6.csv'))
    p6.start()
    Comments_fuzzy.append(q.get())
    p6.join()


    
    p7 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[6], Litho_dico,'fuzzy_7.csv'))
    p7.start()
    Comments_fuzzy.append(q.get())
    p7.join()


    
    p8 = ctx.Process(target=Comments_With_fuzzy, args=(q,variable_list[7], Litho_dico,'fuzzy_8.csv'))
    p8.start()
    Comments_fuzzy.append(q.get())
    p8.join()


---------------------
-------------------------------


	p1 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[0], Litho_dico,'fuzzy_1.csv'))
    p1.start()
    print("p1 - started")
    Comments_fuzzy.append(q1.get())
    p1.join()
    

    
    
    p2 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[1], Litho_dico,'fuzzy_2.csv'))
    p2.start()
    print("p2 - started")
    Comments_fuzzy.append(q1.get())
    p2.join()
    

    
    
    p3 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[2], Litho_dico,'fuzzy_3.csv'))
    p3.start()
    print("p3 - started")
    Comments_fuzzy.append(q1.get())
    p3.join()

    p4 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[3], Litho_dico,'fuzzy_4.csv'))
    p4.start()
    print("p4 - started")
    Comments_fuzzy.append(q1.get())
    p4.join()
    
    p5 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[4], Litho_dico,'fuzzy_5.csv'))
    p5.start()
    print("p5 - started")
    Comments_fuzzy.append(q1.get())
    p5.join()
    


    p6 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[5], Litho_dico,'fuzzy_6.csv'))
    p6.start()
    print("p6 - started")
    Comments_fuzzy.append(q1.get())
    p6.join()


    
    p7 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[6], Litho_dico,'fuzzy_7.csv'))
    p7.start()
    print("p7 - started")
    Comments_fuzzy.append(q1.get())
    p7.join()


    
    p8 = ctx1.Process(target=Comments_With_fuzzy, args=(q1,variable_list[7], Litho_dico,'fuzzy_8.csv'))
    p8.start()
    print("p8 - started")
    Comments_fuzzy.append(q1.get())
    p8.join()





-----------------in loop not working 
 x=1

    for list_ele in variable_list:
        try:
            outfile = "Fuzzy_"+str(x) 
            p = Process(target=Comments_With_fuzzy, args =(q1,list_ele, Litho_dico,outfile)) 
            p.start()
            process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)

     # wait for processes to finish
    for process in process_list:
        process.join()

     #for process in process_list:
         #Comments_fuzzy.append(q1.get())


------------
-------
def Final_Lithology_With_Comments_query_split():
	'''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    Also joins extraction of Comments attribute column with Comments attribute value .
    For Each row extracted, the from and to depth values are validated , generated fuzzywuzzy values for the lithology along with the score are printed .
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - csv file with the extracted data with fuzzywuzzy and score for lithology and comments.
    '''
    query = ''' SELECT m1.companyid, m1.collarid, m1.fromdepth, m1.todepth, m1.lith_attributecolumn, m1.lith_attributevalue, 
                m2.comments_attributecolumn, m2.comments_attributevalue 
                FROM 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS lith_attributecolumn, t1.attributevalue AS lith_attributevalue 
                 from public.dhgeologyattr t1
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_lithology t5
                 on t1.attributecolumn = t5.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m1
                 FULL JOIN		 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS comments_attributecolumn, t1.attributevalue AS comments_attributevalue  
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_comment t6
                 on t1.attributecolumn = t6.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m2 
                 on m1.dhgeologyid = m2.dhgeologyid'''
				 
				 
	conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    print("connected")
    cur = conn.cursor()
    #Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
    cur.execute(query)  #,Bounds)

    fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score', 'Comment', 'CET_Comment', 'Comment_Score']
    out= open('DB_lithology_With_Comments_Final_Export.csv', "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
	
	
	First_Filter_list_1 = [list(elem) for elem in cur]
	length_list= len(First_Filter_list_1)
	print(length_list)

	#Add split code here 




def Final_with_fuzzy_Process(split_List,Comments_fuzzy,q2,filename):

    final_fuzzy_list =[]
    for First_filter_ele in split_List:
        if (First_filter_ele[0] == None and First_filter_ele[1]== None  and First_filter_ele[2]== None  and First_filter_ele[3]== None) or  (First_filter_ele[2] == None and First_filter_ele[3] ==None) :   # for empty fields, bug
            continue
        else :
            First_filter_ele[2],First_filter_ele[3] =Depth_validation_comments(First_filter_ele[2],First_filter_ele[3])  #  ,First_filter_ele[1],First_filter_ele[6],logger1) # validate depth
            CompanyID=First_filter_ele[0]
            CollarID=First_filter_ele[1]
            FromDepth=First_filter_ele[2]
            ToDepth=First_filter_ele[3]
            Company_Lithocode=""
            Company_Lithology=""
            CET_Lithology=""
            Score=0
            Comment=""
            CET_Comment=""
            Comment_Score=0
        
        
        for Attr_val_fuzzy_ele in Attr_val_fuzzy:
            if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                Company_Lithocode=Attr_val_fuzzy_ele[1]
                Company_Lithology=Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Lithology=Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Score=Attr_val_fuzzy_ele[5]
                
        for Comments_fuzzy_ele in Comments_fuzzy:
            if Comments_fuzzy_ele[1] == First_filter_ele[7]:
                Comment=Comments_fuzzy_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Comment=Comments_fuzzy_ele[3].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Comment_Score=Comments_fuzzy_ele[4]

        final_fuzzy_list.append([CompanyID,CollarID,FromDepth,ToDepth,Company_Lithocode,Company_Lithology,CET_Lithology,Score,Comment,CET_Comment,Comment_Score])
    my_df3 = pd.DataFrame(final_fuzzy_list)  #, index=var_name1.keys())
    my_df3.to_csv(filename, index=False, header=True)
    q2.put(final_fuzzy_list)
        #time.sleep(0.5)
        #return(fuzzy_list)




process_list_final =[]

Final_fuzzy =[]   # make global

Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q2 = mp.Queue()
    x=1

    for final_list_ele in final_variable_list:
        try:
            outfile = "Final_Fuzzy_"+str(x)+".csv" 
            p = Process(target=Final_with_fuzzy_Process, args =(final_list_ele, Comments_fuzzy,q2,outfile)) 
            p.start()
            print("process started")
            process_list_final.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results = [q2.get() for process in process_list_final]
    #print(results)
    Final_fuzzy1.append(results)
    #print(Comments_fuzzy)


    Final_fuzzy2 = [val for sublist in Final_fuzzy1 for val in sublist]    
    #print(flattened1)


    Final_fuzzy = [val for sublist in Final_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list_final:
        process.join()
        print("Join")

    End_Time_1 = datetime.now()
    print("Final Process time:", End_Time_1-Start_Time_1)

    my_df_final = pd.DataFrame(Final_fuzzy)  #, index=var_name1.keys())
    final_Litho_Comments_Name = 'Final_Litho_With_Comments.csv'
    my_df_final.to_csv(final_Litho_Comments_Name, index=False, header=True)








------working back up


Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q1 = mp.Queue()
    x=1

    for list_ele in variable_list:
        try:
            outfile = "Fuzzy_"+str(x)+".csv" 
            p = Process(target=Comments_With_fuzzy, args =(q1,list_ele, Litho_dico,outfile)) 
            p.start()
            print("process started")
            process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results = [q1.get() for process in process_list]
    #print(results)
    Comments_fuzzy1.append(results)
    #print(Comments_fuzzy)


    Comments_fuzzy2 = [val for sublist in Comments_fuzzy1 for val in sublist]    
    #print(flattened1)


    Comments_fuzzy = [val for sublist in Comments_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list:
        process.join()
        print("Join")

    End_Time_1 = datetime.now()
    print("Process time:", End_Time_1-Start_Time_1)

    my_df2 = pd.DataFrame(Comments_fuzzy)  #, index=var_name1.keys())
    final_Fuzzy_Name = 'Final_Fuzzywuzzy_With_Comments.csv'
    my_df2.to_csv(final_Fuzzy_Name, index=False, header=True)
    
    #Start_Time_2 = datetime.now()
    #Final_Lithology_With_Comments()
    #End_Time_2 = datetime.now()
    #print("Final_Litho_comments_Time:", End_Time_2-Start_Time_2)


    #End_Time = datetime.now()
    #pint("Total Time :", End_Time-Start_Time)



--------
------ working back up split


x=i
            #count =count +1
            print(i)
            print(actual_part_num)
            #print(count)

            if count   == worker_proc  :  ## to merge last split with previous one as it is small
                total_split_val =(round(partition_List) * worker_proc)
                diff = length_list - total_split_val
                if diff > 0 :
                    #i =  i+ diff     #total_split_val + diff
                    #i = round(i)
                    #print(i)
                    globals()['list'+ '_' + str(i)] = Comments_Dic_new[x:x+diff]
                    variable_list.append(globals()['list'+ '_' + str(i)])

                elif diff < 0 :
                    #i = i + diff    #total_split_val + diff
                    #i = round(i)
                    #print(i)
                    globals()['list'+ '_' + str(i)] = Comments_Dic_new[x:x+diff]
                    variable_list.append(globals()['list'+ '_' + str(i)])
                print("in final")

            #print(i)
            #globals()['list'+str(i)] = Comments_Dic_new[x:x+actual_part_num]
            else :
                globals()['list'+ '_' + str(i)] = Comments_Dic_new[x:x+actual_part_num]
                variable_list.append(globals()['list'+ '_' + str(i)])
                count =count +1
                print("not in final")









---------
-----------
working code back up

Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q1 = mp.Queue()
    x=1

    for list_ele in variable_list:
        try:
            outfile = "Fuzzy_"+str(x)+".csv" 
            p = Process(target=Comments_With_fuzzy, args =(q1,list_ele, Litho_dico,outfile)) 
            p.start()
            print("process started")
            process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results = [q1.get() for process in process_list]
    #print(results)
    Comments_fuzzy1.append(results)
    #print(Comments_fuzzy)


    Comments_fuzzy2 = [val for sublist in Comments_fuzzy1 for val in sublist]    
    #print(flattened1)


    Comments_fuzzy = [val for sublist in Comments_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list:
        process.join()
        print("Join")

    End_Time_1 = datetime.now()
    print("Process time:", End_Time_1-Start_Time_1)

    my_df2 = pd.DataFrame(Comments_fuzzy)  #, index=var_name1.keys())
    final_Fuzzy_Name = 'Final_Fuzzywuzzy_With_Comments.csv'
    my_df2.to_csv(final_Fuzzy_Name, index=False, header=True)

    #### final funtion split
    Final_Lithology_With_Comments_Split()
    print("final_variable_list  length")
    print(len(final_variable_list))
    #### process creation for final funtion

    Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q2 = mp.Queue()
    x=1

    for final_list_ele in final_variable_list:
        try:
            outfile = "Final_Litho_Comments"+str(x)+".csv" 
            p = Process(target=Final_comments_with_fuzzy_Process, args =(final_list_ele, Comments_fuzzy,q2,outfile)) 
            p.start()
            print("process started")
            process_list_final.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results1 = [q2.get() for process in process_list_final]
    #print(results)
    Final_fuzzy1.append(results1)
    #print(Comments_fuzzy)


    Final_fuzzy2 = [val for sublist in Final_fuzzy1 for val in sublist]    
    #print(flattened1)


    Final_fuzzy = [val for sublist in Final_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list_final:
        process.join()
        print("Join")

    

    my_df_final = pd.DataFrame(Final_fuzzy,columns=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score','Comment','CET_Comment','Comment_Score'])  #, index=var_name1.keys())
    final_Litho_Comments_Name = 'Final_Litho_With_Comments.csv'
    my_df_final.to_csv(final_Litho_Comments_Name, index=False, header=True)
   

    End_Time_1 = datetime.now()
    print("Final Process time:", End_Time_1-Start_Time_1)



////back up on   10 feb.21

Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q1 = mp.Queue()
    x=1

    for list_ele in variable_list:
        try:
            outfile = "Fuzzy_"+str(x)+".csv" 
            p = Process(target=Comments_With_fuzzy, args =(q1,list_ele, Litho_dico,outfile)) 
            p.start()
            print("process started")
            process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results = [q1.get() for process in process_list]
    #print(results)
    Comments_fuzzy1.append(results)
    #print(Comments_fuzzy)


    Comments_fuzzy2 = [val for sublist in Comments_fuzzy1 for val in sublist]    
    #print(flattened1)


    Comments_fuzzy = [val for sublist in Comments_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list:
        process.join()
        print("Join")

    End_Time_1 = datetime.now()
    print("Process time:", End_Time_1-Start_Time_1)

    my_df2 = pd.DataFrame(Comments_fuzzy)  #, index=var_name1.keys())
    final_Fuzzy_Name = 'Final_Fuzzywuzzy_With_Comments.csv'
    my_df2.to_csv(final_Fuzzy_Name, index=False, header=True)

    #### final funtion split
    Final_Lithology_With_Comments_Split()
    print("final_variable_list  length")
    print(len(final_variable_list))
    #### process creation for final funtion

    Start_Time_1 = datetime.now()
    #create processes for the number of split in comments to find fuzzywuzzy
    q2 = mp.Queue()
    x=1

    for final_list_ele in final_variable_list:
        try:
            outfile = "Final_Litho_Comments"+str(x)+".csv" 
            p = Process(target=Final_comments_with_fuzzy_Process, args =(final_list_ele, Comments_fuzzy,Attr_val_fuzzy,q2,outfile)) 
            p.start()
            print("process started")
            process_list_final.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results1 = [q2.get() for process in process_list_final]
    #print(results)
    Final_fuzzy1.append(results1)
    #print(Comments_fuzzy)


    Final_fuzzy2 = [val for sublist in Final_fuzzy1 for val in sublist]    
    #print(flattened1)


    Final_fuzzy = [val for sublist in Final_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in process_list_final:
        process.join()
        print("Join")

    

    my_df_final = pd.DataFrame(Final_fuzzy,columns=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score','Comment','CET_Comment','Comment_Score'])  #, index=var_name1.keys())
    final_Litho_Comments_Name = 'Final_Litho_With_Comments.csv'
    my_df_final.to_csv(final_Litho_Comments_Name, index=False, header=True)
   

    End_Time_1 = datetime.now()
    print("Final Process time:", End_Time_1-Start_Time_1)



-----
---
Final_split_proc_list =[]
Comm_split_proc_list =[]




-----------------
------18.feb.21
--------
	#### final funtion 
    Final_Lithology_With_Comments_Split()
    print("final_variable_list  length")
    print(len(Final_split_proc_list))
    #### process creation for final funtion

    Start_Time_2 = datetime.now()
    
    #create processes for the number of split in comments to find fuzzywuzzy
    q2 = mp.Queue()
    x=1

    for final_list_ele in Final_split_proc_list:
        try:
            outfile = "Final_Litho_Comments"+str(x)+".csv" 
            p = Process(target=Final_comments_with_fuzzy_Process, args =(final_list_ele, Comments_fuzzy,Attr_val_fuzzy,q2,outfile)) 
            p.start()
            print("process started")
            Process_list_final.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results1 = [q2.get() for process in Process_list_final]
    #print(results)
    Final_fuzzy1.append(results1)
    #print(Comments_fuzzy)


    Final_fuzzy2 = [val for sublist in Final_fuzzy1 for val in sublist]    
    #print(flattened1)


    Final_fuzzy = [val for sublist in Final_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in Process_list_final:
        process.join()
        print("Join")

    

    my_df_final = pd.DataFrame(Final_fuzzy,columns=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score','Comment','CET_Comment','Comment_Score'])  #, index=var_name1.keys())
    final_Litho_Comments_Name = 'Final_Litho_With_Comments.csv'
    my_df_final.to_csv(final_Litho_Comments_Name, index=False, header=True)
   

    End_Time_2 = datetime.now()
    print("Final Process time:", End_Time_2-Start_Time_2)




-------------------------
-----------------------------------
-------------------------------------------------
---code from github

def Comments_Dic(minlong,maxlong,minlat,maxlat):
    '''
    Function selects the distinct attribute column and attribute value which matches in thesaurus 'thesaurus_geology_comment' with the given region
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - List with extracted data matching attribute column and thesaurus.
    '''
    'distict on(attributecol,attributeval) changes to only attributevalue'
    query = """Select DISTINCT ON (t1.attributevalue)
    t1.attributecolumn, t1.attributevalue
		 from public.dhgeologyattr t1 
		 inner join public.dhgeology t2 
		 on t1.dhgeologyid = t2.id 
		 inner join collar t3 
		 on t3.id = t2.collarid
		 inner join public.thesaurus_geology_comment t6
		 on t1.attributecolumn = t6.attributecolumn
		 WHERE(t3.longitude BETWEEN %s AND %s) AND (t3.latitude BETWEEN %s AND %s)"""
    
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
    cur.execute(query,Bounds)
    
    for record in cur:
        #print(record)
        Var.Comments_dic_tmp.append(record)     #append to Comments_dic_tmp , since we need to take another variable ,use in split fun.
    #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query, bounds)
   
    #with open('Dic_Comments.csv', 'w') as f:
        #cur.copy_expert(outputquery, f)
    cur.close()
    conn.close()

def listoflist_comments_dic():
    '''
        Function gets the listoflist for Comments_dic_tmp , so that it can be used in split function.
        Input - Comments_dic_tmp.
        output - Comments_dic.
    '''
    Var.Comments_dic = [list(elem) for elem in Var.Comments_dic_tmp]
    
    
def Comments_dic_split(dic_litho_comments,filename,Comm_split_process_list,Num_worker_process):
    '''
    Function split listoflist to  the number of logical process considered 
    Input : 
         - dic_litho_comments : input  which needs to be split.
         -filename : Each split is printed to a file for verification.
         - Process_list : list to hold the split variables name for later use.
         - Num_worker_process : No worker process decided to select.
    Output:
        - Comments Dictionary splits in globals variables and in csv file.
    '''
    
    
    length_list= len(dic_litho_comments)
    partition_List = length_list / Num_worker_process   #split total data by process selected to make eaual chunks.
    actual_part_num = round(partition_List)    # split value with avilable logical process
    #print(length_list)
    count=0
    if length_list > 0:      
        x=0
        y=length_list
        for i in range(x,y,actual_part_num):       
            x=i
            count = count + 1
            if count  == Num_worker_process  :  ## to merge last split with previous one as it is small
                total_split_val =(round(partition_List) * Num_worker_process)
                diff = length_list - total_split_val

                if diff > 0 or diff == 0 :
                    final_split = x+actual_part_num+diff
                    #print(final_split)
                    globals()[filename+ '_' + str(i)] = dic_litho_comments[x:final_split] #create global variable for later use
                    Var.Comm_split_process_list.append(globals()[filename+ '_' + str(i)])  # add to process list 
                    #print("in final -1")
                    break           # exit after last split , since we added left out records

                elif diff < 0 :
                    final_split = x+ actual_part_num+diff 
                    globals()[filename+ '_' + str(i)] = dic_litho_comments[x:final_split]
                    Var.Comm_split_process_list.append(globals()[filename+ '_' + str(i)])
                    #print("in final-2")
                    break
               
            else:
                globals()[filename+ '_' + str(i)] = dic_litho_comments[x:x+actual_part_num]
                Var.Comm_split_process_list.append(globals()[filename+ '_' + str(i)])
                #print(" Not in final")
            

    #print(count) 

    
    part_num = actual_part_num
    partnum1= part_num
    tot_partnum = part_num
    for x in range(0, count, 1):  # create csv file for verification.
        if x > 0 :
                
            var_name1 = filename+ '_' + str(tot_partnum)
            #print(var_name1)
            my_df1 = pd.DataFrame(globals()[var_name1])  
            file_name1 = var_name1 + '.csv'
            my_df1.to_csv(os.path.join(export_path ,file_name1), index=False, header=True)
            tot_partnum = tot_partnum + part_num
                
        elif x == 0:
            var_name2 = filename + '_' + str(x)
            #print(var_name2)
            my_df2 = pd.DataFrame(globals()[var_name2])   
            file_name2 = var_name2 + '.csv'
            my_df2.to_csv(os.path.join(export_path ,file_name2), index=False, header=True)
    
def create_comments_process():
    
    print("in process creation")
    #Start_Time_1 = datetime.now()
    Process_list = []
    Comments_fuzzy1 = []
    Comments_fuzzy2=[]
    q1 = mp.Queue()
    x=1

    for list_ele in Var.Comm_split_process_list:
        try:
            outfile = "Fuzzy_"+str(x)+".csv" 
            p = Process(target=Comments_With_fuzzy, args =(q1,list_ele, Var.Litho_dico,outfile)) 
            p.start()
            print("process started")
            Process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results = [q1.get() for process in Process_list]
    #print(results)
    Comments_fuzzy1.append(results)
        #print(Comments_fuzzy)


    Comments_fuzzy2 = [val for sublist in Comments_fuzzy1 for val in sublist]    
        #print(flattened1)


    Var.Comments_fuzzy = [val for sublist in Comments_fuzzy2 for val in sublist]    
        #print(flattened2)
    print("got results")

        # wait for processes to finish
    for process in Process_list:
        process.join()
        print("Join")

    

    my_df2 = pd.DataFrame(Var.Comments_fuzzy)  #, index=var_name1.keys())
    final_Fuzzy_Name = 'Final_Fuzzywuzzy_With_Comments.csv'
    my_df2.to_csv(os.path.join(export_path ,final_Fuzzy_Name), index=False, header=True)

    #End_Time_1 = datetime.now()
    #print("Process time:", End_Time_1-Start_Time_1)
    



def Comments_With_fuzzy(q,comment_split, Litho_dico,file_name): 
    '''
    Function find the fuzzywuzzy and score to the comments attribute value 
    Input : 
        q - To fill the fuzzywuzzy results from each process.
        comments_split - comments split to get fuzzywuzzy.
        Litho_Dico - pass Litho_Dico to get fuzzywuzzy
        file_name- print each fuzzywuzzy to a csv file for varification.
    Output:
        - List with fuzzywuzzy and score for comments attribute value.
    '''
    
    #print(" B P")
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    Comments_fuzzy_Sub = []
    Comments_Dic_new = [list(elem) for elem in comment_split]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            #prinnt(" B P")
        else:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            #print("B P")
            


    #print(Comments_fuzzy_Sub)
    #print(" broken pipe err")
    #my_df2 = pd.DataFrame(Comments_fuzzy_Sub , columns = ['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score'])
    #my_df2.to_csv(os.path.join(export_path ,file_name), index=False, header=True)
    q.put(Comments_fuzzy_Sub)
    time.sleep(1)

def Comments_With_fuzzy_thread(q,comment_split, file_name): 
    '''
    Function find the fuzzywuzzy and score to the comments attribute value 
    Input : 
        q - To fill the fuzzywuzzy results from each process.
        comments_split - comments split to get fuzzywuzzy.
        Litho_Dico - pass Litho_Dico to get fuzzywuzzy
        file_name- print each fuzzywuzzy to a csv file for varification.
    Output:
        - List with fuzzywuzzy and score for comments attribute value.
    '''
    
    
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    Comments_fuzzy_Sub = []
    Comments_Dic_new = [list(elem) for elem in comment_split]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Var.Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
        else:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            


    #print(Comments_fuzzy_Sub)
    my_df2 = pd.DataFrame(Comments_fuzzy_Sub , columns = ['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score'])
    my_df2.to_csv(os.path.join(export_path ,file_name), index=False, header=True)
    q.put(Comments_fuzzy_Sub)




def Comments_With_fuzzy_pool(comment_split, file_name): 
    '''
    Function find the fuzzywuzzy and score to the comments attribute value 
    Input : 
        q - To fill the fuzzywuzzy results from each process.
        comments_split - comments split to get fuzzywuzzy.
        Litho_Dico - pass Litho_Dico to get fuzzywuzzy
        file_name- print each fuzzywuzzy to a csv file for varification.
    Output:
        - List with fuzzywuzzy and score for comments attribute value.
    '''
    
    
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    Comments_fuzzy_Sub = []
    Comments_Dic_new = [list(elem) for elem in comment_split]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Var.Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
        else:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            


    #print(Comments_fuzzy_Sub)
    my_df2 = pd.DataFrame(Comments_fuzzy_Sub , columns = ['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score'])
    my_df2.to_csv(os.path.join(export_path ,file_name), index=False, header=True)
    #q.put(Comments_fuzzy_Sub)
    return Comments_fuzzy_Sub



    
    
def Comments_With_fuzzy_1():
    '''
    Function find the fuzzywuzzy and score to the comments attribute value 
    Input : 
        List with attribute column and attribute value.
    Output:
        - List with fuzzywuzzy and score for comments attribute value.
    '''
    
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    comments_sub_list=[]
    fieldnames=['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score']
    out= open(os.path.join(export_path,"Comments_fuzzy.csv"), "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    Comments_Dic_new = [list(elem) for elem in Var.Comments_dic]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Var.Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Var.Comments_fuzzy.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            out.write('%s,' %Comments_Dic_ele[0].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Comments_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
        else:
            Var.Comments_fuzzy.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            out.write('%s,' %Comments_Dic_ele[0].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Comments_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('Other,')
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
                   
                    
-----------
------------in notebook
Start_Time = datetime.now()
dh2l_db_New.Attr_Val_Dic()
dh2l_db_New.Litho_Dico()
dh2l_db_New.Clean_Up()
dh2l_db_New.Comments_Dic(minlong,maxlong,minlat,maxlat)
dh2l_db_New.Attr_val_With_fuzzy()
#dh2l_db_New.Comments_With_fuzzy()
dh2l_db_New.listoflist_comments_dic()
filename_comment_dic_split = 'Comment_split_list'    
dh2l_db_New.Comments_dic_split(Var.Comments_dic,filename_comment_dic_split,Var.Comm_split_process_list,worker_proc)
End_Time = datetime.now()
print("time after split:", End_Time-Start_Time)
Start_Time1 = datetime.now()
if __name__ == '__main__':
    #dh2l_db_New.create_comments_process()
    Process_list = []
    Comments_fuzzy1 = []
    Comments_fuzzy2=[]
    q1 = mp.Queue()
    x=1

    for list_ele in Var.Comm_split_process_list:
        try:
            outfile = "Fuzzy_"+str(x)+".csv" 
            p = Process(target=dh2l_db_New.Comments_With_fuzzy, args =(q1,list_ele,Var.Litho_dico,outfile))    #list_ele, Var.Litho_dico,outfile)) 
            p.start()
            print("process started")
            Process_list.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)

  
    results = [q1.get() for process in Process_list]
    print(results)
    Comments_fuzzy1.append(results)
    Comments_fuzzy2 = [val for sublist in Comments_fuzzy1 for val in sublist]    
    Var.Comments_fuzzy = [val for sublist in Comments_fuzzy2 for val in sublist]    
    print("got results")

     # wait for processes to finish
    for process in Process_list:
        process.join()
        print("Join")

    

    my_df2 = pd.DataFrame(Var.Comments_fuzzy)  #, index=var_name1.keys())
    final_Fuzzy_Name = 'Final_Fuzzywuzzy_With_Comments.csv'
    my_df2.to_csv(os.path.join(export_path ,final_Fuzzy_Name), index=False, header=True)
    
    End_Time1 = datetime.now()
    print("Time after first process:", End_Time1-Start_Time1)
    
    
--------------------
------------------------
----query
SELECT collar.id, replace(replace(collar.holeid, '\"', '_'), ',', '_') as holeid, 
		  collar.longitude, collar.latitude, collarattr.attributecolumn, collarattr.attributevalue 
		  FROM public.collar 
		  INNER JOIN collarattr 
		  ON collar.id = collarattr.collarid 
		  WHERE(longitude BETWEEN %s  AND %s AND latitude BETWEEN %s AND %s)
		  ORDER BY collarattr.collarid ASC



///final process code


Final_fuzzy =[]
Process_list_final =[]
///notebook

#### final funtion 
	Final_fuzzy1 =[]
    Final_fuzzy2=[]
	
    Final_Lithology_With_Comments_Split()
    print("final_variable_list  length")
    print(len(Final_split_proc_list))
    #### process creation for final funtion

    Start_Time_2 = datetime.now()
    
    #create processes for the number of split in comments to find fuzzywuzzy
    q2 = mp.Queue()
    x=1

    for final_list_ele in Var.Final_split_proc_list:
        try:
            outfile = "Final_Litho_Comments"+str(x)+".csv" 
            p = Process(target=Final_comments_with_fuzzy_Process, args =(final_list_ele, Var.Comments_fuzzy,Attr_val_fuzzy,q2,outfile)) 
            p.start()
            print("process started")
            Process_list_final.append(p)
            x = x+ 1
        except:
            raise
            print("Error: unable to start thread", list_ele)


    results1 = [q2.get() for process in Process_list_final]
    #print(results)
    Final_fuzzy1.append(results1)
    #print(Comments_fuzzy)


    Final_fuzzy2 = [val for sublist in Final_fuzzy1 for val in sublist]    
    #print(flattened1)


    Final_fuzzy = [val for sublist in Final_fuzzy2 for val in sublist]    
    #print(flattened2)
    print("got results")

    # wait for processes to finish
    for process in Process_list_final:
        process.join()
        print("Join")

    

    my_df_final = pd.DataFrame(Final_fuzzy,columns=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score','Comment','CET_Comment','Comment_Score'])  #, index=var_name1.keys())
    final_Litho_Comments_Name = 'Final_Litho_With_Comments.csv'
    my_df_final.to_csv(final_Litho_Comments_Name, index=False, header=True)
   

    End_Time_2 = datetime.now()
    print("Final Process time:", End_Time_2-Start_Time_2)




Final_split_proc_list =[] 

///final fun

def Final_Lithology_With_Comments_Split():  #pass the longitude and lattitude directly in the query as its join of twi query.
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    Also joins extraction of Comments attribute column with Comments attribute value.The extracted data is split using split funtion to create processes.
    
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - split list of dataset in Final_split_proc_list.
    '''
    query = ''' SELECT m1.companyid, m1.collarid, m1.fromdepth, m1.todepth, m1.lith_attributecolumn, m1.lith_attributevalue, 
                m2.comments_attributecolumn, m2.comments_attributevalue 
                FROM 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS lith_attributecolumn, t1.attributevalue AS lith_attributevalue 
                 from public.dhgeologyattr t1
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_lithology t5
                 on t1.attributecolumn = t5.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m1
                 FULL JOIN		 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS comments_attributecolumn, t1.attributevalue AS comments_attributevalue  
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_comment t6
                 on t1.attributecolumn = t6.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m2 
                 on m1.dhgeologyid = m2.dhgeologyid'''
                 
                 
                 
        
    
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    print("connected")
    cur = conn.cursor()
    #Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
    cur.execute(query)  #,Bounds)
    First_Filter_list = [list(elem) for elem in cur]
    filename_final = 'final_split_list'
    Comments_Litho_Dic_split(First_Filter_list,filename_final,Var.Final_split_proc_list)
    cur.close()
    conn.close()





def Final_comments_with_fuzzy_Process(split_List,Comments_fuzzy,Attr_val_fuzzy,q2,filename):
    '''
        For Each row extracted for a region, the from and to depth values are validated , generated fuzzywuzzy values for the lithology along with the score are printed.
    Inputs:
            -split_List : Each split list to get fuzzywuzzy.
            -Comments_fuzzy : copy of comments fuzzy
            - Attr_val_fuzzy : copy of att_val fuzzy
            - q2 : multiprocessing queue to put the fuzzywuzzy resuts .
            -filename : Print each split output to a csv file.
    '''

    final_fuzzy_list =[]
    for First_filter_ele in split_List:
        if (First_filter_ele[0] == None and First_filter_ele[1]== None  and First_filter_ele[2]== None  and First_filter_ele[3]== None) or  (First_filter_ele[2] == None and First_filter_ele[3] ==None) :   # for empty fields, bug
            continue
        else :
            First_filter_ele[2],First_filter_ele[3] =Depth_validation_comments(First_filter_ele[2],First_filter_ele[3])  #  ,First_filter_ele[1],First_filter_ele[6],logger1) # validate depth
            CompanyID=First_filter_ele[0]
            CollarID=First_filter_ele[1]
            FromDepth=First_filter_ele[2]
            ToDepth=First_filter_ele[3]
            Company_Lithocode=""
            Company_Lithology=""
            CET_Lithology=""
            Score=0
            Comment=""
            CET_Comment=""
            Comment_Score=0
        
        
        for Attr_val_fuzzy_ele in Attr_val_fuzzy:
            if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                Company_Lithocode=Attr_val_fuzzy_ele[1]
                Company_Lithology=Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Lithology=Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Score=Attr_val_fuzzy_ele[5]
                
        for Comments_fuzzy_ele in Comments_fuzzy:
            if Comments_fuzzy_ele[1] == First_filter_ele[7]:
                Comment=Comments_fuzzy_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Comment=Comments_fuzzy_ele[3].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Comment_Score=Comments_fuzzy_ele[4]

        final_fuzzy_list.append([CompanyID,CollarID,FromDepth,ToDepth,Company_Lithocode,Company_Lithology,CET_Lithology,Score,Comment,CET_Comment,Comment_Score])

    my_df11 = pd.DataFrame(final_fuzzy_list)  #, index=var_name1.keys())
    my_df11.to_csv(filename, index=False, header=True)
    q2.put(final_fuzzy_list)




-----------------------
---------------------------------
-----------------------------------------
location=pd.read_csv(export_path +'/' +DB_Collar_Export)
survey=pd.read_csv(export_path +'/' +DB_Survey_Export)
survey=pd.merge(survey,location, how='left', on='CollarID')


-----
------
----file 

fieldnames=['CollarID','HoleId','Longitude','Latitude','RL','MaxDepth','X','Y']
    out= open(os.path.join(export_path,DB_Collar_Export), "w",encoding ="utf-8")
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
	
	
	1.	Collar-Collar Attribute Extraction.
1.1.	PostgreSQL database for collar and collarattr table. 
1.2.	Attribute column and Dictionary
1.3.	X and Y calculations
1.4.	

	dhsurvey and dhsurvey_attribute table Data Extraction.
	Dhgeology and dhgeologyattr table data extraction.
	Folder structure of the dh2loop application



1.	Collar-Collar Attribute Extraction.--------------------------------------------------1
1.1.	PostgreSQL database for collar and collarattr table. 
1.2.	Attribute column and Dictionary. 
1.3.	X and Y calculations.
1.4.	The values of x and y are tested for correctness in the following.
1.5.	The final collar and collarattr table extracted data will have the following format(.csv file).

2.	dhsurvey and dhsurvey_attribute table Data Extraction.
3.	Dhgeology and dhgeologyattr table data extraction.
4.	Folder structure of the dh2loop application


------------------
---------------------------
def survey_final(DB_Survey_Export,minlong,maxlong,minlat,maxlat):
   '''
   Function which extracts data from tables dhsurvey,dhsurveyattr and collar  for attributes Depth,Azimuth and Dip
   Inputs:
        - minlong,maxlong,minlat,maxlat :  coordinates of region 
   Output:
        - DB_Survey_Export : The processed data after extraction is written to this csv file in required format.
   '''
      
   logger1 = logging.getLogger('dev1')
   logger1.setLevel(logging.INFO)
   DB_Survey_Dip_Log_Name = os.path.join(export_path, DB_Survey_Dip_Log)
   fileHandler1 = logging.FileHandler(DB_Survey_Dip_Log_Name)
   logger1.addHandler(fileHandler1)


   logger2 = logging.getLogger('dev2')
   logger2.setLevel(logging.INFO)
   DB_Survey_Azi_Log_Name = os.path.join(export_path, DB_Survey_Azi_Log)
   fileHandler2 = logging.FileHandler(DB_Survey_Azi_Log_Name)
   logger2.addHandler(fileHandler2)
   
   fieldnames=['CollarID','Depth','Azimuth','Dip']
   out= open(os.path.join(export_path,DB_Survey_Export), "w",encoding =encoding_1)
   for ele in fieldnames:
        out.write('%s,' %ele)
   out.write('\n')
   query =""" select t1.collarid,t1.depth,t2.attributecolumn,t2.attributevalue,t2.dhsurveyid  
		from public.dhsurvey t1
		inner join public.collar 
		on collar.id = t1.collarid
		inner join dhsurveyattr t2
		on t1.id = t2.dhsurveyid
		where((collar.longitude BETWEEN %s AND %s) AND(collar.latitude BETWEEN %s AND %s) )
		order by collar.id ASC """
   conn = None
   AZI = 0.0
   AZI_list =0.0
   AZI_sub_list=[]
   AZI_DIP_LIST =[]
   AZI_ele = 0.0
   DIP = -90 #default Dip to -90
   Pre_id =0
   b_AZI =False
   b_DIP =False
   b_DEPTH =False
   back_survey_0 =0
   back_survey_1 = -1.1
   One_DIP=False
   One_AZI =False
   
   
   try:
      conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
      cur = conn.cursor()
      Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)
      Survey_First_Filter = [list(elem) for elem in cur]
      Survey_dic_list = [list(elem) for elem in Var.Attr_col_survey_dic_list] 
      for survey_ele in Survey_First_Filter:   
         for attr_col_ele in Survey_dic_list:
            if (survey_ele[2] == attr_col_ele[0])  :  #AZI or DIP
               if(Pre_id !=survey_ele[0]  and Pre_id !=0):
                  if(len(AZI_DIP_LIST)!=0):
                     AZI_DIP_Print=[]
                     list_AZI =[]
                     list_DIP =[]
                     if AZI_sub_list:
                        AZI_ele=max(AZI_sub_list)
                     if float(survey_ele[1]) < 0 :
                        survey_ele[1] = abs(survey_ele[1])

                     AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                        
                     #if Pre_id == 125476 :
                        #print("125476")
                        #print(AZI_DIP_LIST)


                     AZI_1 =0.0
                     AZI_2 =0.0
                     DIP_1 =0.0
                     DIP_2 =0.0
                     for loop1_ele in AZI_DIP_LIST:
                        for loop2_ele in AZI_DIP_LIST:
                           if(loop1_ele[0] == loop2_ele[0]):

                                 if abs(loop1_ele[1]) == abs(loop2_ele[1]) and abs(loop1_ele[2]) == abs(loop2_ele[2]):
                                    AZI_1=loop1_ele[1]
                                    DIP_1 = loop1_ele[2]
                                    
                                 elif abs(loop1_ele[1]) != abs(loop2_ele[1]) and abs(loop1_ele[2]) != abs(loop2_ele[2]):
                                    if abs(loop1_ele[1]) > abs(loop2_ele[1]):
                                       AZI_2 = loop1_ele[1]
                                     
                                    else:
                                       AZI_2 = loop2_ele[1]
                                     
                                    
                                    if abs(loop1_ele[2]) > abs(loop2_ele[2]):
                                       if(abs(loop1_ele[2]) ==90):  #default DIP bug solved
                                          DIP_2 = loop2_ele[2]
                                       else:
                                          DIP_2 = loop1_ele[2]
                                      
                                    else:
                                       if(abs(loop2_ele[2]) ==90): #default DIP bug solved
                                          DIP_2 = loop1_ele[2]
                                       else:
                                          DIP_2 = loop2_ele[2]

                                    #if(abs(loop1_ele[2]) ) == 90 :
                                       #DIP_2 = loop2_ele[2]
                                    #elif(abs(loop2_ele[2]) ) == 90 :
                                       #DIP_2 = loop1_ele[2] 
                                   

                                   
                        if abs(AZI_1) > abs(AZI_2):
                           AZI_ = AZI_1
                        else:
                            AZI_ = AZI_2

                        if abs(DIP_1) > abs(DIP_2):
                           if(abs(DIP_1 ) ==90): #default DIP bug solved
                              DIP_ = DIP_2
                           else:
                              DIP_ = DIP_1
                        else:
                           if(abs(DIP_2) ==90): #default DIP bug solved
                              DIP_ = DIP_1
                           else :
                              DIP_ = DIP_2

                            
                        
                        AZI_DIP_Print.append([loop1_ele[0],AZI_,DIP_])
                        AZI_1 =0.0
                        AZI_2 =0.0
                        DIP_1 =0.0
                        DIP_2 =0.0
                        AZI_= 0.0
                        DIP_ = 0.0
                           
   
                     #if Pre_id ==125476  :   #1914687
                        #print(AZI_DIP_Print)
                     
                     b_set = set(tuple(x) for x in AZI_DIP_Print)
                     AZI_DIP_Print_Filter = [ list(x) for x in b_set ]

                     #if Pre_id == 125476 :
                        #print(AZI_DIP_Print_Filter)

                     AZI_DIP_Print_Filter = dict((x[0], x) for x in AZI_DIP_Print_Filter).values()

                 

                     One_AZI= False

                     #if Pre_id == 117689:
                        #print(AZI_DIP_Print_Filter_ele[0])
                        #print(AZI_DIP_Print_Filter_ele[1])
                        #print(AZI_DIP_Print_Filter_ele[2])
                        #print(One_AZI)
                     #print(AZI_DIP_Print_Filter)
                     df = pd.DataFrame(AZI_DIP_Print_Filter,columns=['Depth','Azimuth','Dip'])
                     df.sort_values("Depth", axis = 0, ascending = True, inplace = True)
                     AZI_DIP_Print_Filter = df.values.tolist()
                     if(len(AZI_DIP_Print_Filter)!=0):
                        for AZI_DIP_Print_Filter_ele in AZI_DIP_Print_Filter:
        
                           out.write('%d,' %back_survey_0)
                           out.write('%d,' %AZI_DIP_Print_Filter_ele[0])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[1])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[2])
                           out.write('\n')
                           

                           #if Pre_id == 117689:
                              #print(AZI_DIP_Print_Filter_ele[0])
                             # print(AZI_DIP_Print_Filter_ele[1])
                              #print(AZI_DIP_Print_Filter_ele[2])
                             # print(One_AZI)
                     
                     AZI_DIP_Print.clear()
                     
                      
                  AZI_DIP_LIST.clear()
                  
                  if(One_AZI==True):
                     out.write('%d,' %back_survey_0)
                     out.write('%d,' %back_survey_1)
                     out.write('%f,' %AZI)
                     out.write('%f,' %DIP)
                     out.write('\n')
                  AZI =0.0
                  DIP =-90  #default Dip to -90
                  #One_DIP =False
                  One_AZI =False
                  AZI_sub_list.clear()
                  AZI_ele =0.0
 
                  back_survey_0 = 0
                  back_survey_1 = -1.1
                  Pre_id =0


                     
               if ('AZI' in attr_col_ele[1] and (Pre_id ==0 or Pre_id ==survey_ele[0])): # and back_survey_1 == survey_ele[1] ):   #AZI  processing
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi Alpha , It is not considered")
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                     logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi is -ve ,Sign is removed then considered.")
                     if float((survey_ele[3]).replace('\'','').replace('>','').replace('<','').strip())  > 360:
                        logger2.info("%d, %s ,%s" ,survey_ele[4],survey_ele[0]," Azi is > 360 , It is not considered")
                        continue
                     else:
                        logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi is valid , It is considered")
                        if (back_survey_1 == survey_ele[1] or back_survey_1==-1.1 ):
                           AZI = float((survey_ele[3]).replace('\'','').strip().replace('<','').replace('>','').rstrip('\n\r'))
                        
                           AZI_sub_list.append(AZI)
                           
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                          
                           One_AZI =True
                           
                           
                        else:
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                          
                           if float(survey_ele[1]) < 0:
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                     
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           AZI=0.0
                           DIP=-90 #default Dip to -90
                           AZI = float((survey_ele[3]).replace('\'','').strip().rstrip('\n\r'))
                           AZI_sub_list.append(AZI)
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                           One_AZI =False
                           
                           
                           

               if ('DIP' in attr_col_ele[1] and (Pre_id ==survey_ele[0] or Pre_id ==0)) :   #DIP  processing
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Dip is Alpha , It is not considered")
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                     if float((survey_ele[3]).replace('\'','').replace('<','').strip())  > 90:  # combine al skip cases
                        logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Dip is > 90 , It is not considered")
                        continue
                     elif float((survey_ele[3]).replace('\'','').replace('<','').strip()) < 0 or float((survey_ele[3]).replace('\'','').replace('<','').strip()) == 0 :
                        logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Dip is <= 0 , It is considered")
                        if (back_survey_1 == survey_ele[1] or  back_survey_1==-1.1):
                           DIP= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                    
                        else:
                  
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                           if float(survey_ele[1]) < 0 :
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_DIP_LIST.append([back_survey_1,AZI_ele,DIP])
                    
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           DIP=-90  #default Dip to -90
                           AZI=0.0
                           DIP= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
        
      
                  
   
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()


----------------
---------------------
def dsmincurb (len12,azm1,dip1,azm2,dip2):
    '''
    Function calculates dz,dn,de  Balanced Tangential Method by using the Ratio Factor (RF).
    Inputs:
        - len12 : length as specified in function calculate_x_y_z()
        - azm1 : azimuth1 float value .
        - azm2 : azimuth2 float value .
        - dip1 : dip1 float value.
        - dip2 : dip2 float value.
        
    '''
    #DEG2RAD = 3.141592654/180.0
    #i1 = (90 - float(dip1)) * DEG2RAD
    i1 = np.deg2rad(90 - float(dip1))
    #a1 = float(azm1) * DEG2RAD
    a1 = np.deg2rad(float(azm1))
    #i2 = (90 - float(dip2)) * DEG2RAD
    i2 = np.deg2rad(90 - float(dip2))
    #a2 = float(azm2) * DEG2RAD
    a2 = np.deg2rad(float(azm2))  #DEG2RAD
	
    #Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
    dl = acos(cos(float(i2)-float(i1))-(sin(float(i1))*sin(float(i2))*(1-cos(float(a2)-float(a1)))))
    if dl!=0.:
        rf = 2*tan(dl/2)/dl  # minimum curvature
    else:
        rf=1				 # balanced tangential
    dz = 0.5*len12*(cos(float(i1))+cos(float(i2)))*rf
    dn = 0.5*len12*(sin(float(i1))*cos(float(a1))+sin(float(i2))*cos(float(a2)))*rf
    de = 0.5*len12*(sin(float(i1))*sin(float(a1))+sin(float(i2))*sin(float(a2)))*rf
    return dz,dn,de
	#modified from pygslib
	
	-----------------
	-------------------------
	-----------------------------
	complete code
	---------------------------
	----------------------------
	-----------------------------
	
	
	import psycopg2
import csv
import re
import time
from fuzzywuzzy import fuzz
from fuzzywuzzy import process 
import math
import datetime
import pyproj
from pyproj import Proj, transform
import numpy as np
import pandas as pd
#import shapefile
import numpy as np
from pyproj import Transformer, transform
import os
from collections import Counter
from datetime import datetime
import pandas as pd
import numpy as np
from math import acos, cos, asin, sin, atan2, tan, radians
import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
from nltk.corpus import stopwords
from dh2loop import Var
import logging
from logging.handlers import TimedRotatingFileHandler
from DH2_LConfig import host_,port_,DB_,user_,pwd_,export_path,DB_Collar_Rl_Log,DB_Collar_Maxdepth_Log,DB_Survey_Azi_Log,DB_Survey_Dip_Log,DB_Litho_Depth_Log,DB_Litho_Att_Val_Log,worker_proc,encoding_1,encoding_2
from multiprocessing import Process,Manager


           
def collar_collar_attri_final(DB_Collar_Export,src_csr,dst_csr,minlong,maxlong,minlat,maxlat):
    '''
    Function Extracts data from tables collar and collarattr for processing attributes RL and Maxdepth
    Inputs:
        - src_csr : Coordinate Reference System of source 4326
        - dst_csr : Coordinate Reference System of destination 28350 to 28356
        - minlong,maxlong,minlat,maxlat :  coordinates of region 
  
    Output: is a csv file ,the data processed for RL, Maxdepth attribute in required format  
        
    '''

    fieldnames=['CollarID','HoleId','Longitude','Latitude','RL','MaxDepth','X','Y']
    out= open(os.path.join(export_path,DB_Collar_Export), "w",encoding =encoding_1)
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    
    logger1 = logging.getLogger('dev1')   #looging data
    logger1.setLevel(logging.INFO)
    DB_Collar_Rl_Log_Name = os.path.join(export_path, DB_Collar_Rl_Log)
    fileHandler1 = logging.FileHandler(DB_Collar_Rl_Log_Name)  #'RL.log')   #DB_Collar_Rl_Log)  #'RL.log')
    logger1.addHandler(fileHandler1)

    logger2 = logging.getLogger('dev2')
    logger2.setLevel(logging.INFO)
    DB_Collar_MD_Log_Name = os.path.join(export_path, DB_Collar_Maxdepth_Log)
    fileHandler2 = logging.FileHandler(DB_Collar_MD_Log_Name)  #'MD.log')    #DB_Collar_Maxdepth_Log)  #'MD.log')
    logger2.addHandler(fileHandler2)
    
    query =""" SELECT collar.id, replace(replace(collar.holeid, '\"', '_'), ',', '_') as holeid, 
		  collar.longitude, collar.latitude, collarattr.attributecolumn, collarattr.attributevalue 
		  FROM public.collar 
		  INNER JOIN collarattr 
		  ON collar.id = collarattr.collarid 
		  WHERE(longitude BETWEEN %s  AND %s AND latitude BETWEEN %s AND %s)
		  ORDER BY collarattr.collarid ASC """
   
    
    conn = None
    Pre_id = 0
    Pre_hole_id = ''
    Pre_Longitude =0.0
    Pre_latitude = 0.0
   
    Cur_id = 0
    Cur_hole_id = ''
    Cur_Longitude =0.0
    Cur_latitude = 0.0
   
    list_rl= []
    list_maxdepth =[]
    RL =''
    Maxdepth =''
    write_to_csv = False
    x2=0.0
    y2=0.0
    #create tranformer object with source and destination read from config file
    transformer = Transformer.from_crs(src_csr, dst_csr)
   
    try:
       conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
       cur = conn.cursor()
       Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds read from config file
       cur.execute(query,Bounds)
       collar_collarAttr_Filter = [list(elem) for elem in cur]
       DicList_collar_collarattr = [list(elem) for elem in Var.Attr_col_collar_dic_list]
       for collar_ele in collar_collarAttr_Filter:
         for Dic_ele in DicList_collar_collarattr:  # loop through each element of DB extraction
            if(collar_ele[4] == Dic_ele[0]):
               
               if(Dic_ele[1] == 'rl'):  # check for RL
                  if(Pre_id== collar_ele[0] or Pre_id ==0 or Cur_id ==collar_ele[0]):
                     list_rl.append(parse_num_rl(collar_ele[5],logger1,collar_ele[0]))
                     Pre_id =collar_ele[0]
                     Pre_hole_id = collar_ele[1]
                     Pre_Longitude =collar_ele[2]
                     Pre_latitude = collar_ele[3]
          
                  else:
                     if(len(list_rl)!=0):
                        RL = maximum(list_rl,'NAN')
                     else:
                        RL = maximum(list_rl,'NAN')
                     if(len(list_maxdepth)!=0):
                        Maxdepth = maximum(list_maxdepth,'NAN')
                     else:
                        Maxdepth = maximum(list_maxdepth,'NAN')
                         
                         
                     write_to_csv = True
                     
                     x2,y2=transformer.transform(Pre_latitude,Pre_Longitude) # tranform long,latt for x y calculation
                     if(write_to_csv == True):   # write to csv file
                        out.write('%d,' %Pre_id)
                        out.write('%s,' %Pre_hole_id)
                        out.write('%f,' %Pre_Longitude)
                        out.write('%f,' %Pre_latitude)
                        out.write('%s,' %RL)
                        out.write('%s,' %Maxdepth)
                        out.write('%f,' %x2)
                        out.write('%f,' %y2)
                        out.write('\n')
                        write_to_csv =False
                        RL =''
                        Maxdepth =''
                        Pre_id = 0
                        Pre_hole_id = ''
                        Pre_Longitude =0.0
                        Pre_latitude = 0.0
 
                     Cur_id =collar_ele[0]
                     Cur_hole_id = collar_ele[1]
                     Cur_Longitude =collar_ele[2]
                     Cur_latitude = collar_ele[3]

                     list_rl.clear()
                     list_maxdepth.clear()
                     list_rl.append(parse_num_rl(collar_ele[5],logger1,collar_ele[0]))
              
               elif(Dic_ele[1]=='maxdepth'):  # check for maxdepth
                  if(Pre_id== collar_ele[0] or Pre_id == 0 or Cur_id ==collar_ele[0] ):
                     list_maxdepth.append(parse_num_maxdepth(collar_ele[5],logger2,collar_ele[0]))
                     Pre_id =collar_ele[0]
                     Pre_hole_id = collar_ele[1]
                     Pre_Longitude =collar_ele[2]
                     Pre_latitude = collar_ele[3]

               
                  else:
                     if(len(list_rl)!=0):
                        RL = maximum(list_rl,'NAN')
                     else:
                        RL = maximum(list_rl,'NAN')
                        
                     if(len(list_maxdepth)!=0):
                        Maxdepth = maximum(list_maxdepth,'NAN')
                     else:
                        Maxdepth = maximum(list_maxdepth,'NAN')
                    
                     write_to_csv = True

                     x2,y2=transformer.transform(Pre_latitude,Pre_Longitude) # tranform long,latt for x y calculation
                     if(write_to_csv == True):   # write to csv file
                        out.write('%d,' %Pre_id)
                        out.write('%s,' %Pre_hole_id)
                        out.write('%f,' %Pre_Longitude)
                        out.write('%f,' %Pre_latitude)
                        out.write('%s,' %RL)
                        out.write('%s,' %Maxdepth)
                        out.write('%f,' %x2)
                        out.write('%f,' %y2)
                        out.write('\n')
                        write_to_csv =False
                        RL =''
                        Maxdepth =''
                        Pre_id = 0
                        Pre_hole_id = ''
                        Pre_Longitude =0.0
                        Pre_latitude = 0.0
        
                     Cur_id =collar_ele[0]
                     Cur_hole_id = collar_ele[1]
                     Cur_Longitude =collar_ele[2]
                     Cur_latitude = collar_ele[3]
                     list_maxdepth.clear()
                     list_rl.clear()
                     list_maxdepth.append(parse_num_maxdepth(collar_ele[5],logger2,collar_ele[0]))
   
       cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
       print(error)
    finally:
       if conn is not None:
          conn.close()

   

def parse_num_maxdepth(s1,logger2,collarID):
   
   '''
   Function evaluates the Maxdepth values according to the requirements.
   Inputs:
        - S1: maxdepth as string 
        - logger2: looger object to log data
        -collarID:collarID of hole.
   
   '''
   s1=s1.lstrip().rstrip()
   if s1.isalpha():
      logger2.info("%d, %s, %s" ,collarID ,s1,"alpha in MaxDepth ,In csv NAN is added")
      return(None)
      
   elif s1 == '-999':
      logger2.info("%d, %s ,%s" ,collarID,s1," MaxDepth is -999,In csv NAN is added")
      return(None)
   elif re.match("^[-+]?[0-9]+$", s1):
       if s1[0] == '-' :
           logger2.info("%d, %s, %s" ,collarID,s1," Maxdepth integer -ve,convert to +ve and add to csv file ")
           return(int(s1) * -1)
       else:
           logger2.info("%d ,%s, %s" ,collarID,s1,"Maxdepth integer +ve,in required status to use directly in csv file ")
           return(int(s1))
   elif re.match("[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?", s1):
      if s1[0] =='-':
         logger2.info("%d, %s ,%s" ,collarID,s1," Maxdepth float -ve,convert to +ve and add to csv file ")
         return(float(s1) * -1)
      else :
         
         logger2.info("%d, %s, %s" ,collarID,s1," Maxdepth float +ve,in required status to use directly in csv file  ")
         return(float(s1))
   


def parse_num_rl(s1,logger1,collarID):
    '''
    Function evaluates the Rl values according to the requirements.
    Inputs:
        - S1: Rl as string 
        - logger2: looger object to log data
        -collarID:collarID of hole.
    '''
    s1=s1.lstrip().rstrip()
    
    if s1.isalpha():
       logger1.info("%d, %s ,%s" ,collarID,s1,"alpha in RL,In csv file NAN is added",)
       return(None)
    elif re.match("^[-+]?[0-9]+$", s1):
       if int(s1) > 10000 :
           logger1.info("%d, %s ,%s" ,collarID,s1," integer RL > 10000,In csv file NAN is added")
           return(None)
       else :
           logger1.info("%d, %s, %s" ,collarID,s1," integer RL ,in required state to use directly in csv file")
           return(int(s1))
    elif re.match("[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?", s1):
       if float(s1) > 10000.0:
          logger1.info("%d, %s ,%s" ,collarID,s1," float RL  > 10000,In csv file NAN is added")
          return(None)
       else :
          logger1.info("%d, %s ,%s" ,collarID,s1," float RL ,in required state to use directly in csv file")
          return(float(s1))


def Parse_Num(s1):
    '''
    Function parse the number 
    Input : 
        -s1: string value.
    '''
    s1=s1.lstrip()
    if re.match("^[-+]?[0-9]+$", s1):
       return(int(s1))
    elif re.match("[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?", s1):
       return(float(s1))
    elif s1.isalpha():
       return(None)



def maximum(iterable, default):
    '''
    Like max(), but returns a default value if iterable is empty.
    '''
    try:
        return str(max(i for i in iterable if i is not None))
    except ValueError:
        return default





def collar_attr_col_dic():
   '''
   Function to extract rl,maxdepth dictionary from DB, and stored in list
   '''
   
   query = '''SELECT  thesaurus_collar_elevation.attributecolumn,thesaurus_collar_elevation.cet_attributecolumn  FROM thesaurus_collar_elevation
              union all 
              SELECT  thesaurus_collar_maxdepth.attributecolumn,thesaurus_collar_maxdepth.cet_attributecolumn  FROM thesaurus_collar_maxdepth'''       

   conn = None
   
   try:
      conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
      cur = conn.cursor()
      cur.execute(query)

      for rec in cur:
         Var.Attr_col_collar_dic_list.append(rec)

      #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)   # for testing 
   
      #with open('Dic_attr_col_collar.csv', 'w',encoding="utf-8") as f:
         #cur.copy_expert(outputquery, f)
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()



   

def survey_final_incl(DB_Survey_Export,minlong,maxlong,minlat,maxlat):
   '''
   Function which extracts data from tables dhsurvey,dhsurveyattr and collar  for attributes Depth,Azimuth and Inclination
   Inputs:
        - minlong,maxlong,minlat,maxlat :  coordinates of region 
   Output:
        - DB_Survey_Export : The processed data after extraction is written to this csv file in required format.
   '''
      
   logger1 = logging.getLogger('dev1')
   logger1.setLevel(logging.INFO)
   DB_Survey_Dip_Log_Name = os.path.join(export_path, DB_Survey_Dip_Log)
   fileHandler1 = logging.FileHandler(DB_Survey_Dip_Log_Name)
   logger1.addHandler(fileHandler1)


   logger2 = logging.getLogger('dev2')
   logger2.setLevel(logging.INFO)
   DB_Survey_Azi_Log_Name = os.path.join(export_path, DB_Survey_Azi_Log)
   fileHandler2 = logging.FileHandler(DB_Survey_Azi_Log_Name)
   logger2.addHandler(fileHandler2)
   
   fieldnames=['CollarID','Depth','Azimuth','Inclination']
   out= open(os.path.join(export_path,DB_Survey_Export), "w",encoding =encoding_1)
   for ele in fieldnames:
        out.write('%s,' %ele)
   out.write('\n')
   query =""" select t1.collarid,t1.depth,t2.attributecolumn,t2.attributevalue,t2.dhsurveyid  
		from public.dhsurvey t1
		inner join public.collar 
		on collar.id = t1.collarid
		inner join dhsurveyattr t2
		on t1.id = t2.dhsurveyid
		where((collar.longitude BETWEEN %s AND %s) AND(collar.latitude BETWEEN %s AND %s) )
		order by collar.id ASC """
   conn = None
   AZI = 0.0
   AZI_list =0.0
   AZI_sub_list=[]
   AZI_INCLI_LIST =[]
   AZI_ele = 0.0
   Inclination = -90 #default Inclination to -90
   Pre_id =0
   b_AZI =False
   #b_DIP =False
   b_DEPTH =False
   back_survey_0 =0
   back_survey_1 = -1.1
   #One_DIP=False
   One_AZI =False
   
   
   try:
      conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
      cur = conn.cursor()
      Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
      cur.execute(query,Bounds)
      Survey_First_Filter = [list(elem) for elem in cur]
      Survey_dic_list = [list(elem) for elem in Var.Attr_col_survey_dic_list] 
      for survey_ele in Survey_First_Filter:   
         for attr_col_ele in Survey_dic_list:
            if (survey_ele[2] == attr_col_ele[0])  :  #AZI or Inclination
               if(Pre_id !=survey_ele[0]  and Pre_id !=0):
                  if(len(AZI_INCLI_LIST)!=0):
                     AZI_INCLI_Print=[]
                     #list_AZI =[]
                     #list_DIP =[]
                     if AZI_sub_list:
                        AZI_ele=max(AZI_sub_list)
                     if float(survey_ele[1]) < 0 :
                        survey_ele[1] = abs(survey_ele[1])

                     AZI_INCLI_LIST.append([back_survey_1,AZI_ele,Inclination])
                        
                     #if Pre_id == 125476 :
                        #print("125476")
                        #print(AZI_INCLI_LIST)


                     AZI_1 =0.0
                     AZI_2 =0.0
                     INCLI_1 =0.0
                     INCLI_2 =0.0
                     for loop1_ele in AZI_INCLI_LIST:
                        for loop2_ele in AZI_INCLI_LIST:
                           if(loop1_ele[0] == loop2_ele[0]):

                                 if abs(loop1_ele[1]) == abs(loop2_ele[1]) and abs(loop1_ele[2]) == abs(loop2_ele[2]):
                                    AZI_1=loop1_ele[1]
                                    INCLI_1 = loop1_ele[2]
                                    
                                 elif abs(loop1_ele[1]) != abs(loop2_ele[1]) and abs(loop1_ele[2]) != abs(loop2_ele[2]):
                                    if abs(loop1_ele[1]) > abs(loop2_ele[1]):
                                       AZI_2 = loop1_ele[1]
                                     
                                    else:
                                       AZI_2 = loop2_ele[1]
                                     
                                    
                                    if abs(loop1_ele[2]) > abs(loop2_ele[2]):
                                       if(abs(loop1_ele[2]) ==90):  #default Inclination bug solved
                                          INCLI_2 = loop2_ele[2]
                                       else:
                                          INCLI_2 = loop1_ele[2]
                                      
                                    else:
                                       if(abs(loop2_ele[2]) ==90): #default Inclination bug solved
                                          INCLI_2 = loop1_ele[2]
                                       else:
                                          INCLI_2 = loop2_ele[2]

                                    #if(abs(loop1_ele[2]) ) == 90 :
                                       #INCLI_2 = loop2_ele[2]
                                    #elif(abs(loop2_ele[2]) ) == 90 :
                                       #INCLI_2 = loop1_ele[2] 
                                   

                                   
                        if abs(AZI_1) > abs(AZI_2):
                           AZI_ = AZI_1
                        else:
                            AZI_ = AZI_2

                        if abs(INCLI_1) > abs(INCLI_2):
                           if(abs(INCLI_1 ) ==90): #default Inclination bug solved
                              INCLI_ = INCLI_2
                           else:
                              INCLI_ = INCLI_1
                        else:
                           if(abs(INCLI_2) ==90): #default Inclination bug solved
                              INCLI_ = INCLI_1
                           else :
                              INCLI_ = INCLI_2

                            
                        
                        AZI_INCLI_Print.append([loop1_ele[0],AZI_,INCLI_])
                        AZI_1 =0.0
                        AZI_2 =0.0
                        INCLI_1 =0.0
                        INCLI_2 =0.0
                        AZI_= 0.0
                        INCLI_ = 0.0
                           
   
                     #if Pre_id ==125476  :   #1914687
                        #print(AZI_INCLI_Print)
                     
                     b_set = set(tuple(x) for x in AZI_INCLI_Print)
                     AZI_DIP_Print_Filter = [ list(x) for x in b_set ]

                     #if Pre_id == 125476 :
                        #print(AZI_DIP_Print_Filter)

                     AZI_DIP_Print_Filter = dict((x[0], x) for x in AZI_DIP_Print_Filter).values()

                 

                     One_AZI= False

                     #if Pre_id == 117689:
                        #print(AZI_DIP_Print_Filter_ele[0])
                        #print(AZI_DIP_Print_Filter_ele[1])
                        #print(AZI_DIP_Print_Filter_ele[2])
                        #print(One_AZI)
                     #print(AZI_DIP_Print_Filter)
                     df = pd.DataFrame(AZI_DIP_Print_Filter,columns=['Depth','Azimuth','Inclination'])
                     df.sort_values("Depth", axis = 0, ascending = True, inplace = True)
                     AZI_DIP_Print_Filter = df.values.tolist()
                     if(len(AZI_DIP_Print_Filter)!=0):
                        for AZI_DIP_Print_Filter_ele in AZI_DIP_Print_Filter:
        
                           out.write('%d,' %back_survey_0)
                           out.write('%d,' %AZI_DIP_Print_Filter_ele[0])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[1])
                           out.write('%f,' %AZI_DIP_Print_Filter_ele[2])
                           out.write('\n')
                           

                           #if Pre_id == 117689:
                              #print(AZI_DIP_Print_Filter_ele[0])
                             # print(AZI_DIP_Print_Filter_ele[1])
                              #print(AZI_DIP_Print_Filter_ele[2])
                             # print(One_AZI)
                     
                     AZI_INCLI_Print.clear()
                     
                      
                  AZI_INCLI_LIST.clear()
                  
                  if(One_AZI==True):
                     out.write('%d,' %back_survey_0)
                     out.write('%d,' %back_survey_1)
                     out.write('%f,' %AZI)
                     out.write('%f,' %Inclination)
                     out.write('\n')
                  AZI =0.0
                  Inclination =-90  #default Inclination to -90
                  #One_DIP =False
                  One_AZI =False
                  AZI_sub_list.clear()
                  AZI_ele =0.0
 
                  back_survey_0 = 0
                  back_survey_1 = -1.1
                  Pre_id =0


                     
               if ('AZI' in attr_col_ele[1] and (Pre_id ==0 or Pre_id ==survey_ele[0])): # and back_survey_1 == survey_ele[1] ):   #AZI  processing
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi Alpha , It is not considered")
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                     logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi is -ve ,Sign is removed then considered.")
                     if float((survey_ele[3]).replace('\'','').replace('>','').replace('<','').strip())  > 360:
                        logger2.info("%d, %s ,%s" ,survey_ele[4],survey_ele[0]," Azi is > 360 , It is not considered")
                        continue
                     else:
                        logger2.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Azi is valid , It is considered")
                        if (back_survey_1 == survey_ele[1] or back_survey_1==-1.1 ):
                           AZI = float((survey_ele[3]).replace('\'','').strip().replace('<','').replace('>','').rstrip('\n\r'))
                        
                           AZI_sub_list.append(AZI)
                           
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                          
                           One_AZI =True
                           
                           
                        else:
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                          
                           if float(survey_ele[1]) < 0:
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_INCLI_LIST.append([back_survey_1,AZI_ele,Inclination])
                     
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           AZI=0.0
                           Inclination=-90 #default Inclination to -90
                           AZI = float((survey_ele[3]).replace('\'','').strip().rstrip('\n\r'))
                           AZI_sub_list.append(AZI)
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                           One_AZI =False
                           
                           
                           

               if ('INCLINATION' in attr_col_ele[1] and (Pre_id ==survey_ele[0] or Pre_id ==0)) :   #Inclination  processing
                  Pre_id = survey_ele[0]
                  if survey_ele[3].isalpha():
                     logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Inclination is Alpha , It is not considered")
                     continue
                  elif survey_ele[3].replace('.','',1).lstrip('-').isdigit():
                     if float((survey_ele[3]).replace('\'','').replace('<','').strip())  > 90:  # combine al skip cases
                        logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Inclination is > 90 , It is not considered")
                        continue
                     elif float((survey_ele[3]).replace('\'','').replace('<','').strip()) < 0 or float((survey_ele[3]).replace('\'','').replace('<','').strip()) == 0 :
                        logger1.info("%d, %d ,%s" ,survey_ele[4],survey_ele[0]," Inclination is <= 0 , It is considered")
                        if (back_survey_1 == survey_ele[1] or  back_survey_1==-1.1):
                           Inclination= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
                    
                        else:
                  
                           if AZI_sub_list:
                              AZI_ele=max(AZI_sub_list)
                           if float(survey_ele[1]) < 0 :
                              survey_ele[1] = abs(survey_ele[1])
                           AZI_INCLI_LIST.append([back_survey_1,AZI_ele,Inclination])
                    
                           AZI_sub_list.clear()
                           AZI_ele =0.0
                           Inclination=-90  #default Inclination to -90
                           AZI=0.0
                           Inclination= float((survey_ele[3]).replace('\'','').replace('<','').replace('>','').strip())
                    
                           back_survey_0 =survey_ele[0]
                           back_survey_1 = survey_ele[1]
        
      
                  
   
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()



def attr_col_dic():
   '''
   Function extracts survey dictionary for attribute column AZI, Inclination from DB and stores in List
   '''
   
   
   query = ''' SELECT  thesaurus_survey_azimuth.attributecolumn,thesaurus_survey_azimuth.cet_attributecolumn  FROM thesaurus_survey_azimuth
               union all 
               SELECT  thesaurus_survey_Inclination.attributecolumn,thesaurus_survey_Inclination.cet_attributecolumn  FROM thesaurus_survey_Inclination   '''

   conn = None
   temp_list =[]
   try:
      
      conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
      cur = conn.cursor()
      cur.execute(query)

      for rec in cur:
         Var.Attr_col_survey_dic_list.append(rec)
      #uncomment if need to print file for verification.  
      #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
      #with open('Dic_attr_col_survey.csv', 'w') as f:
         #cur.copy_expert(outputquery, f)
 
      cur.close()
   except (Exception, psycopg2.DatabaseError) as error:
      print(error)
   finally:
      if conn is not None:
         conn.close()

   
         







def convert_survey(DB_Collar_Export,DB_Survey_Export,DB_Survey_Export_Calc):
   '''
   Function takes collar and survey extracted information and calculates X,Y,Z
   Input :
        - DB_Collar_Export: Data extracted and processed from collar and related tables
        - DB_Survey_Export: Data extracted and processed from survey and related tables
   Output:
        - DB_Survey_Export_Calc :x,y,z calculations for survey data 
   '''
   
   location=pd.read_csv(export_path +'/' +DB_Collar_Export)
   survey=pd.read_csv(export_path +'/' +DB_Survey_Export)
   survey=pd.merge(survey,location, how='left', on='CollarID')

   fieldnames=['CollarID','Depth','Azimuth','Inclination','X','Y','Z']
   out= open(os.path.join(export_path,DB_Survey_Export_Calc), "w",encoding =encoding_1)
   for ele in fieldnames:
      out.write('%s,' %ele)
   out.write('\n')
	
   last_CollarID= ''
   for index,row in survey.iterrows():
      if(row['CollarID'] != last_CollarID):
         X1=0.0
         Y1=0.0
         Z1=0.0
         last_Dip =0.0
         last_Azi =0.0
         last_Depth =0.0
         last_CollarID =0.0
         last_Dip=float(row['Inclination'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
         last_CollarID=(row['CollarID'])
         X1=float(row['X'])
         Y1=float(row['Y'])
         Z1=float(row['RL'])
      
			
         out.write('%s,' %last_CollarID)
         out.write('%f,' %last_Depth)
         out.write('%f,' %last_Azi)
         out.write('%f,' %last_Dip)
         out.write('%f,' %X1)
         out.write('%f,' %Y1)
         out.write('%f,' %Z1)
         out.write('\n')
         
      else:
         X2,Y2,Z2=dia2xyz(X1,Y1,Z1,last_Dip,last_Azi,last_Depth,float(row['Inclination']),float(row['Azimuth']),float(row['Depth']))  # x,y z calculation by function dis2xyz
         out.write('%s,' %last_CollarID)
         out.write('%f,' %float(row['Depth']))
         out.write('%f,' %float(row['Azimuth']))
         out.write('%f,' %float(row['Inclination']))
         out.write('%f,' %X2)
         out.write('%f,' %Y2)
         out.write('%f,' %Z2)
         out.write('\n')
         X1=X2
         Y1=Y2
         Z1=Z2
         last_Dip=float(row['Inclination'])
         last_Azi=float(row['Azimuth'])
         last_Depth=float(row['Depth'])
   out.close()




def dia2xyz(X1,Y1,Z1,I1,Az1,Distance1,I2,Az2,Distance2):
   '''
   Function takes two Inclination,AZI,Depth values for X,Y,Z value
   Inputs:
           - X1  : x value fron collar extraction for a particular hole
           - Y1  : y value fron collar extraction for a particular hole
           - Z1  : RL value fron collar extraction for a particular hole
           - I1  : INCLI_1 value from survey
           - Az1  : Azi_1 value from survey
           - Distance1 : Depth_1 value from survey
           - I2   : INCLI_2 value from survey
           - Az2  : Azi_2 value from survey
           - Distance2 :  Depth_2 value from survey
           
   Output:
           - X,Y,Z value for Deppth_1 to Depth_2
        
   '''
   I1=radians(I1)
   Az1=radians(Az1)
   I2=radians(I2)
   Az2=radians(Az2)
	
   MD = Distance2 - Distance1

   Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
   if(Beta==0):
      RF=1
   else:
      RF = 2 / Beta * tan(Beta / 2)

   dX = MD/2 * (sin(I1)*sin(Az1) + sin(I2)*sin(Az2))*RF
   dY = MD/2 * (sin(I1)*cos(Az1) + sin(I2)*cos(Az2))*RF
   dZ = MD/2 * (cos(I1) + cos(I2))*RF

   X2 = X1 + dX
   Y2 = Y1 + dY
   Z2 = Z1 - dZ
	
 
   return X2,Y2,Z2





def attr_val_dic():
    '''
    Funtion extracts Attribute value dictionary table from DB.
    '''
    conn = None
    query = '''select * from thesaurus_geology_lithology_code'''
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        cur.execute(query)
        for record in cur:
            #print(record)
            Var.Attr_val_Dic.append(record)
        #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
        #with open('Dic_attr_val.csv', 'w') as f:
            #cur.copy_expert(outputquery, f)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
      print(error)
    finally:
        if conn is not None:
            conn.close()

    

def litho_dico():
    '''
    Function Extracts Dictionary for lithology from DB.
    '''
    query = ''' select thesaurus_geology_hierarchy.fuzzuwuzzy_terms  from thesaurus_geology_hierarchy '''
    conn = None
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        cur.execute(query)
        for record in cur:
            Var.Litho_dico.append(record)
            
        #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
        #with open('Dic_litho.csv', 'w') as f:
            #cur.copy_expert(outputquery, f)
        
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
    


    
    

def clean_up():
    '''
    Function extracts clean up dictionary from DB.
    '''
    conn = None
    query = ''' select thesaurus_cleanup.cleanup_term  from thesaurus_cleanup '''
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        cur.execute(query)
        for record in cur:
            Var.cleanup_dic_list.append(record)
        #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
       
        #with open('cleanup_dic.csv', 'w',encoding="utf-8") as f:
            #cur.copy_expert(outputquery, f)
        
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()

    

  
def clean_text(text):
    '''
    Function clean the text by symbols and specified text, uses cleanup dictionary
    Input: 
         - Text
    output: 
        - Cleaned text

    '''
    text=text.lower().replace('unnamed','').replace('meta','').replace('meta-','').replace('undifferentiated ','').replace('unclassified ','').replace(' undifferentiated ','')
    text=text.replace('differentiated','').replace('undiff','').replace('undiferentiated','').replace('undifferntiates','').replace(' undivided','')
    text=(re.sub('\(.*\)', '', text)) # removes text in parentheses
    text=(re.sub('\[.*\]', '', text)) # removes text in parentheses
    text=text.replace('>','').replace('?','').replace('/',' ')
    text=text.lstrip().rstrip()   #strip of left and right spaces
    text = re.sub('\s+', ' ', text)  # for multiple spaces replace by one space
    text = text.replace('>' , ' ')
    text = text.replace('<', ' ')
    text = text.replace('/', ' ')
    text = text.replace(' \' ', ' ')
    text = text.replace(',', ' ')
    text = text.replace('%', ' ')
    text = text.replace('-', ' ')
    text = text.replace('_', ' ')
    #text = text.replace('', ' ')
    #text = text.replace('+', '')
    text = text.replace('\'', ' ') 
    if text.isnumeric():
        text = re.sub('\d', ' ', text) #replace numbers
    text = text.replace('&' , ' ')
    text = text.replace(',', ' ')
    text = text.replace('.', ' ')
    text = text.replace(':', ' ')
    text = text.replace(';', ' ')
    text = text.replace('$', ' ')
    text = text.replace('@', ' ')
    text = text.replace('\'', '')
    text = text.replace('\\', '')  #replace backslash by space                      
	
    for cleanup_dic_ele in Var.cleanup_dic_list:
        cleaned_item =str(cleanup_dic_ele).replace('(','').replace(')','').replace(',','').replace('\'','')
        text = text.replace('cleaned_item','')
    return text




lemma = nltk.WordNetLemmatizer()
extra_stopwords = [
    'also',
]
stop = stopwords.words('english') + extra_stopwords


def tokenize(text, min_len=1):
    '''Function that tokenize a set of strings
    Input:
        -text: set of strings
        -min_len: tokens length
    Output:
        -list containing set of tokens'''

    tokens = [word.lower() for sent in nltk.sent_tokenize(text)
              for word in nltk.word_tokenize(sent)]
    filtered_tokens = []

    for token in tokens:
        if token.isalpha() and len(token) >= min_len:
            filtered_tokens.append(token)

    return [x.lower() for x in filtered_tokens if x not in stop]


def tokenize_and_lemma(text, min_len=0):
    '''Function that retrieves lemmatised tokens
    Inputs:
        -text: set of strings
        -min_len: length of text
    Outputs:
        -list containing lemmatised tokens'''
    filtered_tokens = tokenize(text, min_len=min_len)

    lemmas = [lemma.lemmatize(t) for t in filtered_tokens]
    return lemmas



def attr_val_with_fuzzy():
    '''
    Function gets the fuzzuwuzzy string of the lithology text .The lithology text is cleaned,lemmatised and tokenized.
    Input: Dictionaries Extracted
    Output: is a List and csv file of fuzzywuzzy with score for lithology.
    '''
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    attr_val_sub_list=[]
    fieldnames=['CollarID','code','Attr_val','cleaned_text','Fuzzy_wuzzy','Score']
    out= open(os.path.join(export_path,"Attr_val_fuzzy.csv"), "w",encoding =encoding_1)
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    Attr_val_Dic_new = [list(elem) for elem in Var.Attr_val_Dic]
    for Attr_val_Dic_ele in Attr_val_Dic_new:
        

       
        cleaned_text_1=clean_text(Attr_val_Dic_ele[2])
        cleaned_text_1=tokenize_and_lemma(cleaned_text_1)
        cleaned_text=" ".join(str(x) for x in cleaned_text_1)  #join each word as string with space

        #cleaned_text=clean_text(Attr_val_Dic_ele[2])  # for logging
        #cleaned_text =  cleaned_text.replace(' rock ',' rocks')   # to handle rock and rocks to get proper fuzzywuzzy
        #cleaned_text =  cleaned_text.replace(' rock',' rocks')  
        if  ' rock ' in cleaned_text :
            cleaned_text =  cleaned_text.replace(' rock ',' rocks ')   # to handle rock and rocks to get proper fuzzywuzzy
        elif ' rock' in cleaned_text:
            cleaned_text =  cleaned_text.replace(' rock',' rocks ') 
        words=(re.sub('\(.*\)', '', cleaned_text)).strip()
        
        #words =  words.replace(' rock',' rocks')   # for mafic rock to get as mafic in csv , since tokenization removes it.
        #if (words == 'mafic rock'):
         #   print(words)
        
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        for Litho_dico_ele in Var.Litho_dico:
            litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")
            
            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                        
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                        
                    else:
                        
                        top.append([sc[0],sc[1]])
        
        
        #if (words == 'mafic rock'):
            #print(words)     
        if bestmatch >80:
            
            Var.Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
           
            
        else:
            
            Var.Attr_val_fuzzy.append([Attr_val_Dic_ele[0],Attr_val_Dic_ele[1],Attr_val_Dic_ele[2],cleaned_text,'Other',bestmatch])  #top_new[1]])
            
            out.write('%d,' %int(Attr_val_Dic_ele[0]))
            out.write('%s,' %Attr_val_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Attr_val_Dic_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))     #.replace(',' , '').replace('\n' , ''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('Other,')
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
            
            



def Depth_validation(row_2,row_3,collarid,dhsurveyid,logger1):
    '''
    Funtion validates the from and to depth values according to the requirment
    Input : 
        - From Depth
        - To Depth
    Output:
        - From Depth,To Depth : Right Depth values for from and to depth 
    '''
   
    
    from_depth = row_2               
    to_depth = row_3
    if (from_depth is not None and to_depth is not None) or  (from_depth is not None or to_depth is not None) :
        if(to_depth == 'NULL' or to_depth == None):
            to_depth = from_depth +0.1
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"todepth is NULL/None ,0.1 added to from_depth result is todepth")
            return from_depth,to_depth
        elif to_depth>from_depth:
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"to_depth > from_depth , which is considered as is")
            return row_2,row_3
        elif from_depth == to_depth:
            to_depth = to_depth+0.01
            row_3=to_depth
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"to_depth == from_depth , 0.01 is added to to_depth")
            return row_2,row_3
        elif from_depth >to_depth:
            row_2=to_depth       
            row_3=from_depth
            logger1.info("%d, %d ,%d, %d ,%s " ,collarid,dhsurveyid,from_depth,to_depth,"from_depth > to_depth , depths are swapped")
            return row_2,row_3
        
            
            
def Depth_validation_comments(row_2,row_3) :   #,collarid,dhsurveyid):
    '''
    Funtion validates the from and to depth values according to the requirment
    Input : 
        - From Depth
        - To Depth
    Output:
        - From Depth,To Depth : Right Depth values for from and to depth 
    '''
      
    from_depth = row_2               
    to_depth = row_3
    if (from_depth is not None and to_depth is not None) or  (from_depth is not None or to_depth is not None) :
        if(to_depth == 'NULL' or to_depth == None):
            to_depth = from_depth +0.1
            return from_depth,to_depth
        elif to_depth>from_depth:
            return row_2,row_3
        elif from_depth == to_depth:
            to_depth = to_depth+0.01
            row_3=to_depth
            return row_2,row_3
        elif from_depth >to_depth:
            row_2=to_depth       
            row_3=from_depth
            return row_2,row_3


def final_lithology(DB_Lithology_Export,minlong,maxlong,minlat,maxlat):
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    For Each row extracted the from and to depth values are validated , generated fuzzywuzzy values for the lithology along with the score are printed .
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - csv file with the extracted data with fuzzywuzzy and score.
    '''
    query = """select t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn, t1.attributevalue,t1.dhgeologyid 
		 from public.dhgeologyattr t1 
		 inner join public.dhgeology t2 
		 on t1.dhgeologyid = t2.id 
		 inner join collar t3 
		 on t3.id = t2.collarid 
		 inner join clbody t4 
		 on t4.companyid = t3.companyid
		 inner join public.thesaurus_geology_lithology t5
		 on t1.attributecolumn = t5.attributecolumn
		 WHERE(t3.longitude BETWEEN %s AND %s) AND(t3.latitude BETWEEN %s AND %s) 
		 ORDER BY t3.companyid ASC"""

    conn = None
    logger1 = logging.getLogger('dev1')
    logger1.setLevel(logging.INFO)
    DB_Litho_Depth_Log_Name = os.path.join(export_path, DB_Litho_Depth_Log)
    fileHandler1 = logging.FileHandler(DB_Litho_Depth_Log_Name)
    logger1.addHandler(fileHandler1)
    
    
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query,Bounds)
        First_Filter_list = [list(elem) for elem in cur]
    
        fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Attribute_column','Comapny_Lithocode','Company_Lithology','CET_Lithology','Score']  # for looging
        out= open(os.path.join(export_path,DB_Lithology_Export), "w",encoding =encoding_1)
    
        for ele in fieldnames:
            out.write('%s,' %ele)
        out.write('\n')
    
        for First_filter_ele in First_Filter_list:
            for Attr_val_fuzzy_ele in Var.Attr_val_fuzzy:
                if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                    First_filter_ele[2],First_filter_ele[3] =Depth_validation(First_filter_ele[2],First_filter_ele[3],First_filter_ele[1],First_filter_ele[6],logger1)
                    out.write('%d,' %First_filter_ele[0])
                    out.write('%d,' %First_filter_ele[1])
                    out.write('%d,' %First_filter_ele[2])
                    out.write('%s,' %First_filter_ele[3])
                    out.write('%s,' %First_filter_ele[4])  # for logging 
                    out.write('%s,' %Attr_val_fuzzy_ele[1])
                    out.write('%s,' %Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',',''))
                    out.write('%s,' %Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',',''))   #.replace(',' , ''))
                    out.write('%d,' %int(Attr_val_fuzzy_ele[5]))
                    out.write('\n')

        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()



def Attr_COl():
    '''
    Function Extracts Attrcolumn dictionary from DB.
    '''
    #query = """SELECT * FROM public.dic_att_col_lithology"""
    query = """SELECT * FROM public.dic_att_col_lithology_1"""  # logging
    #conn = psycopg2.connect(host="130.95.198.59", port = 5432, database="gswa_dh", user="postgres", password="loopie123pgpw")
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    cur.execute(query)
    for record in cur:
        Attr_col_list.append(record)
    outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query)
   
    with open('Dic_attr_col.csv', 'w') as f:
        cur.copy_expert(outputquery, f)
    

    cur.close()
    conn.close()
    
    
    
    
def First_Filter():
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    For Each row extracted the from and to depth values are validated .
    '''
    
    print("------------------start First_Filter------------")
    start = time.time()
    #out= open("DB_lithology_First1.csv", "w",encoding ="utf-8")
    query = """select t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn, t1.attributevalue ,t1.dhgeologyid 
    from public.dhgeologyattr t1 
    inner join public.dhgeology t2 
    on t1.dhgeologyid = t2.id 
    inner join collar t3 
    on t3.id = t2.collarid 
    inner join clbody t4 
    on t4.companyid = t3.companyid 
    WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN - 30.5 AND - 27.5) 
    ORDER BY t3.companyid ASC"""


    
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    cur.execute(query)
    a_list = [list(elem) for elem in cur]
    for row in a_list:
        att_val=row[4]
        for att_col_ele in Attr_col_list:
            dic_att_col=str(att_col_ele).replace('(','').replace(')','').replace(',','').replace('\'','')
            
            if att_val == dic_att_col :
                from_depth = row[2]                
                to_depth = row[3]
                if from_depth is not None and to_depth is not None:
                    if to_depth>from_depth:
                        First_Filter_list.append(row)
                        #print(row)
                    elif from_depth == to_depth:
                        to_depth = to_depth+0.01
                        row[3]=to_depth
                        First_Filter_list.append(row)
                        #print(row)
                    elif from_depth >to_depth:   
                        row[2]=to_depth       
                        row[3]=from_depth
                        First_Filter_list.append(row)
                        #print(row)
                 
                    
                   
                    
   

    cur.close()
    conn.close()
    end = time.time()
    
    
    
def Final_Lithology_old():
    '''The lithology data extracted from DB,fuzzywuzzy values for the lithology along with the score are generated to a csv file.
    '''
    
    print("--------start of Final -----------")
    bestmatch=-1
    bestlitho=''
    top=[]
    fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode','Company_Lithology','cleaned_text','CET_Lithology','Score']
    out= open("DB_lithology_Final_old.csv", "w",encoding =encoding_1)
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')

    
    logger1 = logging.getLogger('dev1')
    logger1.setLevel(logging.INFO)
    DB_Litho_Att_Val_Log_Name = os.path.join(export_path, DB_Litho_Att_Val_Log)
    fileHandler1 = logging.FileHandler(DB_Litho_Att_Val_Log_Name)
    logger1.addHandler(fileHandler1)

    query = '''SELECT dic_attr_val_lithology_filter.company_id,dic_attr_val_lithology_filter.company_code,replace(dic_attr_val_lithology_filter.comapany_litho, ',' , '_') as comapany_litho  FROM dic_attr_val_lithology_filter'''
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    cur.execute(query)
    a_list = [list(elem) for elem in cur]
    for row in a_list:    
        for First_filter_ele in First_Filter_list:
                    
            company_code = row[1]
            company_litho = row[2]
            
            if int(row[0]) == First_filter_ele[0] and  row[1] == First_filter_ele[5]:
                               
                cleaned_text_1=clean_text(row[2])
                cleaned_text_2=tokenize_and_lemma(cleaned_text_1)
                cleaned_text=" ".join(str(x) for x in cleaned_text_2)
                
                cleaned_text =  cleaned_text.replace(' rock ',' rocks')   # to handle rock and rocks to get proper fuzzywuzzy
                cleaned_text =  cleaned_text.replace(' rock',' rocks') 
                #print(cleaned_text)
                words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
                #words=words.split(" ")
                words=words.rstrip('\n\r').split(" ")
                last=len(words)-1 #position of last word in phrase

                for Litho_dico_ele in Litho_dico:              
                    
                    litho_words=str(Litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")
                    scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
                    for sc in scores:                        
                        if(sc[1]>bestmatch): #better than previous best match
                            bestmatch =  sc[1]
                            bestlitho=litho_words[0]
                            #top=sc
                            top.append([sc[0],sc[1]])
                            if(sc[0]==words[last]): #bonus for being last word in phrase
                                bestmatch=bestmatch * 1.01
                        elif (sc[1]==bestmatch): #equal to previous best match
                            if(sc[0]==words[last]): #bonus for being last word in phrase
                                bestlitho=litho_words[0]
                                bestmatch=bestmatch*1.01
                            else:
                                #top=top+sc
                                top.append([sc[0],sc[1]])

                
                if bestmatch >80:
                    
                    out.write('%s,' %First_filter_ele[0])
                    out.write('%s,' %First_filter_ele[1])
                    out.write('%s,' %(First_filter_ele[2]))   #.replace(',' ,' '))
                    out.write('%s,' %First_filter_ele[3])
                    out.write('%s,' %row[1])
                    out.write('%s,' %row[2])
                    out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
                    out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
                    
                    out.write('%d,' %bestmatch)    #top_new[1])
                    out.write('\n')
                    logger1.info("%d, %d, %s, %s ,%s , %s , %d " ,First_filter_ele[0],First_filter_ele[6] ,row[2],cleaned_text_1,cleaned_text,bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''),bestmatch)  # logging 
                    top.clear()
                    #top_new[:] =[]
                    CET_Litho=''
                    bestmatch=-1
                    bestlitho=''
                else:
                    
                    out.write('%s,' %First_filter_ele[0])
                    out.write('%s,' %First_filter_ele[1])
                    out.write('%s,' %(First_filter_ele[2]))   #.replace(',' ,' '))
                    out.write('%s,' %First_filter_ele[3])
                    out.write('%s,' %row[1])
                    out.write('%s,' %row[2])
                    out.write('%s,' %cleaned_text)
                    out.write('Other,')
                    out.write('%d,' %bestmatch)   #top_new[1])
                    out.write('\n')
                    logger1.info("%d, %d, %s, %s ,%s ,%s , %d " ,First_filter_ele[0],First_filter_ele[6] ,row[2],cleaned_text_1,cleaned_text,'Other',bestmatch)  # logging 
                    top.clear()
                    #top_new[:] =[]
                    CET_Litho=''
                    bestmatch=-1
                    bestlitho=''

    cur.close()
    conn.close()
    out.close()


def upscale_lithology(DB_Lithology_Export,DB_Lithology_Upscaled_Export):
    '''
    Function upscales the CET_Loithology generated using the CET hierarchy dictionary to level1,level2,level3
    Input: 
        - DB_Lithology_Export csv file 
    Output:
        - is a csv file DB_Lithology_Upscaled_Export with upscales data 
    '''

    Hierarchy_litho_dico_List =[]
    query = """ select thesaurus_geology_hierarchy.detailed_lithology,thesaurus_geology_hierarchy.lithology_subgroup,thesaurus_geology_hierarchy.lithology_group  
            from thesaurus_geology_hierarchy """
    
    conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
    cur = conn.cursor()
    cur.execute(query)
    Hierarchy_litho_dico_List  = [list(elem) for elem in cur]
    CET_hierarchy_dico = pd.DataFrame(Hierarchy_litho_dico_List,columns=['detailed_lithology','lithology_subgroup','lithology_group'])
    DB_Lithology= pd.read_csv(export_path +'/'+ DB_Lithology_Export,encoding = encoding_2, dtype='object')
    Upscaled_Litho=pd.merge(DB_Lithology, CET_hierarchy_dico, left_on='CET_Lithology', right_on='detailed_lithology')
    Upscaled_Litho.sort_values("Company_ID", ascending = True, inplace = True)
    del Upscaled_Litho['Unnamed: 9']
    Upscaled_Litho.to_csv (export_path +'/'+ DB_Lithology_Upscaled_Export, index = False, header=True)
    
    



def remove_duplicates_litho(DB_Lithology_Upscaled_Export,Upscaled_Litho_NoDuplicates_Export):
    '''
    Function removes the multiple companies logging the same lithology (or duplicate rows)
    Input:
        - DB_Lithology_Upscaled_Export csv file
    Output:
        - Upscaled_Litho_NoDuplicates_Export csv file.
    '''
    Final_Data= pd.read_csv(export_path +'/' + DB_Lithology_Upscaled_Export)   
    Final_Data.CollarID = Final_Data.CollarID.astype(int)
    Final_Data.Fromdepth = Final_Data.Fromdepth.astype(float)
    Final_Data.Todepth = Final_Data.Todepth.astype(float)
    Final_Data.sort_values(['CollarID', 'Fromdepth','Todepth'], inplace=True)
    singles = Final_Data.drop_duplicates(subset=['Company_ID','CollarID','Fromdepth','Todepth','Comapny_Lithocode'],keep='first',inplace =False)   #,'Company_Lithology','CET_Lithology','Score'
    singles.to_csv(export_path +'/'+ Upscaled_Litho_NoDuplicates_Export,index=False)





def dsmincurb (len12,azm1,dip1,azm2,dip2):
    '''
    Function calculates dz,dn,de  Balanced Tangential Method by using the Ratio Factor (RF).
    Inputs:
        - len12 : length as specified in function calculate_x_y_z()
        - azm1 : azimuth1 float value .
        - azm2 : azimuth2 float value .
        - dip1 : dip1 float value.
        - dip2 : dip2 float value.
        
    '''
    #DEG2RAD = 3.141592654/180.0
    #i1 = (90 - float(dip1)) * DEG2RAD
    i1 = np.deg2rad(90 - float(dip1))
    #a1 = float(azm1) * DEG2RAD
    a1 = np.deg2rad(float(azm1))
    #i2 = (90 - float(dip2)) * DEG2RAD
    i2 = np.deg2rad(90 - float(dip2))
    #a2 = float(azm2) * DEG2RAD
    a2 = np.deg2rad(float(azm2))  #DEG2RAD
	
    #Beta = acos(cos(I2 - I1) - (sin(I1)*sin(I2)*(1-cos(Az2-Az1))))
    dl = acos(cos(float(i2)-float(i1))-(sin(float(i1))*sin(float(i2))*(1-cos(float(a2)-float(a1)))))
    if dl!=0.:
        rf = 2*tan(dl/2)/dl  # minimum curvature
    else:
        rf=1				 # balanced tangential
    dz = 0.5*len12*(cos(float(i1))+cos(float(i2)))*rf
    dn = 0.5*len12*(sin(float(i1))*cos(float(a1))+sin(float(i2))*cos(float(a2)))*rf
    de = 0.5*len12*(sin(float(i1))*sin(float(a1))+sin(float(i2))*sin(float(a2)))*rf
    return dz,dn,de
	#modified from pygslib

def interp_ang1D(azm1,dip1,azm2,dip2,len12,d1):
    '''
     convert angles to coordinates
     Inputs :
        - len12 : length as specified in function calculate_x_y_z()
        - azm1 : azimuth1 float value .
        - azm2 : azimuth2 float value .
        - dip1 : dip1 float value.
        - dip2 : dip2 float value.
        - d1: distance as specified .
     
    '''
    x1,y1,z1 = ang2cart(azm1,dip1)
    x2,y2,z2 = ang2cart(azm2,dip2)

    # interpolate x,y,z
    x = x2*d1/len12 + x1*(len12-d1)/len12
    y = y2*d1/len12 + y1*(len12-d1)/len12
    z = z2*d1/len12 + z1*(len12-d1)/len12

    # get back the results as angles
    azm,dip = cart2ang(x,y,z)
    return azm, dip
    #modified from pygslib
	
def ang2cart(azm, dip):
    '''
    Function converts angle to coordinates x,y,z.
    Inputs : 
         -azimuth2 float value .
         - dip1 : dip1 float value.
    
    '''
    #DEG2RAD=3.141592654/180.0
    # convert degree to rad and correct sign of dip
    #razm = float(azm) * float(DEG2RAD)
    razm =  float(np.deg2rad(float(azm)))
    #rdip = -(float(dip)) * float(DEG2RAD)
    rdip =  float(np.deg2rad(-float(dip)))

    # do the conversion
    x = sin(razm) * cos(rdip)
    y = cos(razm) * cos(rdip)
    z = sin(rdip)
    return x,y,z
    #modified from pygslib
	
def cart2ang(x,y,z):
    '''
    Function converts coordinates   x,y,z to azi,dip.
    Inputs : 
         -x,y,z .
        
    
    '''
    if x>1.: x=1.
    if x<-1.: x=-1.
    if y>1.: y=1.
    if y<-1.: y=-1.
    if z>1.: z=1.
    if z<-1.: z=-1.
    #RAD2DEG=180.0/3.141592654
    #pi = 3.141592654
    azm= float(atan2(x,y))
    if azm<0.:
        azm= azm + math.pi*2
    #azm= azm + math.pi*2
    #azm = float(azm) * float(RAD2DEG)
    azm =float(np.rad2deg(float(azm)))
    #dip = -(float(asin(z))) * float(RAD2DEG)
    dip =-float(np.rad2deg(float(asin(z))))
    return azm, dip
    #modified from pygslib
	
def angleson1dh(indbs,indes,ats,azs,dips,lpt):
    '''
    Function calls dependedant function 
    Inputs :
     -indbs :start of index
     -indes:end of index.
        
    '''
    for i in range (indbs,indes):
        a=ats[i]
        b=ats[i+1]
        azm1 = azs[i]
        dip1 = dips[i]
        azm2 = azs[i+1]
        dip2 = dips[i+1]
        len12 = ats[i+1]-ats[i]
        if lpt>=a and lpt<b:
            d1= lpt- a
            azt,dipt = interp_ang1D(azm1,dip1,azm2,dip2,len12,d1)
            return azt, dipt
    a=ats[indes]
    azt = azs[indes]
    dipt = dips[indes]
    if float(lpt)>=float(a):
        return   azt, dipt
    else:
        return   np.nan, np.nan

def convert_lithology(DB_Collar_Export, DB_Survey_Export, Upscaled_Litho_NoDuplicates_Export, DB_Lithology_Export_Calc):
    '''
    Function calculates x,y,z 
    Inputs:
        - DB_Collar_Export: collar table exported data with X,Y calculations.
        - DB_Survey_Export :collar table exported data with X,Y calculations
        -Upscaled_Litho_NoDuplicates_Export : lithology data extraction.
    Output:
        -DB_Lithology_Export_Calc :X,Y,Z of lithology.
    '''
    #print("--------start of convert Lithology -----------")
    
    #collar= pd.read_csv('DB_Collar_Export.csv',encoding = "ISO-8859-1", dtype='object')
    #survey= pd.read_csv('DB_Survey_Export.csv',encoding = "ISO-8859-1", dtype='object')
    #litho= pd.read_csv('Upscaled_Litho_NoDuplicates_Export.csv',encoding = "ISO-8859-1", dtype='object')
    
        
    collar= pd.read_csv(export_path +'/' + DB_Collar_Export )  
    survey= pd.read_csv(export_path +'/' + DB_Survey_Export ) 
    litho= pd.read_csv(export_path +'/' + Upscaled_Litho_NoDuplicates_Export) 
    
    collar.CollarID = collar.CollarID.astype(str)
    survey.CollarID = survey.CollarID.astype(str)
    survey.Depth = survey.Depth.astype(float)
    litho.CollarID = litho.CollarID.astype(str)
    litho.Fromdepth = litho.Fromdepth.astype(float)
    litho.Todepth = litho.Todepth.astype(float)

    #collar.sort_values(['CollarID'], inplace=True)
    #survey.sort_values(['CollarID', 'Depth'], inplace=True)
    #litho.sort_values(['CollarID', 'Fromdepth'], inplace=True)


    global idc
    global xc
    global yc
    global zc
    global idc
    global ats
    global azs
    global dips
    global idt
    global fromt
    global tot
    global cetlit
    global company_lithocode
    global company_Lithology
    global score
    global detailed_lithology
    global lithology_subgroup
    global lithology_group
    
    

    
    
    idc = collar['CollarID'].values
    xc = collar['X'].values
    yc = collar['Y'].values
    zc = collar['RL'].values
    ids = survey['CollarID'].values
    ats = survey['Depth'].values
    azs = survey['Azimuth'].values
    dips = survey['Inclination'].values
    idt =litho['CollarID'].values
    fromt = litho['Fromdepth'].values
    tot = litho['Todepth'].values
    company_lithocode = litho['Comapny_Lithocode'].values
    company_Lithology = litho['Company_Lithology'].values
    cetlit=litho['CET_Lithology'].values
    score = litho['Score'].values
    detailed_lithology = litho['detailed_lithology'].values
    lithology_subgroup = litho['lithology_subgroup'].values
    lithology_group = litho['lithology_group'].values

    nc= idc.shape[0]
    ns= ids.shape[0]
    nt= idt.shape[0]


    global azmt
    global dipmt
    global xmt
    global ymt
    global zmt
    global azbt
    global dipbt
    global xbt
    global ybt
    global zbt
    global azet
    global dipet
    global xet
    global yet
    global zet
    

    azmt = np.empty([nt], dtype=float)
    dipmt = np.empty([nt], dtype=float)
    xmt = np.empty([nt], dtype=float)
    ymt = np.empty([nt], dtype=float)
    zmt = np.empty([nt], dtype=float)
    azbt = np.empty([nt], dtype=float)
    dipbt = np.empty([nt], dtype=float)
    xbt = np.empty([nt], dtype=float)
    ybt = np.empty([nt], dtype=float)
    zbt = np.empty([nt], dtype=float)
    azet = np.empty([nt], dtype=float)
    dipet = np.empty([nt], dtype=float)
    xet = np.empty([nt], dtype=float)
    yet = np.empty([nt], dtype=float)
    zet = np.empty([nt], dtype=float)

    azmt[:] = np.nan
    dipmt[:] = np.nan
    azbt [:]= np.nan
    dipbt [:]= np.nan
    azet[:] = np.nan
    dipet[:] = np.nan
    xmt[:] = np.nan
    ymt [:]= np.nan
    zmt [:]= np.nan
    xbt[:] = np.nan
    ybt[:] = np.nan
    zbt[:] = np.nan
    xet[:] = np.nan
    yet[:] = np.nan
    zet [:]= np.nan

    fieldnames=['CollarID','FromDepth','ToDepth','Comapny_Lithocode','Company_Lithology','CET_Lithology','Score','Detailed_lithology','Lithology_subgroup','Lithology_group','xbt','ybt','zbt','xmt','ymt', 'zmt', 'xet','yet','zet','azbt','dipbt']
    global out
    out= open(os.path.join(export_path,DB_Lithology_Export_Calc), "w",encoding =encoding_1)
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')

    global indbt 
    global indet 
    global inds 
    global indt
    global indbs
    global indes
    global sub_indbs
    global sub_indes
    
    indbt = 0
    indet = 0
    inds = 0
    indt = 0
    ii = 0
    global jc
    global js
    global jt

    global from_depth
    global mid_depth
    global to_depth

    global begin_f 
    global mid_f 
    global end_f

    global prev_dict
    global survey_sub_cnt

    
    
    
    for jc in range(nc):
        indbs = -1
        indes = -1
        for js in range(inds, ns):
            if idc[jc]==ids[js]:
                #print(ids[js])
                inds = js
                indbs = js
                global temp_Survey_df
                if(idc[jc] == '150942'):
                    ii =ii + 1
                #temp_Survey_df = (survey.loc[survey['CollarID'].isin([ids[js]])]).copy()
                temp_Survey_df = (survey.loc[survey['CollarID']== ids[js]])
                #start_pos = temp_Survey_df[temp_Survey_df['CollarID']==ids[js]].index.item()
                #print(start_pos)
                survey_sub_cnt=temp_Survey_df.shape[0]
                #print(survey_sub_cnt)
                #print(temp_Survey_df)
                break
        for js in range(inds, ns):
            if idc[jc]!=ids[js]:
                break
            else:
                inds = js
                indes = js
        
        if indbs==-1 or indes==-1:
            continue

        global azm1 
        global dip1 
        global at 

        azm1  = azs[indbs]
        dip1 = dips[indbs]
        at = 0.
        
        if indbs==indes:
            continue

        global x 
        global y 
        global z

        begin_f = False 
        mid_f  = False
        end_f = False

        global litho_sub_cnt
            
        x =  xc[jc]
        y =  yc[jc]
        z =  zc[jc]

        sub_indbs = indbs
        sub_indes = indes

        litho_ind = 0
        global survey_ind
        survey_ind = 0

        litho_sub_cnt_flag = True
        tmp_litho_sub_cnt = 1

        litho_more_ele = False
        start_pos =0

        prev_dict ={"todepth" : -0.0,
                            "x": -0.0,
                            "y": -0.0,
                            "z": -0.0}

        

        for jt in range(indt, nt):
            #if(idc[jc]!=idt[jt]):
                #break
            if idc[jc]==idt[jt]:
                #print(idt[jt])
                #print(idc[jc])
                global temp_litho_df
                #temp_litho_df = (litho.loc[litho['CollarID'].isin([idt[jt]])]).copy()
                if litho_sub_cnt_flag == True :  # to keep track of count till the end of one collarID
                    temp_litho_df = (litho.loc[litho['CollarID']== idt[jt]])
                    #filtered_df = df.loc[df['Symbol'] == 'A99']
                    litho_sub_cnt=temp_litho_df.shape[0]
                    litho_sub_cnt_flag = False

                    #print(temp_Survey_df)
                    #start_pos = temp_Survey_df[temp_Survey_df['Depth']== 0].index.item()
                    
                    start_pos_list = temp_Survey_df[temp_Survey_df['CollarID']== idt[jt]].index.tolist() # fetch start index of survey sub datafframe #.item()
                    start_pos = start_pos_list[0]  # fetch only the first element index
                    #print(start_pos)
                    #print(temp_Survey_df)
                    

                else :
                    tmp_litho_sub_cnt = tmp_litho_sub_cnt + 1
                    
                #if(litho_sub_cnt > survey_sub_cnt)
                    
                #print(litho_sub_cnt)
                #print(temp_litho_df)
                #print(tot)
                #print(idc[jc])

                if(idc[jc] == '125471'):
                    ii =ii + 1

                
                indt = jt


                
                Depth_survey = temp_Survey_df['Depth'].values
                litho_Todepth = temp_litho_df['Todepth'].values

                #print(Depth_survey)
                #print(litho_Todepth)
                

                from_depth = fromt[jt]
                mid_depth = float(fromt[jt]) + float((float(tot[jt])-float(fromt[jt]))/2)
                to_depth = tot[jt]

                #end_pos = temp_Survey_df[temp_Survey_df['Depth']==tot[jt]].index.item()
                

                begin_f = True
                mid_f = True
                end_f  = True

                

                #print(idt[jt])
               
                #print(tot[jt] in temp_Survey_df.Depth.values)

                if(tot[jt] in temp_Survey_df.Depth.values  and tot[jt] > Depth_survey [survey_ind+1]  ):
                    #tmp_litho_sub_cnt = litho_sub_cnt -1
                   #loc = np.where(Depth_survey [survey_ind] ==tot[jt])
                    #print(tot[jt])

                    end_pos = temp_Survey_df[temp_Survey_df['Depth']==tot[jt]].index.item()

                    #from_depth = fromt[jt]
                    #to_depth = tot[jt]
                    #fromt[jt] = Depth_survey [survey_ind]
                    #print(pos)
                    #print(tot[jt])
                    while (start_pos < end_pos):
                        #print(survey_ind)
                        #print(Depth_survey [survey_ind])
                        fromt[jt] = Depth_survey [survey_ind]
                        #print(fromt[jt])
                        tot[jt] = Depth_survey [survey_ind + 1]
                        #print(tot[jt])
                        calculate_x_y_z()
                        #print_xyz_csv()
                        survey_ind = survey_ind +1
                        start_pos= start_pos + 1
                        #print("calculated")

                    #print_xyz_csv()

                #elif(tot[jt] not in temp_Survey_df.Depth.values and tot[jt] > max(Depth_survey)  and tmp_litho_sub_cnt <= litho_sub_cnt   and  survey_sub_cnt-1 == survey_ind+1 ) : # survey elements are  over for collarID but litho still has values , Eg collarId 1111
                    #calculate_x_y_z()
                    
                    
                #elif(tot[jt] not in temp_Survey_df.Depth.values and tot[jt] > max(Depth_survey)  and tmp_litho_sub_cnt == litho_sub_cnt  and survey_ind != survey_sub_cnt-2 ) :   #litho in last row but servey is not in last row,
                   # if survey_ind != survey_sub_cnt-2:
                    #    survey_ind = survey_ind +1
                     #   calculate_x_y_z()
                        

                elif(tot[jt] not in temp_Survey_df.Depth.values and tot[jt] > max(Depth_survey)):  #and tmp_litho_sub_cnt == litho_sub_cnt ) :  litho last row but survey got many intermediates to cover
                    #print("Max of Survey", "\t",max(Depth_survey))
                    #if survey_sub_cnt-1 == survey_ind+1 and tmp_litho_sub_cnt == litho_sub_cnt :
                        #litho_more_ele = True
                        
                    #if  survey_ind+1 == survey_sub_cnt-1 and tmp_litho_sub_cnt == litho_sub_cnt :
                        #litho_more_ele = True

                    #if(tot[jt] > Depth_survey [survey_ind+1]  and  survey_ind <= survey_sub_cnt-2):
                        #while True:
                            #if Depth_survey [survey_ind] <=  tot[jt]  >= Depth_survey [survey_ind+1] : #and survey_ind <= survey_sub_cnt -2:
                               #survey_ind = survey_ind +1
                            #else:
                                #litho_more_ele == True
                                #break
                    if survey_sub_cnt-1 == survey_ind and tmp_litho_sub_cnt == litho_sub_cnt :   #survey_sub_cnt-1 == survey_ind+1 and tmp_litho_sub_cnt < litho_sub_cnt :
                        calculate_x_y_z()
                        continue
                        
                    if survey_sub_cnt-1 == survey_ind and tmp_litho_sub_cnt < litho_sub_cnt :   #survey_sub_cnt-1 == survey_ind+1 and tmp_litho_sub_cnt < litho_sub_cnt :
                        calculate_x_y_z()
                        if  tmp_litho_sub_cnt < litho_sub_cnt :
                            litho_more_ele = True
                        elif tmp_litho_sub_cnt == litho_sub_cnt :
                            litho_more_ele = False
                            
                        continue
                    
                    if litho_more_ele == True:
                        calculate_x_y_z()
                        if  tmp_litho_sub_cnt < litho_sub_cnt :
                            litho_more_ele = True
                        elif tmp_litho_sub_cnt == litho_sub_cnt :
                            litho_more_ele = False
                        
                        continue

                    if Depth_survey[survey_ind] <= tot[jt] >= Depth_survey[survey_ind + 1] and tmp_litho_sub_cnt <= litho_sub_cnt and survey_ind +1 == survey_sub_cnt-1:  #survey end but litho still exists Eg: 132164,132168 on 26/8/20
                        survey_ind = survey_ind +1
                        calculate_x_y_z()
                        continue
                        
                    if  Depth_survey[survey_ind] <= tot[jt] >= Depth_survey[survey_ind + 1] and tmp_litho_sub_cnt == litho_sub_cnt and survey_ind +1 == survey_sub_cnt-2:    # survey needs increment Eg hole3 
                        survey_ind = survey_ind +1
                        calculate_x_y_z()
                        continue
                        
                    
                        
                        
                    #tmp_litho_sub_cnt = litho_sub_cnt -1
                    #print(tot[jt])
                    #print(jt)
                    #print(survey_ind)
                    #last_Litho_ToDepth = tot[jt]
                    while(survey_ind <  survey_sub_cnt):
                       #print(survey_ind)
                       #last_Litho_ToDepth = tot[jt]
                       #print(last_Litho_ToDepth)
                       #fromt[jt] = Depth_survey [survey_ind]
                       #print(fromt[jt])
                       #if(survey_ind < survey_sub_cnt-1):
                       if(survey_ind == survey_sub_cnt-1):
                           #print("inside")
                           #print(survey_ind)
                           #print(survey_sub_cnt-2)
                           #print(last_Litho_ToDepth)
                           #tot[jt] = last_Litho_ToDepth

                           if litho_sub_cnt == 1 :   # for holeid = 132171, 1/9/20
                               fromt[jt] = from_depth
                               tot[jt] = to_depth
                               calculate_x_y_z()
                               break



                           
                           fromt[jt] = Depth_survey [survey_ind]
                           #print(fromt[jt])
                           tot[jt] = to_depth
                           #print(tot[jt])
                           calculate_x_y_z()
                           #survey_ind = survey_ind +1
                           break
                           #print_xyz_csv()
                           #survey_ind = survey_ind +1
                           
                       else:
                           #print(survey_ind)
                           fromt[jt] = Depth_survey [survey_ind]
                           #print(fromt[jt])
                           tot[jt] = Depth_survey [survey_ind + 1]
                           #print(tot[jt])
                           calculate_x_y_z()
                           #print_xyz_csv()
                           survey_ind = survey_ind +1
                           #print(survey_ind)

                    #print_xyz_csv()   #chk from to interval in csv


                elif(tot[jt] < Depth_survey [survey_ind+1] or tot[jt] == Depth_survey [survey_ind+1] ):  #and litho_sub_cnt <=0) :
                    calculate_x_y_z()
                    #tmp_litho_sub_cnt = litho_sub_cnt -1
                    #print(tmp_litho_sub_cnt)
                    #print_xyz_csv()


                elif tot[jt] not in temp_Survey_df.Depth.values and tot[jt] > max(Depth_survey) and  tmp_litho_sub_cnt == litho_sub_cnt and end_pos > litho_sub_cnt:   # bug,for holeid 132170
                    end_pos = temp_Survey_df[temp_Survey_df['Depth']==tot[jt]].index.item()
                    while (start_pos < end_pos):
                        #print(survey_ind)
                        #print(Depth_survey [survey_ind])
                        if Depth_survey [survey_ind] <=  tot[jt]  >= Depth_survey [survey_ind+1]:
                            fromt[jt] = Depth_survey [survey_ind]
                            #print(fromt[jt])
                            tot[jt] = Depth_survey [survey_ind + 1]
                            #print(tot[jt])
                            calculate_x_y_z()
                            #print_xyz_csv()
                            survey_ind = survey_ind +1
                            start_pos= start_pos + 1
                        elif Depth_survey [survey_ind] <=  tot[jt]  <= Depth_survey [survey_ind+1]:
                            fromt[jt] = Depth_survey [survey_ind]
                            tot[jt] = to_depth
                            calculate_x_y_z()
                            survey_ind = survey_ind +1
                            start_pos= start_pos + 1
                            
                            
                

                elif(tot[jt] > Depth_survey [survey_ind+1]):
                    while True:
                        if Depth_survey [survey_ind] <=  tot[jt]  >= Depth_survey [survey_ind+1]:
                           survey_ind = survey_ind +1
                           start_pos= start_pos + 1   # todepth needs survey to increment , increment start for condition 1 Eg:collarID 169555
                        else:
                            break
                        
                    #tmp_litho_sub_cnt = litho_sub_cnt -1
                    #survey_ind +1 = survey_ind = survey_ind +2
                    #fromt[jt] = Depth_survey [survey_ind] 
                    #tot[jt] = Depth_survey [survey_ind + 1]
                    calculate_x_y_z()
                    
                    
                    

                
              
                   
                
    out.close()



    

def calculate_x_y_z(): #indbs,indes,ats,azs,dips,fromt,tot,jt):
                '''
                Function calcultaes X,Y,Z begin,mid and end values.
                '''
                #from
                global azm1
                global dip1
                global at

                global xbt 
                global ybt 
                global zbt 
                global xmt 
                global ymt 
                global zmt 
                global xet 
                global yet 
                global zet

                global x 
                global y 
                global z

                global indbs
                global indes

                global begin_f 
                global mid_f 
                global end_f

                global prev_dict
                global litho_sub_cnt
                global survey_sub_cnt
                global survey_ind
                
                
                

                
                    
                if from_depth != fromt[jt] and fromt[jt] <= from_depth <= tot[jt] :   # hole 153637, on 3/9/20
                    fromt[jt] = from_depth
                    azm2,dip2 = angleson1dh(indbs,indes,ats,azs,dips,fromt[jt])
                else:
                    azm2,dip2 = angleson1dh(indbs,indes,ats,azs,dips,fromt[jt])
                    
                
                #print(fromt[jt])
                azbt[jt] = azm2
                dipbt[jt] = dip2
                len12 = float(fromt[jt]) - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xbt[jt] = de
                ybt[jt] = dn
                zbt[jt] = dz

                #xbt[jt] = float(x)+float(xbt[jt])
                #ybt[jt] = float(y)+float(ybt[jt])
                #zbt[jt] = float(z)+float(zbt[jt])

                
                

                
                
                #print(xbt[jt],"\t",ybt[jt],"\t",zbt[jt])
                #if dipbt[jt] > 0 : # if Inclination is +ve, growing UP
                    #zbt[jt] = (dz *-1)
                #else :
                    #zbt[jt] = dz

                 #update
                
                
                azm1 = azm2
                dip1 = dip2
                at   = float(fromt[jt])
                #print(azm1,"\t",dip1,"\t",at)

                #midpoint
                mid = float(fromt[jt]) + float((float(tot[jt])-float(fromt[jt]))/2)
                if (mid_depth == mid or mid_depth == fromt[jt] or mid_depth == tot[jt]) :
                    azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,mid)
                elif ( float(fromt[jt]) <= mid_depth <= float(tot[jt])):
                    mid = mid_depth
                    azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,mid)
                else:
                    azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,mid)
                    
                
                #print(mid)
                azmt[jt] = azm2
                dipmt[jt]= dip2
                len12 = mid - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xmt[jt] = de + xbt[jt]
                ymt[jt] = dn + ybt[jt]
                zmt[jt] = dz + zbt[jt]

                #xmt[jt] = float(x)+float(xmt[jt])
                #ymt[jt] = float(y)+float(ymt[jt])
                #zmt[jt] = float(z)+float(zmt[jt])

                

                
                    
                    
                
                #print(xmt[jt],"\t",ymt[jt],"\t",zmt[jt])
                #if dipmt[jt] > 0 : # if Inclination is +ve, growing UP
                    #zmt[jt] = (dz * -1)+ zbt[jt]
                #else:
                    #zmt[jt] = dz + zbt[jt]

                #update
                azm1 = azm2
                dip1 = dip2
                at   = mid
                #print(azm1,"\t",dip1,"\t",at)

                #to
                azm2, dip2 = angleson1dh(indbs,indes,ats,azs,dips,float(tot[jt]))
                #print(tot[jt])
                azet[jt] = azm2
                dipet[jt] = dip2
                len12 = float(tot[jt]) - at
                dz,dn,de = dsmincurb(len12,azm1,dip1,azm2,dip2)
                xet[jt] = de + xmt[jt]
                yet[jt] = dn + ymt[jt]
                zet[jt] = dz + zmt[jt]

                #xet[jt] = float(x)+float(xet[jt])
                #yet[jt] = float(y)+float(yet[jt])
                #zet[jt] = float(z)+float(zet[jt])

                
                    
                
                #print(xet[jt],"\t",yet[jt],"\t",zet[jt])
                #if dipet[jt] > 0: # if Inclination is +ve, growing UP
                    #zet[jt] = (dz * -1) + zmt[jt]
                #else:
                    #zet[jt] = dz + zmt[jt]

                #update
                azm1 = azm2
                dip1 = dip2
                at   = float(tot[jt])
                #print(azm1,"\t",dip1,"\t",at)

                #calculate coordinates
                
                
                xbt[jt] = float(x)+float(xbt[jt])
                ybt[jt] = float(y)+float(ybt[jt])
                zbt[jt] = float(z)+float(zbt[jt])
                #print("begin flag=","\t",begin_f)
                if from_depth == fromt[jt] and begin_f == True :
                    print_xyz_Begin_csv()
                    begin_f = False

                #print(prev_dict)
                #print(begin_f)
                    
                if prev_dict["todepth"] == from_depth and begin_f == True and  survey_ind == survey_sub_cnt-2  :
                    #print(prev_dict)
                    #print(jt)
                    #print(survey_sub_cnt-1)
                    #print(survey_ind)
                    print_xyz_Begin_Prev_csv()
                    begin_f = False

                str_todepth = str(prev_dict["todepth"])   # for holeid = 150934 , on 2/9/20
                before, after = str_todepth.split('.')
                if int(before) == from_depth and begin_f == True :    # for holeid = 150934 , on 2/9/20
                    print_xyz_Begin_Prev_csv()
                    begin_f = False
                    
                
                xmt[jt] = float(x)+float(xmt[jt])
                ymt[jt] = float(y)+float(ymt[jt])
                zmt[jt] = float(z)+float(zmt[jt])
                if mid_depth == mid  and mid_f == True  :
                    print_xyz_Mid_csv()
                    mid_f =False

                #if fromt[jt] <= mid_depth <= mid:
                    #tot[jt] = mid
                    #calculate_x_y_z()
                
                
                #if  mid <= mid_depth <= tot[jt]:
                    #fromt[jt] = mid
                    #calculate_x_y_z()

                

                #if prev_dict["todepth"] == from_depth and mid_f == True and  survey_ind == survey_sub_cnt-2  :
                    #print_xyz_Mid_csv()
                    #mid_f =False

                #if prev_dict["todepth"] == from_depth and mid_f == True and   fromt[jt] <= mid_depth <= mid:     # for last depth who's mid != mid_depth  #survey_ind == survey_sub_cnt-2  :
                    #print_xyz_Mid_csv()
                    #mid_f =False
                    
                    
                xet[jt] = float(x)+float(xet[jt])
                yet[jt] = float(y)+float(yet[jt])
                zet[jt] = float(z)+float(zet[jt])


                #if prev_dict["todepth"] == from_depth and mid_f == True and   mid <= mid_depth <= tot[jt]:     # for last depth who's mid != mid_depth  #survey_ind == survey_sub_cnt-2  :
                    #print_xyz_End_csv()
                    #mid_f =False

                
                if to_depth == tot[jt] and end_f ==True :
                    print_xyz_End_csv()
                    tmp_dict=dict(todepth=tot[jt],x=xet[jt],y=yet[jt],z=zet[jt])
                    prev_dict=tmp_dict
                    #print(prev_dict)
                    end_f =False

                if mid_depth == tot[jt] and mid_f == True :
                    print_xyz_mid_inEnd()
                    mid_f =False

               
                    

                

                #(xbt[jt],"\t",ybt[jt],"\t",zbt[jt])
                #print(xmt[jt],"\t",ymt[jt],"\t",zmt[jt])
                #print(xet[jt],"\t",yet[jt],"\t",zet[jt])
                #print("survey Index","\t",survey_ind)

                # update for next interval
                
                
                x = xet[jt]
                y = yet[jt]
                z = zet[jt]





def print_xyz_Begin_csv(): #out,idt,fromt,tot,cetlit,xbt,ybt,zbt,xmt,ymt,zmt,xet,yet,zet,azbt,dipbt,jt):
    '''
    Function print begining information in csv file like id, depth,till x,y,z begin values.
    '''
    out.write('%s,' %idt[jt])
    out.write('%s,' %from_depth)
    out.write('%s,' %to_depth)
    out.write('%s,' %company_lithocode[jt])
    out.write('%s,' %company_Lithology[jt])
    out.write('%s,' %cetlit[jt])
    out.write('%s,' %score[jt])
    out.write('%s,' %detailed_lithology[jt])
    out.write('%s,' %lithology_subgroup[jt])
    out.write('%s,' %lithology_group[jt])
    out.write('%s,' %xbt[jt])
    out.write('%s,' %ybt[jt])
    out.write('%s,' %zbt[jt])

def print_xyz_Begin_Prev_csv(): #out,idt,fromt,tot,cetlit,xbt,ybt,zbt,xmt,ymt,zmt,xet,yet,zet,azbt,dipbt,jt):
    '''
    Function print begining information in csv file on specific condition , like id, depth,till x,y,z begin values.
    '''
    out.write('%s,' %idt[jt])
    out.write('%s,' %from_depth)
    out.write('%s,' %to_depth)
    out.write('%s,' %company_lithocode[jt])
    out.write('%s,' %company_Lithology[jt])
    out.write('%s,' %cetlit[jt])
    out.write('%s,' %score[jt])
    out.write('%s,' %detailed_lithology[jt])
    out.write('%s,' %lithology_subgroup[jt])
    out.write('%s,' %lithology_group[jt])
    out.write('%s,' %prev_dict["x"])
    out.write('%s,' %prev_dict["y"])
    out.write('%s,' %prev_dict["z"])

def print_xyz_Mid_csv():
    '''
    Function print mid x,y,z values.
    '''
    out.write('%s,' %xmt[jt])
    out.write('%s,' %ymt[jt])
    out.write('%s,' %zmt[jt])
                

def print_xyz_End_csv():
    '''
    Function print end x,y,z values.
    '''
    out.write('%s,' %xet[jt])
    out.write('%s,' %yet[jt])
    out.write('%s,' %zet[jt])
    out.write('%s,' %azbt[jt])
    out.write('%s,' %dipbt[jt])
    #out.write('%s,' %azmt[jt])
    #out.write('%s,' %dipmt[jt])
    #out.write('%s,' %azet[jt])
    #out.write('%s,' %dipet[jt])
    out.write('\n')
    #out.close()

def print_xyz_mid_inEnd():  # if mid is arbitrary in intermediate value
    '''
    Function print mid x,y,z values as end x,y,z on a condition.
    '''
    out.write('%s,' %xet[jt])
    out.write('%s,' %yet[jt])
    out.write('%s,' %zet[jt])



    


def distance(x1, y1, z1, x2, y2, z2):
    '''
    Function to find distance given coordinates x,y,z
    '''
    d = math.sqrt(math.pow(x2 - x1, 2) +
                math.pow(y2 - y1, 2) +
                math.pow(z2 - z1, 2)* 1.0) 
    return(d) 
  


#to verify the x,y,z of lithology with lepfrog data.
def Diff_XYZ():
    '''
    Function verifies lithology x,xy,z values are correct by getting difference with leapfrog file x,y,z.This function used for testing.
    '''
    Calculated_Data= pd.read_csv('DB_Lithology_Export_Calc.csv',encoding = encoding_2, dtype='object')
    Leapfrog_Data= pd.read_csv('DB_Lithology_Export_Leapfrog.csv',encoding = encoding_2, dtype='object')
    Calculated_Data.xbt=Calculated_Data['xbt'].astype(float)
    Calculated_Data.ybt=Calculated_Data['ybt'].astype(float)
    Calculated_Data.zbt=Calculated_Data['zbt'].astype(float)
    Leapfrog_Data.start_x=Leapfrog_Data['start_x'].astype(float)
    Leapfrog_Data.start_y=Leapfrog_Data['start_y'].astype(float)
    Leapfrog_Data.start_z=Leapfrog_Data['start_z'].astype(float)

    Calculated_Data.xmt=Calculated_Data['xmt'].astype(float)
    Calculated_Data.ymt=Calculated_Data['ymt'].astype(float)
    Calculated_Data.zmt=Calculated_Data['zmt'].astype(float)
    Leapfrog_Data.mid_x=Leapfrog_Data['mid_x'].astype(float)
    Leapfrog_Data.mid_y=Leapfrog_Data['mid_y'].astype(float)
    Leapfrog_Data.mid_z=Leapfrog_Data['mid_z'].astype(float)

    Calculated_Data.xet=Calculated_Data['xet'].astype(float)
    Calculated_Data.yet=Calculated_Data['yet'].astype(float)
    Calculated_Data.zet=Calculated_Data['zet'].astype(float)
    Leapfrog_Data.end_x=Leapfrog_Data['end_x'].astype(float)
    Leapfrog_Data.end_y=Leapfrog_Data['end_y'].astype(float)
    Leapfrog_Data.end_z=Leapfrog_Data['end_z'].astype(float)

    ######################

    x1=Calculated_Data['xbt'].values
    y1=Calculated_Data['ybt'].values
    z1=Calculated_Data['zbt'].values
    x2=Leapfrog_Data['start_x'].values
    y2=Leapfrog_Data['start_y'].values
    z2=Leapfrog_Data['start_z'].values

    x3=Calculated_Data['xmt'].values
    y3=Calculated_Data['ymt'].values
    z3=Calculated_Data['zmt'].values
    x4=Leapfrog_Data['mid_x'].values
    y4=Leapfrog_Data['mid_y'].values
    z4=Leapfrog_Data['mid_z'].values

    x5=Calculated_Data['xet'].values
    y5=Calculated_Data['yet'].values
    z5=Calculated_Data['zet'].values
    x6=Leapfrog_Data['end_x'].values
    y6=Leapfrog_Data['end_y'].values
    z6=Leapfrog_Data['end_z'].values


    x1_count= x1.shape[0]
    y1_count= y1.shape[0]
    z1_count= z1.shape[0]
    x2_count= x2.shape[0]
    y2_count= y2.shape[0]
    z2_count= z2.shape[0]


    x3_count= x3.shape[0]
    y3_count= y3.shape[0]
    z3_count= z3.shape[0]
    x4_count= x4.shape[0]
    y4_count= y4.shape[0]
    z4_count= z4.shape[0]


    x5_count= x5.shape[0]
    y5_count= y5.shape[0]
    z5_count= z5.shape[0]
    x6_count= x6.shape[0]
    y6_count= y6.shape[0]
    z6_count= z6.shape[0]

    Diff_1=[]
    Diff_2=[]
    Diff_3=[]

    if(x1_count == y1_count==z1_count==x2_count==y2_count==z2_count):
        for c1 in range(x1_count):
            p1 = distance(x1[c1],y1[c1],z1[c1],x2[c1],y2[c1],z2[c1])
            #print(p1)
            Diff_1.append(p1)
    #print(Diff_1)
    #print('########')


    if(x3_count == y3_count==z3_count==x4_count==y4_count==z4_count):
        for c2 in range(x3_count):
            p2 = distance(x3[c2],y3[c2],z3[c2],x4[c2],y4[c2],z4[c2])
            Diff_2.append(p2)
    #print(Diff_2)
    #print('########')


    if(x5_count == y5_count==z5_count==x6_count==y6_count==z6_count):
        for c3 in range(x5_count):
            p3 = distance(x5[c3],y5[c3],z5[c3],x6[c3],y6[c3],z6[c3])
            Diff_3.append(p3)
    #print(Diff_3)
    #print('########')

    Calculated_Data['Diff_1']=Diff_1
    #print(Diff_1)
    Calculated_Data['Diff_2']=Diff_2
    Calculated_Data['Diff_3']=Diff_3
    del Calculated_Data['Unnamed: 15']
    Calculated_Data.to_csv ('Litho_xyz_Diff.csv', index = False, header=True)








def Comments_Dic(minlong,maxlong,minlat,maxlat):
    '''
    Function selects the distinct attribute column and attribute value which matches in thesaurus 'thesaurus_geology_comment' with the given region
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - List with extracted data matching attribute column and thesaurus.
    '''
    'distict on(attributecol,attributeval) changes to only attributevalue'
    query = """Select DISTINCT ON (t1.attributevalue)
    t1.attributecolumn, t1.attributevalue
		 from public.dhgeologyattr t1 
		 inner join public.dhgeology t2 
		 on t1.dhgeologyid = t2.id 
		 inner join collar t3 
		 on t3.id = t2.collarid
		 inner join public.thesaurus_geology_comment t6
		 on t1.attributecolumn = t6.attributecolumn
		 WHERE(t3.longitude BETWEEN %s AND %s) AND (t3.latitude BETWEEN %s AND %s)"""
    conn = None
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query,Bounds)
    
        for record in cur:
            #print(record)
            #Var.Comments_dic.append(record)
            Var.Comments_dic.append(record)     #append to Comments_dic_tmp , since we need to take another variable ,use in split fun.
        #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query, bounds)
   
        #with open('Dic_Comments.csv', 'w') as f:
            #cur.copy_expert(outputquery, f)
            
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
    

def comments_dic_process(minlong,maxlong,minlat,maxlat):
    '''
    Function selects the distinct attribute column and attribute value which matches in thesaurus 'thesaurus_geology_comment' with the given region
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - List with extracted data matching attribute column and thesaurus.
    '''
    'distict on(attributecol,attributeval) changes to only attributevalue'
    conn = None
    query = """Select DISTINCT ON (t1.attributevalue)
    t1.attributecolumn, t1.attributevalue
		 from public.dhgeologyattr t1 
		 inner join public.dhgeology t2 
		 on t1.dhgeologyid = t2.id 
		 inner join collar t3 
		 on t3.id = t2.collarid
		 inner join public.thesaurus_geology_comment t6
		 on t1.attributecolumn = t6.attributecolumn
		 WHERE(t3.longitude BETWEEN %s AND %s) AND (t3.latitude BETWEEN %s AND %s)"""
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query,Bounds)
    
        for record in cur:
            #print(record)
            #Var.Comments_dic.append(record)
            Var.Comments_dic_tmp.append(record)     #append to Comments_dic_tmp , since we need to take another variable ,use in split fun.
            #outputquery = "COPY ({0}) TO STDOUT WITH CSV HEADER".format(query, bounds)
   
        #with open('Dic_Comments.csv', 'w') as f:
            #cur.copy_expert(outputquery, f)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()


def listoflist_comments_dic():
    '''
    Function gets the listoflist for Comments_dic_tmp , so that it can be used in split function.
    Input - Comments_dic_tmp.
    output - Comments_dic.
    '''
    Var.Comments_dic = [list(elem) for elem in Var.Comments_dic_tmp]
    
 




def comments_dic_litho_split(dic_litho_comments,filename,Comm_final_split_process_list,Num_worker_process):
    '''
    Function split listoflist to  the number of logical process considered 
    Input : 
         - dic_litho_comments : input  which needs to be split.
         -filename : Each split is printed to a file for verification.
         - Process_list : list to hold the split variables name for later use.
         - Num_worker_process : No worker process decided to select.
    Output:
        - Comments Dictionary splits in globals variables and in csv file.
    '''
    
    
    length_list= len(dic_litho_comments)
    partition_List = length_list / Num_worker_process   #split total data by process selected to make eaual chunks.
    actual_part_num = round(partition_List)    # split value with avilable logical process
    print(length_list)
    count=0
    if length_list > 0:      
        x=0
        y=length_list
        for i in range(x,y,actual_part_num):       
            x=i
            count = count + 1
            if count  == Num_worker_process  :  ## to merge last split with previous one as it is small
                total_split_val =(round(partition_List) * Num_worker_process)
                diff = length_list - total_split_val

                if diff > 0 or diff == 0 :
                    final_split = x+actual_part_num+diff
                    #print(final_split)
                    globals()[filename+ '_' + str(i)] = dic_litho_comments[x:final_split] #create global variable for later use
                    Comm_final_split_process_list.append(globals()[filename+ '_' + str(i)])  # add to process list 
                    #print("in final -1")
                    break           # exit after last split , since we added left out records

                elif diff < 0 :
                    final_split = x+ actual_part_num+diff 
                    globals()[filename+ '_' + str(i)] = dic_litho_comments[x:final_split]
                    Comm_final_split_process_list.append(globals()[filename+ '_' + str(i)])
                    #print("in final-2")
                    break
               
            else:
                globals()[filename+ '_' + str(i)] = dic_litho_comments[x:x+actual_part_num]
                Comm_final_split_process_list.append(globals()[filename+ '_' + str(i)])
                #print(" Not in final")
            

    #print(count) 

    # create csv file for verification. uncomment if require files.
    #part_num = actual_part_num
    #partnum1= part_num
    #tot_partnum = part_num
    #for x in range(0, count, 1):  # create csv file for verification. uncomment if require files.
        #if x > 0 :
                
            #var_name1 = filename+ '_' + str(tot_partnum)
            #print(var_name1)
            #my_df1 = pd.DataFrame(globals()[var_name1])  
            #file_name1 = var_name1 + '.csv'
            #my_df1.to_csv(os.path.join(export_path ,file_name1), index=False, header=True)  # create csv file for verification
            #tot_partnum = tot_partnum + part_num
                
        #elif x == 0:
            #var_name2 = filename + '_' + str(x)
            #my_df2 = pd.DataFrame(globals()[var_name2])   
            #file_name2 = var_name2 + '.csv'
            #my_df2.to_csv(os.path.join(export_path ,file_name2), index=False, header=True) # create csv file for verification
   


def comments_with_fuzzy_process(q,comment_split, Litho_dico):    #,file_name): #uncomment if need split files
    '''
    Function to find the fuzzywuzzy and score for each of the split with comments attribute value.This is the function which is called by Process funtion.
    Input : 
        q - To fill the fuzzywuzzy results from each process.
        comments_split - comments split to get fuzzywuzzy.
        Litho_Dico - pass Litho_Dico to get fuzzywuzzy as Process dont share memory.
        file_name- print each fuzzywuzzy to a csv file for varification.
    Output:
        - List and csv file with fuzzywuzzy and score for comments attribute value.
    '''
    
    #print(" B P")
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    Comments_fuzzy_Sub = []
    Comments_Dic_new = [list(elem) for elem in comment_split]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            #prinnt(" B P")
        else:
            Comments_fuzzy_Sub.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            #print("B P")
            


    
    #print to csv file for verification
    #my_df2 = pd.DataFrame(Comments_fuzzy_Sub , columns = ['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score'])
    #my_df2.to_csv(os.path.join(export_path ,file_name), index=False, header=True)
    q.put(Comments_fuzzy_Sub)
    #time.sleep(1)   


def comments_With_fuzzy():
    '''
    Function find the fuzzywuzzy and score to the comments attribute value 
    Input : 
        List with attribute column and attribute value.
    Output:
        - List with fuzzywuzzy and score for comments attribute value.
    '''
    
    bestmatch=-1
    bestlitho=''
    top=[]
    i=0
    comments_sub_list=[]
    fieldnames=['Comments_Field','Comment_Attr_val','Comment_cleaned_text','Comment_Fuzzy_wuzzy','Comment_Score']
    out= open(os.path.join(export_path,"Comments_fuzzy.csv"), "w",encoding =encoding_1)
    for ele in fieldnames:
        out.write('%s,' %ele)
    out.write('\n')
    Comments_Dic_new = [list(elem) for elem in Var.Comments_dic]
    for Comments_Dic_ele in Comments_Dic_new:
        cleaned_text=clean_text(Comments_Dic_ele[1])
        
        words=(re.sub('\(.*\)', '', cleaned_text)).strip() 
        words=words.rstrip('\n\r').split(" ")
        last=len(words)-1 #position of last word in phrase
        
        for litho_dico_ele in Var.Litho_dico:
            litho_words=str(litho_dico_ele).lower().rstrip('\n\r').replace('(','').replace(')','').replace('\'','').replace(',','').split(" ")

            scores=process.extract(cleaned_text, litho_words, scorer=fuzz.token_set_ratio)
            for sc in scores:                        
                if(sc[1]>bestmatch): #better than previous best match
                    bestmatch =  sc[1]
                    bestlitho=litho_words[0]
                    top.append([sc[0],sc[1]])
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestmatch=bestmatch*1.01
                elif (sc[1]==bestmatch): #equal to previous best match
                    if(sc[0]==words[last]): #bonus for being last word in phrase
                        bestlitho=litho_words[0]
                        bestmatch=bestmatch*1.01
                    else:
                        top.append([sc[0],sc[1]])

        i=0
        if bestmatch >80:
            Var.Comments_fuzzy.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,bestlitho,bestmatch]) #top_new[1]])  or top[0][1]
            out.write('%s,' %Comments_Dic_ele[0].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Comments_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%s,' %bestlitho.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
        else:
            Var.Comments_fuzzy.append([Comments_Dic_ele[0],Comments_Dic_ele[1],cleaned_text,'Other',bestmatch])  #top_new[1]])
            out.write('%s,' %Comments_Dic_ele[0].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %Comments_Dic_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','').replace(',' , '').replace('\n',''))
            out.write('%s,' %cleaned_text)   #.replace('(','').replace(')','').replace('\'','').replace(',','').replace('\n',''))
            out.write('Other,')
            out.write('%d,' %bestmatch)
            out.write('\n')
            top.clear()
            CET_Litho=''
            bestmatch=-1
            bestlitho=''
                   
                    
   

def final_lithology_with_comments(DB_lithology_With_Comments_Final_Export,minlong,maxlong,minlat,maxlat):
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    Also joins extraction of Comments attribute column with Comments attribute value .
    For Each row extracted, the from and to depth values are validated , generated fuzzywuzzy values for the lithology along with the score are printed .
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - csv file with the extracted data with fuzzywuzzy and score for lithology and comments.
    '''
    query = ''' SELECT m1.companyid, m1.collarid, m1.fromdepth, m1.todepth, m1.lith_attributecolumn, m1.lith_attributevalue, 
                m2.comments_attributecolumn, m2.comments_attributevalue 
                FROM 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS lith_attributecolumn, t1.attributevalue AS lith_attributevalue 
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_lithology t5
                 on t1.attributecolumn = t5.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m1
                 FULL JOIN		 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS comments_attributecolumn, t1.attributevalue AS comments_attributevalue  
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_comment t6
                 on t1.attributecolumn = t6.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m2 
                 on m1.dhgeologyid = m2.dhgeologyid'''
                 
                 
                 
        
    conn = None
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        #Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query)  #,Bounds)
    
        #print(cur)
        First_Filter_list = [list(elem) for elem in cur]
        fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Company_Lithocode','Company_Lithology','CET_Lithology','Score', 'Comment', 'CET_Comment', 'Comment_Score']
        out= open(os.path.join(export_path,DB_lithology_With_Comments_Final_Export), "w",encoding =encoding_1)
        for ele in fieldnames:
            out.write('%s,' %ele)
        out.write('\n')
        for First_filter_ele in First_Filter_list:
            if (First_filter_ele[0] == None and First_filter_ele[1]== None  and First_filter_ele[2]== None  and First_filter_ele[3]== None) or  (First_filter_ele[2] == None and First_filter_ele[3] ==None) :   # for empty fields, bug
                continue
            else :
                First_filter_ele[2],First_filter_ele[3] =Depth_validation_comments(First_filter_ele[2],First_filter_ele[3])  #  ,First_filter_ele[1],First_filter_ele[6],logger1) # validate depth
                CompanyID=First_filter_ele[0]
                CollarID=First_filter_ele[1]
                FromDepth=First_filter_ele[2]
                ToDepth=First_filter_ele[3]
                Company_Lithocode=""
                Company_Lithology=""
                CET_Lithology=""
                Score=0
                Comment=""
                CET_Comment=""
                Comment_Score=0
        
        
            for Attr_val_fuzzy_ele in Var.Attr_val_fuzzy:
                if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                    Company_Lithocode=Attr_val_fuzzy_ele[1]
                    Company_Lithology=Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','')
                    CET_Lithology=Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                    Score=Attr_val_fuzzy_ele[5]
                
            for Comments_fuzzy_ele in Var.Comments_fuzzy:
                if Comments_fuzzy_ele[1] == First_filter_ele[7]:
                    Comment=Comments_fuzzy_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','')
                    CET_Comment=Comments_fuzzy_ele[3].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                    Comment_Score=Comments_fuzzy_ele[4]
                
            #if not(Score==0 and Comment_Score==0):
            out.write('%d,' %CompanyID)
            out.write('%d,' %CollarID)
            out.write('%d,' %FromDepth)
            out.write('%s,' %ToDepth)
            out.write('%s,' %Company_Lithocode)
            out.write('%s,' %Company_Lithology)
            out.write('%s,' %CET_Lithology)
            out.write('%d,' %Score)
            out.write('%s,' %Comment)
            out.write('%s,' %CET_Comment)
            out.write('%d,' %Comment_Score)
            out.write('\n')
        cur.close()
    
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
   






def final_lithology_with_comments_split():  #pass the longitude and lattitude directly in the query as its join of two query.
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and attribute column lithology table from DB for the specified region.
    Also joins extraction of Comments attribute column with Comments attribute value.The extracted data is split using split funtion to create processes.
    
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - split list of dataset in Final_split_proc_list.
    '''
    conn = None
    query = ''' SELECT m1.companyid, m1.collarid, m1.fromdepth, m1.todepth, m1.lith_attributecolumn, m1.lith_attributevalue, 
                m2.comments_attributecolumn, m2.comments_attributevalue 
                FROM 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS lith_attributecolumn, t1.attributevalue AS lith_attributevalue 
                 from public.dhgeologyattr t1
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_lithology t5
                 on t1.attributecolumn = t5.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m1
                 FULL JOIN		 
                (select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS comments_attributecolumn, t1.attributevalue AS comments_attributevalue  
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_comment t6
                 on t1.attributecolumn = t6.attributecolumn
                 WHERE(t3.longitude BETWEEN 115.5 AND 118) AND(t3.latitude BETWEEN -30.5 AND -27.5) 
                 ORDER BY t3.companyid ASC) m2 
                 on m1.dhgeologyid = m2.dhgeologyid'''
                 
                 
                 
        
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        print("connected")
        cur = conn.cursor()
        #Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query)  #,Bounds)
        First_Filter_list = [list(elem) for elem in cur]
        filename_final = 'final_split_list'
        comments_dic_litho_split(First_Filter_list,filename_final,Var.Final_split_proc_list,worker_proc)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
    



def final_comments_with_fuzzy_process(split_List,Comments_fuzzy,Attr_val_fuzzy,q2):      #,filename):uncomment if need files
    '''
    For Each row extracted for a region, the from and to depth values are validated , generated fuzzywuzzy values for the lithology along with the score are printed.
        This is the function which is called by Process funtion.
    Inputs:
            -split_List : Each split list to get fuzzywuzzy.
            -Comments_fuzzy : copy of comments fuzzy
            - Attr_val_fuzzy : copy of att_val fuzzy
            - q2 : multiprocessing queue to put the fuzzywuzzy resuts .
            
    '''

    final_fuzzy_list =[]
    for First_filter_ele in split_List:
        if (First_filter_ele[0] == None and First_filter_ele[1]== None  and First_filter_ele[2]== None  and First_filter_ele[3]== None) or  (First_filter_ele[2] == None and First_filter_ele[3] ==None) :   # for empty fields, bug
            continue
        else :
            First_filter_ele[2],First_filter_ele[3] =Depth_validation_comments(First_filter_ele[2],First_filter_ele[3])  #  ,First_filter_ele[1],First_filter_ele[6],logger1) # validate depth
            CompanyID=First_filter_ele[0]
            CollarID=First_filter_ele[1]
            FromDepth=First_filter_ele[2]
            ToDepth=First_filter_ele[3]
            Company_Lithocode=""
            Company_Lithology=""
            CET_Lithology=""
            Score=0
            Comment=""
            CET_Comment=""
            Comment_Score=0
        
        
        for Attr_val_fuzzy_ele in Attr_val_fuzzy:
            if int(Attr_val_fuzzy_ele[0].replace('\'' , '')) == First_filter_ele[0] and  Attr_val_fuzzy_ele[1].replace('\'' , '') == First_filter_ele[5]:
                Company_Lithocode=Attr_val_fuzzy_ele[1]
                Company_Lithology=Attr_val_fuzzy_ele[2].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Lithology=Attr_val_fuzzy_ele[4].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Score=Attr_val_fuzzy_ele[5]
                
        for Comments_fuzzy_ele in Comments_fuzzy:
            if Comments_fuzzy_ele[1] == First_filter_ele[7]:
                Comment=Comments_fuzzy_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','')
                CET_Comment=Comments_fuzzy_ele[3].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                Comment_Score=Comments_fuzzy_ele[4]

        final_fuzzy_list.append([CompanyID,CollarID,FromDepth,ToDepth,Company_Lithocode,Company_Lithology,CET_Lithology,Score,Comment,CET_Comment,Comment_Score])

    ## create csv file for verification
    #df_final_split = pd.DataFrame(final_fuzzy_list)  #, index=var_name1.keys())
    #df_final_split.to_csv(os.path.join(export_path ,filename), index=False, header=True) 
    
    q2.put(final_fuzzy_list)




def final_lithology_only_comments(DB_lithology_Only_Comments_Final_Export,minlong,maxlong,minlat,maxlat):
    '''
    Function Extracts data from tables dhgeologyattr,dhgeology,collar,clbody and comments attribute column lithology table from DB for the specified region.
    For Each row extracted the from and to depth values are validated , generated fuzzywuzzy values for the comments lithology along with the score are printed .
    Input : 
        -minlong,maxlong,minlat,maxlat : Region of interest.
    Output:
        - csv file with the extracted data with fuzzywuzzy and score.
    '''
    query = '''  select t1.dhgeologyid, t3.companyid, t2.collarid, t2.fromdepth, t2.todepth, t1.attributecolumn 
                 AS comments_attributecolumn, t1.attributevalue AS comments_attributevalue  
                 from public.dhgeologyattr t1 
                 inner join public.dhgeology t2 
                 on t1.dhgeologyid = t2.id 
                 inner join collar t3 
                 on t3.id = t2.collarid 
                 inner join clbody t4 
                 on t4.companyid = t3.companyid
                 inner join public.thesaurus_geology_comment t6
                 on t1.attributecolumn = t6.attributecolumn
                 WHERE(t3.longitude BETWEEN %s AND %s) AND(t3.latitude BETWEEN %s AND %s) 
                 ORDER BY t3.companyid ASC '''
                 
                 
                 
    conn = None
    try:
        conn = psycopg2.connect(host = host_,port = port_,database = DB_,user = user_,password = pwd_)
        cur = conn.cursor()
        Bounds=(minlong,maxlong,minlat,maxlat)  #query bounds 
        cur.execute(query,Bounds)
        
        First_Filter_list = [list(elem) for elem in cur]
        fieldnames=['Company_ID','CollarID','Fromdepth','Todepth','Comment', 'CET_Comment', 'Comment_Score']
        out= open(os.path.join(export_path,DB_lithology_Only_Comments_Final_Export), "w",encoding =encoding_1)
        for ele in fieldnames:
            out.write('%s,' %ele)
        out.write('\n')
        for First_filter_ele in First_Filter_list:
            if (First_filter_ele[0] == None and First_filter_ele[1]== None  and First_filter_ele[2]== None  and First_filter_ele[3]== None) or  (First_filter_ele[2] == None and First_filter_ele[3] ==None) :   # for empty fields
                continue
            
            else:    
                First_filter_ele[2],First_filter_ele[3] =Depth_validation_comments(First_filter_ele[2],First_filter_ele[3])  #,First_filter_ele[0],First_filter_ele[2],logger1) # validate depth
                CompanyID=First_filter_ele[0]
                CollarID=First_filter_ele[1]
                FromDepth=First_filter_ele[2]
                ToDepth=First_filter_ele[3]
                Comment=""
                CET_Comment=""
                Comment_Score=0
        
        
       
                
            for Comments_fuzzy_ele in Var.Comments_fuzzy:
                if Comments_fuzzy_ele[1] == First_filter_ele[6]:
                    Comment=Comments_fuzzy_ele[1].replace('(','').replace(')','').replace('\'','').replace(',','')
                    CET_Comment=Comments_fuzzy_ele[3].replace('(','').replace(')','').replace('\'','').replace(',','')  #.replace(',' , ''))
                    Comment_Score=Comments_fuzzy_ele[4]
                
            #if not(Score==0 and Comment_Score==0):
            out.write('%d,' %CompanyID)
            out.write('%d,' %CollarID)
            out.write('%d,' %FromDepth)
            out.write('%s,' %ToDepth)
            out.write('%s,' %Comment)
            out.write('%s,' %CET_Comment)
            out.write('%d,' %Comment_Score)
            out.write('\n')
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
 
    

def addtable(table, table_name):
    """
    Adds a table and assigns a name.

    """

    table_name=table.copy(deep=True) # we remove external reference
    
    table_name['fromdepth'] = table_name['fromdepth'].astype(float)
    table_name['todepth'] = table_name['todepth'].astype(float)
    table_name['collarid'] = table_name['collarid'].astype(str)

    table_name.sort_values(by=['collarid', 'fromdepth'], inplace=True)
    table_name.reset_index(level=None, drop=True, inplace=True, col_level=0, col_fill='')
    return table_name
	
def fillgap1Dhole(in_f,in_t,id,tol=0.01,endhole=-1):
    """
    Function to fill gaps in one drillhole.
    """
    
    i=0
    nint=-1
    ngap=-1
    noverlap=-1
    ndat= len(in_f)

    #make a deep copy of the from to intervals and create a memory view
    np_f= np.zeros(ndat, dtype=float)
    np_t= np.zeros(ndat, dtype=float)
    f = np_f
    t = np_t
    
    for i in range(ndat):
        f[i]=in_f[i]
        t[i]=in_t[i]

    #make a long array (reserve memory space)
    np_nf= np.zeros(ndat*2+4, dtype=float)
    np_nt= np.zeros(ndat*2+4, dtype=float)
    np_nID= np.zeros(ndat*2+4, dtype=int)
    np_gap= np.zeros(ndat*2+4, dtype=int)
    np_overlap= np.zeros(ndat*2+4, dtype=int)

    nt = np_nt
    nID = np_nID
    gap = np_gap
    nf = np_nf
    overlap = np_overlap

    # gap first interval
    if f[0]>tol:
        nint+=1
        nf[nint]=0.
        nt[nint]=f[0]
        nID[nint]=-999
        ngap+=1
        gap[ngap]=id[0]
        #print("1:", nID[nint])

    for i in range(ndat-1):
        
        # there is no gap?
        if -tol<=f[i+1]-t[i]<=tol:
            # existing sample
            nint+=1
            nf[nint]=f[i]
            nt[nint]=f[i+1]
            nID[nint]=id[i]
            #print("2:", nID[nint])
            continue

        # there is a gap?
        if f[i+1]-t[i]>=tol:
            # existing sample
            nint+=1
            nf[nint]=f[i]
            nt[nint]=t[i]
            nID[nint]=id[i]
            #gap
            nint+=1
            nf[nint]=t[i]
            nt[nint]=f[i+1]
            nID[nint]=-999
            ngap+=1
            gap[ngap]=id[i]
            #print("3:", nID[nint])
            continue

        # there is overlap?
        if f[i+1]-t[i]<=-tol:
            # the overlap is smaller that the actual sample?
            if f[i+1]>f[i]:
                # existing sample
                nint+=1
                nt[nint]=max(f[i+1],f[i]) # ising max here to avoid negative interval from>to
                nf[nint]=f[i]
                nID[nint]=id[i]
                noverlap+=1
                overlap[noverlap]=id[i]
                #print("4:", nID[nint])
                continue
            # large overlap?
            else:
                #whe discard next interval by making it 0 length interval
                # this will happen only in unsorted array...
                noverlap+=1
                overlap[noverlap]=id[i]
                # update to keep consistency in next loopondh
                nint+=1
                nt[nint]=t[i] # ising max here to avoid negative interval from>to
                nf[nint]=f[i]
                nID[nint]=id[i]
                f[i+1]=t[i+1]
                #print("5:", nID[nint])

    # there are no problems (like a gap or an overlap)
    if (-tol<=f[ndat-1]-t[ndat-2]<=tol) and ndat>1:
        nint+=1
        nt[nint]=t[ndat-1] # ising max here to avoid negative interval from>to
        nf[nint]=f[ndat-1]
        nID[nint]=id[ndat-1]
        #print("6:", nID[nint])
    else:
        # just add the sample (the problem was fixed in the previous sample)
        nint+=1
        nt[nint]=t[ndat-1] # ising max here to avoid negative interval from>to
        nf[nint]=f[ndat-1]
        nID[nint]=id[ndat-1]
        #print("7:", nID[nint])

    # add end of hole
    if endhole>-1:
        # ranee's adding end interval
        if (tol<endhole-t[ndat-1]) and (endhole-t[ndat-1]>-tol):
            try:
				#gap
                nint+=1
                nf[nint]=t[i+1]
                nt[nint]=endhole
                nID[nint]=-999
                ngap+=1
                gap[ngap]=id[i]
                #print("100:", nID[nint])
            except IndexError as error:
                nt[nint]=endhole
			
        # there is an end of hole gap?
        if (tol>endhole-t[ndat-2]) and ndat>1:
            #print("1")
            nint+=1
            nt[nint]=endhole
            nf[nint]=t[ndat-1]
            nID[nint]=-999
            ngap+=1
            gap[ngap]=-888  # this is a gap at end of hole
            #print("8:", nID[nint])
			
        # there is an end of hole overlap?
        if (tol>endhole-t[ndat-2]) and ndat>1:
            #print("2")
            nint+=1
            nt[nint]=endhole
            nf[nint]=t[ndat-1]
            nID[nint]=-999
            noverlap+=1
            overlap[noverlap]=-888 # this is an overlap at end of hole
            #print("9:", nID[nint])

        # there is no gap or overlap, good... then fix small differences
        if (tol<endhole-t[ndat-2]) and (endhole-t[ndat-2]>-tol):
            #print("3")
            #print(endhole)
            #print(t[ndat-2])
            #print(ndat)
            nt[nint]=endhole
            #print(nt[nint])
            #print("10:", nID[nint])

    # make first interval start at zero, if it is != to zero but close to tolerance
    if 0<nf[0]<=tol:
        nf[0]=0
    #print(np_nf[:nint+1],np_nt[:nint+1],np_nID[:nint+1],np_gap[:ngap+1],np_overlap[:noverlap+1])    
    return np_nf[:nint+1],np_nt[:nint+1],np_nID[:nint+1],np_gap[:ngap+1],np_overlap[:noverlap+1]

def add_gaps(table_name,new_table_name,tol=0.01,clean=True,endhole=-1):

        """Fills gaps with new FROM-TO intervals."""
        
        table_name.sort_values(by=['collarid', 'fromdepth'], inplace=True)
        table_name.loc[:,'_id0']= np.arange(table_name.shape[0])[:]
        group=table_name.groupby('collarid')

        #add gaps
        BHID=group.groups.keys()
        nnf=[]
        nnt=[]
        nnID=[]
        nnBHID=[]
        nngap= []
        nnoverlap = []
        for i in BHID:
            nf,nt,nID,gap,overlap=fillgap1Dhole(in_f = group.get_group(i)['fromdepth'].values,
                                          in_t = group.get_group(i)['todepth'].values,
                                          id = group.get_group(i)['_id0'].values,
                                          tol=tol,
                                          endhole=endhole)


            nBHID = np.empty([len(nf)], dtype=object, order='C')
            nBHID[:]=i
            nnf+=nf.tolist()
            nnt+=nt.tolist()
            nnID+=nID.tolist()
            nnBHID+=nBHID.tolist()
            nngap+=gap.tolist()
            nnoverlap+=overlap.tolist()


        #create new table with gaps (only with fields )
        newtable=pd.DataFrame({'collarid':nnBHID, 'fromdepth':nnf,'todepth':nnt,'_id0':nnID})

        newtable=newtable.join(table_name, on='_id0', rsuffix='__tmp__')

        #clean if necessary
        if clean:
            newtable.drop(
               ['collarid__tmp__', 'fromdepth__tmp__','todepth__tmp__','_id0__tmp__'],
               axis=1,inplace=True, errors='ignore')

        #add table to the class
        new_table_name=addtable(newtable,new_table_name)
        return new_table_name
        #return nngap,nnoverlap
		
def min_int(la,lb,ia,ib,tol=0.01):
    """
    Given two complete drillholes A, B (no gaps and up to the end of
    the drillhole), this function returns the smaller of two
    intervals la = FromA[ia] lb = FromB[ib] and updates the
    indices ia and ib. There are three possible outcomes

    - FromA[ia] == FromB[ib]+/- tol. Returns mean of FromA[ia], FromB[ib] and ia+1, ib+1
    - FromA[ia] <  FromB[ib]. Returns FromA[ia] and ia+1, ib
    - FromA[ia] >  FromB[ib]. Returns FromB[ia] and ia, ib+1
    """

    # equal ?  
    #if (lb-1)<=la<=(lb+1):
    if la==lb:
        #print("la", la)
        #print("lb", lb)
        #print("1:", (la+lb)/2)
        #print("ia", ia)
        #print("ib", ib)
        #return ia+1, ib+1, (la+lb)/2
        return ia+1, ib+1, la
    
    # la < lb ?
    if la<lb:
        #print("la", la)
        #print("lb", lb)
        #print("2:",  la)
        return ia+1, ib, la

    # lb < la ?
    if lb<la:
        #print("la", la)
        #print("lb", lb)
        #print("3:",  lb)
        return ia, ib+1, lb

def merge_one_dhole(la,lb,ida,idb,tol=0.01):
    """
    Function to merge one drillhole.

    """
    ia=0
    ib=0
    maxia= len (la)
    maxib= len (lb)
    maxiab= len (lb) + len (la)
    inhole = True
    n=-1

    # prepare output as numpy arrays
    np_newida= np.zeros(maxiab, dtype=int)
    np_newidb= np.zeros(maxiab, dtype=int)
    np_lab= np.zeros(maxiab, dtype=float)

    # get memory view of the numpy arrays
    newida = np_newida
    newidb = np_newidb
    lab = np_lab

    #loop on drillhole
    while inhole:
        # get the next l interval and l idex for drillhole a and b
        ia, ib, l = min_int(la[ia], lb[ib], ia, ib, tol=tol)
        #print(ia, ib, l)
        n+=1
        newida[n]=ida[ia-1]
        newidb[n]=idb[ib-1]
        lab[n]=l
        #print(newida[n])
        #print(newidb[n])
        #print(lab[n])

        #this is the end of hole (this fails if maxdepth are not equal)
        if ia==maxia or ib==maxib:
            inhole=False
    #print(n, np_lab[:n+1], np_newida[:n+1], np_newidb[:n+1])
    return n, np_lab[:n+1], np_newida[:n+1], np_newidb[:n+1]

def get_maxdepth(input_table_A,input_table_B):
    """Get maximum depth between tables"""
    #gaps and overlaps
    maxlist=[]
    a= input_table_A['todepth'].unique().tolist()
    maxlist.append(a[-1])
    b= input_table_B['todepth'].unique().tolist()
    maxlist.append(b[-1])
    maxl=float(max(maxlist))
    return maxl


def merge(input_table_A,input_table_B,new_table_name,tol=0.01,clean=True):
    """Combines two tables by intersecting intervals.

    This function requires drillholes without gaps and overlaps.
    You may un add_gaps in table_A and table_B before using
    this function."""
	
    #get maxdepth
    maxl=get_maxdepth(input_table_A,input_table_B)
    
    #fill gaps
    table_A=add_gaps(input_table_A,new_table_name, tol=tol,clean=True, endhole=maxl)
    table_B=add_gaps(input_table_B,new_table_name, tol=tol,clean=True, endhole=maxl)
    #print(table_A)
    #print(table_B)
    
    #gaps and overlaps
    
    table_A.sort_values(by=['collarid', 'fromdepth'], inplace=True)
    table_B.sort_values(by=['collarid', 'fromdepth'], inplace=True)

    # add ID to tables
    table_A.loc[:,'_id0']= np.arange(table_A.shape[0])[:]
    table_B.loc[:,'_id1']= np.arange(table_B.shape[0])[:]

    # create a groups to easily iterate
    groupA=table_A.groupby('collarid')
    #print(groupA)
    groupB=table_B.groupby('collarid')
    #print(groupB)
            
    # prepare fixed long array to send data
    #    input
    np_la=np.empty(table_A.shape[0]+1, dtype = float)
    np_lb=np.empty(table_B.shape[0]+1, dtype = float)
    np_ida=np.empty(table_A.shape[0]+1, dtype = int)
    np_idb=np.empty(table_B.shape[0]+1, dtype = int)

    ll = table_A.shape[0] +  table_B.shape[0] +10
    nBHID = np.empty(ll, dtype=object, order='C')
    
    la = np_la
    lb = np_lb
    ida  = np_ida
    idb  = np_idb
    
    #merge
    tablea= table_A['collarid'].unique().tolist()
    tableb= table_B['collarid'].unique().tolist()
    BHID=list(set(tablea) & set(tableb))

    nnf=[]
    nnt=[]
    nnIDA=[]
    nnIDB=[]
    nnBHID=[]

    keysA= groupA.groups.keys()
    print(keysA)
    keysB= groupB.groups.keys()
    print(keysB)

    for i in BHID:
        # if we really have to merge
        if (i in keysA) and (i in keysB):
            # prepare input data
            # table A drillhole i
            nk=groupA.get_group(i).shape[0]
            for k in range(nk):
                la[k]=groupA.get_group(i)['fromdepth'].values[k]
                ida[k]=groupA.get_group(i)['_id0'].values[k]

            la[nk]=groupA.get_group(i)['todepth'].values[nk-1]
            ida[nk]=groupA.get_group(i)['_id0'].values[nk-1]

            # table B drillhole i
            nj=groupB.get_group(i).shape[0]
            for j in range(nj):
                lb[j]=groupB.get_group(i)['fromdepth'].values[j]
                idb[j]=groupB.get_group(i)['_id1'].values[j]

            lb[nj]=groupB.get_group(i)['todepth'].values[nj-1]
            idb[nj]=groupB.get_group(i)['_id1'].values[nj-1]

            # make sure the two drill holes have the same length
            # by adding a gap at the end of the shortest drillhole
            if lb[nj] > la[nk]:
                nk+=1
                la[nk] = lb[nj]
                ida[nk] = -999
                endf = lb[nj]

            elif la[nk] > lb[nj]:
                nj+=1
                lb[nj] = la[nk]
                idb[nj] = -999
                endf = la[nk]

            # merge drillhole i
            n, np_lab, np_newida, np_newidb = merge_one_dhole(la[:nk+1],lb[:nj+1], ida[:nk+1], idb[:nj+1], tol=0.01)
            #print(n, np_lab, np_newida, np_newidb)

            # dhid
            nBHID[:n]=i
            nnBHID+=nBHID[:n].tolist()
            # from
            nnf+=np_lab[:-1].tolist()
            # to
            nnt+=np_lab[1:].tolist()
            # IDs
            nnIDA+=np_newida[:-1].tolist()
            nnIDB+=np_newidb[:-1].tolist()
            continue

        # it is only on table A?
        if (i in keysA):
            n= groupA.get_group(i).shape[0]
            # in this case we add table A and ignore B
            # dhid
            nBHID[:n]=i
            nnBHID+=nBHID[:n].tolist()
            # from
            nnf+=groupA.get_group(i)['fromdepth'].values.tolist()
            # to
            nnt+=groupA.get_group(i)['todepth'].values.tolist()
            # IDs
            tmp=-999*np.ones(n, dtype='int')
            nnIDA+=groupA.get_group(i)['_id0'].values.tolist()
            nnIDB+= tmp.tolist()
            continue

        # it is only on table B?
        if (i in keysB):

            n= groupB.get_group(i).shape[0]

            # in this case we add table B and ignore A
            # dhid
            nBHID[:n]=i
            nnBHID+=nBHID[:n].tolist()
            # from
            nnf+=groupB.get_group(i)['fromdepth'].values.tolist()
            # to
            nnt+=groupB.get_group(i)['todepth'].values.tolist()
            # IDs
            tmp=-999*np.ones(n, dtype='int')
            nnIDA+= tmp.tolist()
            nnIDB+= groupB.get_group(i)['_id1'].values.tolist()
            continue


    #create new table with intervals and ID
    newtable=pd.DataFrame({'collarid':nnBHID, 'fromdepth':nnf,'todepth':nnt,'_id0':nnIDA,'_id1':nnIDB})
    print(newtable)
	
    # merge with existing data
    newtable=newtable.join(table_A, on='_id0', rsuffix='__tmp__')
    newtable=newtable.join(table_B, on='_id1', rsuffix='__tmp__')
    print(newtable)


    #clean if necessary
    if clean:
        newtable.drop(
            ['collarid__tmp__', 'fromdepth__tmp__','todepth__tmp__','_id0__tmp__','_id1__tmp__'],
            axis=1,inplace=True, errors='ignore')

    #add table to the class
    new_table_name=addtable(newtable,new_table_name)
    new_table_name.to_csv('../data/export_db/join.csv')


--------------------------------------
--------------------
SELECT collar.id, replace(replace(collar.holeid, '\"', '_'), ',', '_') as holeid, 
		  collar.longitude, collar.latitude, collarattr.attributecolumn, collarattr.attributevalue 
		  FROM public.collar 
		  INNER JOIN collarattr 
		  ON collar.id = collarattr.collarid 
		  WHERE(longitude BETWEEN 115.5  AND 115.6 AND latitude BETWEEN -30.5 AND -27.5)
		  ORDER BY collarattr.collarid ASC
		  
		  
		  
SELECT todepth FROM Dhalteration WHERE 	collarid = 315252


SELECT todepth FROM Dhdrilldetail WHERE 	collarid = 315252
SELECT todepth FROM Dhevent  WHERE 	collarid = 315252
SELECT todepth FROM Dhgeochemistry WHERE 	collarid = 315252
SELECT todepth FROM Dhgeology WHERE 	collarid = 315252
SELECT todepth FROM dhgeophysics WHERE 	collarid = 315252
SELECT todepth FROM dhgeotech WHERE 	collarid = 315252
SELECT todepth FROM dhhyperspectral WHERE 	collarid = 315252
SELECT todepth FROM dhmagsus WHERE 	collarid = 315252
SELECT todepth FROM dhmineralogy WHERE 	collarid = 315252
SELECT todepth FROM dhrecovery WHERE 	collarid = 315252
SELECT todepth FROM dhregolith WHERE 	collarid = 315252
SELECT todepth FROM dhspecgrav WHERE 	collarid = 315252
SELECT todepth FROM dhstructure WHERE 	collarid = 315252
SELECT todepth FROM dhveining WHERE 	collarid = 315252
SELECT todepth FROM dhwater WHERE 	collarid = 315252
SELECT todepth FROM dhweathering WHERE 	collarid = 315252
	
-----not in anynof the above table -----	












	
	





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































	
	
	
	
	
	
	
	
	